%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: quote round box.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Administrator
%%CreationDate: 7/30/2015
%%BoundingBox: 0 0 481 411
%%HiResBoundingBox: 0 0 480.5206 410.5542
%%CropBox: 0 0 480.5206 410.5542
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 112 8%%BeginData: 8855 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD36FFA87D7D5227F827FD07F8272752527DA8FD68FF7D5227FD16
%F827527DA8FD60FF7D52FD1DF827277DA8FD5AFF7D52FD24F827A8FD55FF
%A87D27FD28F8277DFD52FF7DFD2EF87DA8FD50FF27FD2EF8277DFD50FF52
%FD2FF827A8FD4FFF7D27FD2FF852FD4FFFA827FD0BF852527D7DA87DA87D
%A87D7D52522727FD15F8277DFD4FFF52FD05F82752A8A8FD11FF7D7D27FD
%13F87DFD4FFF7DF82752A8FD18FFA87D27FD11F827FD6EFFA87DFD10F827
%FD36FFA8FD0DFFA8FD2BFF5227FD0FF8A8FD32FFA827A8FD0CFF5252FD2C
%FFA87DFD0FF8A8FD2FFFA827F827FD0BFF7DF8F8A8FD2FFF27FD0EF8A8FD
%2DFF7DF8F8F8A8FD0AFF27F8F852FD31FF7D27FD0DF8A8FD2BFF52F8F8F8
%52FD09FFA827F8F8F8A8FD32FFA852FD0DF8FD2AFF52FD04F8A8FD08FFA8
%27F8F8F827FD35FF7DFD0CF827FD28FF7DFD05F8277DFD07FF27FD05F852
%A8FD34FFA8FD0CF827FD27FF27FD07F827A8FD04FF7DFD08F87DFD35FFFD
%0CF852FD25FF7DFD09F827A8FFFFFFFD0AF852FD35FFFD0CF87DFD24FFFD
%0BF852FFFF7DFD0BF8A8FD35FFFD0BF827A8FD22FF7DFD0CF8FFFF52FD0B
%F852FD35FFA8FD0BF852FD22FF7DFD0CF87DFF27FD0BF827FD36FFA8FD0B
%F8A8FD21FF52FD0CF87DFFFD0CF827FD37FF7DFD0BF8FD21FF7DFD0CF87D
%FFFD0CF827FD38FF7DFD0AF852FD20FF7DFD0CF8A8FF52FD0BF852FD39FF
%27FD0AF8A8FD20FF27FD0AF852FFFF7DFD0BF87DFD39FFA8FD0AF852FD20
%FFA8FD0AF8A8FFFFFF27FD09F852FD3BFF7DFD0AF8A8FD20FF7DFD07F827
%7DFD05FFFD08F827FD3DFF27FD09F852FD21FFA827FD04F852A8FD07FF52
%27F8F8F8277DFD3EFFA8FD0AF8A8FD22FFA8A8A8FD0CFFA8A8FD42FF52FD
%09F87DFD75FFA8FD0AF8FD76FF52FD09F87DFD75FFA8FD09F852FD76FF27
%FD09F8FD76FF7DFD09F87DFD1AFF527DFD5AFFFD09F852FD19FFA827F87D
%FD14FF7DFFA8FFA8FFA8FFA8A8A8FFFFA8A8A8FFFFA8FFA8FFA8FFA8FFFF
%A87DFFA8A8A8FFA8FFA8FFA8A852A8FFFFA8FFA8FFA8FFA8FF7D7DA8FD0E
%FF52FD09F8FD19FFA8F8F8F852FD12FFA8A8FFFD047D527D7D527D7DFFA8
%7D7DA87D7DA8A8527D527DFFA852FD077D52FFA87D7D7DA8FF7D7D527D52
%7D7D527D7D52FD0FFF7DFD09F8A8FD18FF7DFD04F827A8FD11FF52A87D7D
%52A8527D52A87DA8A8A8527D527D527D527D7DA87DFF7DA8527D7D5252A8
%7D7DFFFF527D7DFFA87D7D52A87D7D52527D7D7DA8FD0FFFFD09F87DFD18
%FF52FD06F87DFD10FFFD04A8FFFFA8A8FFA8FFA8FFA87D7DFF7DFF7DA8A8
%FFA8FFFFFF7DFD04A8FF7DA8A8FFA8A8A8FFFFFFA8A8A8FFFFFFA8A8A8FF
%A8A8A8FD0EFF27FD08F852FD18FF27FD07F827FD1DFFA8FD37FF52FD08F8
%27FD18FF27FD08F87DFD0FFFA8FD0BFFA8FF7DFFFFFF7DFD06FFA8FD06FF
%A8FD09FFA8A87DFF7DFFA8FFA8FD12FFA8FD09F8FD17FFA8FD09F8A8FD0E
%FF52FD057D527D7D7D52FD067D527D7D7DFF7DFF7D7D52A87D7D527D5252
%527DA8FF527DFFA8A87D7D5252FD057D527DFD10FFA8FD09F8A8FD16FF7D
%FD08F827FD0EFFA87DA8FD047DFF527D5252527DA8A87D7D52FD047DA8FF
%5252A8527D7DA8527D7DA8FD047D52FF7D7D52A8FD047DA8A8527D52A8FD
%10FFFD09F8A8FD16FF7DFD09F8FD0FFF7D7DA87DA8FFA8A87DFF7DA8A87D
%FD05A8FFA87DA8FFA8FFA8A8A8FF7D7DA8FFA8A87DA8A87DFFA87DFD04A8
%FFA87D7DA87DA8A8FD10FF27FD08F852FD16FF52FD08F852FD56FF27FD08
%F87DFD16FF52FD08F852FD0FFF52A8FD05FFA8A8FFFFFFA8FFFFFFA8FFFD
%04A8FFA87DA8FD06FFA8FFFFFFA8FFA8FFA8A8FD04FFA8FFA8A8FFFFA8FD
%12FF52FD08F852FD16FF52FD08F87DFD0FFF7DA8A8527D7DA87D7D527D7D
%7DA8FF7D7DFFA852FD047D527DA87D7DA8A87D527DFFFD067D527D52FFA8
%7D7D7D52A8A87D527DFD10FF52FD08F852FD16FF52FD08F852FD0FFF5252
%7D7D277D7DFD04527D7DA8A87D52A8A87D7D7D527D525252A8527D7D5227
%7DFF7D7D527DA87D7D2752A8A8527D52A8527D7D5252A8FD0FFF7DFD08F8
%27FD16FF27FD08F87DFD0FFF7DA8A87D7D52A8A8FF7DA8A8FFA8FF7DA8FF
%FFA8FFFD06A87D7D7DA8A87DA8FFA87D7DFFFD04A87DFFA87DA8A8A8FFA8
%7D7DA8A8FD0FFF7DFD08F852FD16FF52FD08F87DFD2BFFA8FD11FFA8FD18
%FF7DFD08F827FD16FF27FD08F87DFD11FFA87DFD08FFA8A8FD0BFFA8FD08
%FFA87DFD04FFA8FFA8A8FD1BFF7DFD08F852FD16FF27FD08F852FD0FFF52
%7D7D527DFF527DFFA8527D52A8A852527D7D7D52A8A8A8527D52FFA8A87D
%7D527D527D7DFFFFA8F8A8FD057DFFA87D527D525252A8FD0FFF7DFD08F8
%27FD16FF52FD08F87DFD0EFFA852527D527D7D7D52FF7D5252A8FFA87DA8
%A852A87D52A852A87D52A8FF527D5252527D7DA8FFFF527D527D52A87D52
%7D7D52A827A87DA87DFD0FFF52FD08F852FD16FF52FD08F852FD0FFF7DA8
%A8A87D7DA87DFFFF7DA8A8FFA8A8A8FFA87D7DA852A8A8A87DA8FFA8A8A8
%7DFF7DA8A8A8FFA8FFA87DA8FD057DA87D7DA8FFA8A8FD0FFFA8FD08F852
%FD16FF52FD08F852FD57FFA827FD06F87DFD16FF7DFD08F827FD10FFA8A8
%FFFFFFA8FD0BFFA8FD06FFA87DA8FD06FFA8A8FD05FFA8A8FFFFFF7DFD07
%FFA8FD13FF27FD05F852FD16FF7DFD08F827FD0FFFA8527D7D7DA87D7DA8
%527DFFA852A87DA87D7D7DA8A8A87D7D527D7D7DFFA8A87DA8A8527D7DA8
%A8FF52FD077DA8FF7D7D7DA8FD14FF7DFD04F8A8FD16FFA8FD09F8A8FD0D
%FFA87DA827525252A87D52A852FF52A87D7D7D527DA8527D7DA8527D527D
%52FFA8527D7D525252A852A87D7D7DA87D7D7D5252A8A852527D52FD15FF
%A827F8F8A8FD16FFA827FD08F87DFD0EFFA87DA87DA87D5252A87DA8FFA8
%7DA87DA8A8FFA8FFA8FF7D7DA8A87D7DFFFF7DFF7DA87D527DFF7DA8A8FF
%7D7DA8FFA87DFFFF7DA8A87DFD17FF52F8FD18FFFD09F87DFD13FFA87DA8
%FD1CFFA8FD2AFF7DA8FD17FF52FD08F827FD0DFFA8FD0DFFA8FD07FFA8A8
%FFFFA8FFA8FFFFFFA8A8FD04FFA8FD0DFF7DFD34FF52FD08F827A8FD0CFF
%A852FD047DA8A87D527D7DFFA8A8FD057DA8A8FD047DA8A87DA8A87D7D52
%A852FFA8FD077DA8FF527D7DFF7D527DA852A8FD30FFA8FD09F8A8FD0CFF
%A8277DA852527DA852A87DA8A8A852A87D52A8A87DA8527D527DA8FF52A8
%527D7DA87DA87DFF27A87D7D527D7D7DFF7DA852A87D5252A87D7DFD30FF
%A8FD09F827FD0DFF52527DA87D7D52FD04A8FFA8A87D7DA8FD047DA87D7D
%7DFF7D7D52A87DA8A8A852A8A87D7DA8FD047DA8FFA8FFFD067D52A8A8FD
%30FF27FD08F827FD0EFFA8FD18FFA8A8FD4DFF7DFD09F8A8FD75FFA8FD09
%F827FD76FF27FD09F8A8FD44FFA82727F82752A8FD08FF5227F827277DFF
%FFA8FD19FF7DFD09F87DFD43FF52FD07F8A8FD05FFA8FD07F852FD1BFFA8
%FD0AF8FD42FF27FD09F8A8FFFFFFA8FD09F852FD1BFF52FD09F852FD40FF
%7DFD0AF827FFFFFFFD0BF87DFD1AFFA8FD0AF8A8FD3FFFFD0CF87DFF7DFD
%0BF827FD1BFF52FD09F852FD3EFFA8FD0CF87DFF52FD0BF827A8FD1AFF7D
%FD0AF8A8FD3DFFA8FD0CF852FF27FD0CF8A8FD1BFF27FD0AF8FD3DFFA8FD
%0CF852FF52FD0CF8A8FD1BFFA8FD0AF827FD3DFFFD0CF852FF52FD0CF8FD
%1DFF52FD0AF87DFD3CFF52FD0BF8A8FFFFFD0BF852FD1DFFA8FD0BF8A8FD
%3BFFA8FD0AF827FFFFFF7DFD0AF87DFD1EFF52FD0AF827FD3CFFA8FD09F8
%7DFD04FF52FD08F827FD20FF27FD0AF827FD3CFFA852FD06F827FD06FF7D
%27FD06F8A8FD20FFA8FD0BF852FD3DFFA8FD04F827FD09FF52FD04F87DFD
%22FF7DFD0BF852FD3CFF7DFD04F8FD0AFF27F8F8F87DFD24FF52FD0BF852
%FD3BFF27F8F827FD0AFFA8F8F8F87DFD25FFA827FD0BF827A8FD38FF7DF8
%F852FD0BFFF8F8F8A8FD27FFA8FD0CF827A8FD37FF2752A8FD0BFF52277D
%FD2AFF7DFD0DF87DFD35FFA8A8FD0DFFA8A8FD2CFF7DFD0DF827FD72FF52
%FD0EF87DFD71FF7DFD0EF852A8FD28FFA8A8FD46FF7DFD0FF827A8FD24FF
%7D52F827A8FD46FF7DFD10F8527DFD20FFA827FD05F87DFD46FFA827FD11
%F8527DFD1AFFA85227FD08F852FD46FFA852FD12F8277D7DFD13FFA8A852
%27FD0CF827FD47FF7DFD15F827277D7DA8A8FFA8FFA8FFA8A87D7D5252FD
%13F8A8FD46FFA827FD1AF827F827F827FD19F8A8FD47FF52FD36F87DA8FD
%48FFA852FD32F827FD4DFFA827FD2EF8277DFD50FFA852FD2AF827A8FD4D
%FFA8FFFFFFA8FFFFA85227FD25F8527DFFFFFFA8FFFFFFA8FD42FFA8FFFF
%FFA8FFA8FFA8FFA8FFA8FFA87D2727FD1FF8527DA8AFFFA8FFA8FFA8FFA8
%FFA8FFA8FD30FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFFD0AA884A8A8A87DA8
%A8A87D7D2727FD19F852527DFD04A87DFD10A8FFA8FFA8FFA8FFA8FFA8FF
%A8FD1CFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFFD0AA87EA8A8A87DA87DA87D
%A87DA87DA87D7D52522727F827FD0BF8FD04277D7DA87DA87DA87DA87DA8
%7DA884A87DFD0CA8FFA8FFA8FFA8FFA8FFAFFFA8FD18FFA8FFA8FFA8FFA8
%FFA8FFFD0EA87DA87DA87DA87DA87DA87D7D7D7EFD0A7D527DFD09527D52
%FD0C7DA87DA87DA87DA87DA87DA87DFD0CA8FFA8FFA8FFA8FFA8FFA8FFA8
%FD1EFFA8FFA8FFA8FFA8FFA8FFA8AFA8FFFD0EA87DA884A87DA87EA87DA8
%A8A87EA8A8A87EA8A8A87DA87EA87DA884A87DFD10A8FFA8FFA8FFA8FFA8
%FFA8FFA8FD2CFFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8AFA8FFA8A8A8FFFD
%27A8A9A8A8A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FD48FFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FDB3FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">document</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2015-07-30T10:21:32+03:00</xap:CreateDate>
         <xap:ModifyDate>2015-07-30T10:21:32+03:00</xap:ModifyDate>
         <xap:MetadataDate>2015-07-30T10:21:32+03:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>220</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA3AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXEhQSTQDck9AMVeZedf+cjvym8ptJBc6uNSv461sdMAuXqP2TICIVPs0gOKvEvNH/Obeuz&#xA;Fo/K/l+3s49wtzqEjXDkeIji9FVPzZsVeYa5/wA5H/nPrBcS+ZZ7SJukVikVrxHgHiVZPvY4qwzU&#xA;POXm/UmLajrmoXrHcm4uppST1/bY4qlBJJJJqTuSetcVcCQQQaEbgjrXFU30/wA5eb9NYNp2uahZ&#xA;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&#xA;FXYq7FXYq7FXYq//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E39A36FA8A36E51193E8C124CFCCC359</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E49A36FA8A36E51193E8C124CFCCC359</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:E29A36FA8A36E51193E8C124CFCCC359</stRef:instanceID>
            <stRef:documentID>uuid:DE9A36FA8A36E51193E8C124CFCCC359</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1024.000000</stDim:w>
            <stDim:h>768.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>255</xapG:red>
                           <xapG:green>255</xapG:green>
                           <xapG:blue>255</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>R=0 G=0 B=0</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>0</xapG:red>
                           <xapG:green>0</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -410.554 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 410.554 li
480.521 410.554 li
480.521 0 li
cp
clp
[1 0 0 1 0 0 ]ct
480.521 393.693 mo
480.521 403.006 372.953 410.554 240.26 410.554 cv
107.566 410.554 0 403.006 0 393.693 cv
0 384.381 107.566 376.833 240.26 376.833 cv
372.953 376.833 480.521 384.381 480.521 393.693 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[240.226 0 0 16.8633 240.26 393.694 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.584314 .592157 .603922 ]
/C1 [.584314 .592157 .603922 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.584314 .592157 .603922 ]
/C1 [1 1 1 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [1 1 1 ]
/N 1 
>>
]
/Bounds [.135371 .899563 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[240.226 0 0 16.8633 240.26 393.694 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~Q'IW"Q'IW"Q'IW"Q'IW"Q'IW"Q'IW"Q'IW"Q'IW"Q'IW"Q'R`&Q^F/.R[T_8S=H.@St;RITV8'RU8+KZ
UnsobVl-JlWMuntX/i>(Xfeh1YHY79Z*L[A['[6K[^NZS\@B)\]">Se]Y2"m^;%Fu_84"*_o'F2`Poj;
a2l?Dai_cLbKS2TcHab^d*U1fdaHUoeCE+#f%8O+f\+s3gY:N=h;-rEhr!ANiSrkWj5f:_jlYahkih9q
lK[^$m-O--mdKW6nF?&>o(2MGp%A%Pp\4IXq>'maqu$BjrVlfrs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~Q^=&*Q^=&*Q^=&*Q^=&*Q^=&*Q^=&*Q^=&*Q^=&*Q^=&*Q^F/.R@9S6S"-%?St;RHTV/!PU8"EXUnsob
VPg>jW2ZbrWiN2%XKAY.YHP17Z*CU?Za7$G[C3NQ\%&rY\[oAa]=bei]tV7r^qde&_SX4.`5KX6`lH-@
aN;QHb0.uPbg"DXcd0tbdF$Cje'lgre^`7%f@\a/g"P07gYCT?h;7#Gi8ESQio9"YjQ,Fak2tjikiq?s
lKdd&m-X3.mdKW6naZ2@oCMVHp%A%Pp\4IXq>0sbqu$BjrVlfrs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
<~R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[T\6R[]e:S=Q4BStDXJTV8'RU8+KZV5:&dVl-Jl
WMuntX/i>'Xf\b/YHP17Z*CU?Za7$H[C3NQ\%&rY\[oAa]=bei]tV4q^VIY$_8=(,_o0O5`l?'>aN2KF
b0%oNbfn>VcHab^d*U1fdaHUoeCE+#f%8O+f\+s3g=tB;gtgfChV[5Ki8NYSioB+\jlPXekND'ml07Ku
lg*p(mHs?0n*fc8naZ2@oCV\Jp%J+Rp\=OZq>0sbqu$BjrVlfrs8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
318.29 341.89 mo
295.091 354.478 268.51 361.63 240.26 361.63 cv
149.771 361.63 76.4121 288.271 76.4121 197.783 cv
76.4121 185.741 77.7231 174.008 80.189 162.705 cv
50.8716 140.643 li
45.4209 158.735 42.4771 177.914 42.4771 197.783 cv
42.4771 307.015 131.027 395.566 240.26 395.566 cv
279.823 395.566 316.669 383.943 347.582 363.933 cv
318.29 341.89 li
cp
151.209 21.145 mo
177.974 7.62549 208.225 0 240.26 0 cv
349.491 0 438.041 88.5498 438.041 197.783 cv
438.041 210.311 436.863 222.56 434.637 234.441 cv
403.568 211.059 li
403.919 206.679 404.104 202.253 404.104 197.783 cv
404.104 107.292 330.749 33.9355 240.26 33.9355 cv
219.836 33.9355 200.289 37.6831 182.257 44.5112 cv
151.209 21.145 li
cp
0 0 0 rgb
f
384.978 286.434 mo
384.978 276.528 378.251 262.442 361.456 262.442 cv
359.849 262.442 358.308 262.607 356.83 262.931 cv
345.668 264.94 337.2 274.695 337.2 286.434 cv
337.2 297.534 344.772 306.864 355.031 309.544 cv
355.607 309.763 356.195 309.969 356.803 310.167 cv
356.017 318.237 347.629 329.253 347.629 329.253 cv
357.764 327.403 384.978 310.873 384.978 286.434 cv
cp
402.053 329.253 mo
402.053 329.253 410.439 318.237 411.227 310.167 cv
410.62 309.969 410.03 309.763 409.456 309.544 cv
399.195 306.864 391.625 297.534 391.625 286.434 cv
391.625 274.695 400.093 264.94 411.252 262.931 cv
412.732 262.607 414.272 262.442 415.881 262.442 cv
432.675 262.442 439.401 276.528 439.401 286.434 cv
439.401 310.873 412.188 327.403 402.053 329.253 cv
cp
f
109.213 94.5083 mo
109.213 104.414 115.939 118.5 132.734 118.5 cv
134.341 118.5 135.883 118.335 137.359 118.011 cv
148.521 116.001 156.99 106.248 156.99 94.5083 cv
156.99 83.4077 149.417 74.0776 139.159 71.3965 cv
138.583 71.1787 137.994 70.9722 137.388 70.7754 cv
138.173 62.7046 146.562 51.6875 146.562 51.6875 cv
136.426 53.5386 109.213 70.0708 109.213 94.5083 cv
cp
92.1367 51.6875 mo
92.1367 51.6875 83.7495 62.7046 82.9629 70.7754 cv
83.5693 70.9722 84.1597 71.1787 84.7339 71.3965 cv
94.9951 74.0776 102.565 83.4077 102.565 94.5083 cv
102.565 106.248 94.0972 116.001 82.937 118.011 cv
81.4565 118.335 79.9175 118.5 78.3086 118.5 cv
61.5142 118.5 54.7886 104.414 54.7886 94.5083 cv
54.7886 70.0708 82.001 53.5386 92.1367 51.6875 cv
cp
f
135.375 144.861 mo
136.492 144.861 li
136.492 154.951 li
140.789 154.951 li
140.789 156.028 li
135.375 156.028 li
135.375 144.861 li
cp
f
146.288 148.596 mo
145.404 148.596 144.645 148.922 144.011 149.576 cv
143.375 150.229 143.058 151.018 143.058 151.944 cv
143.058 152.542 143.202 153.099 143.492 153.614 cv
143.782 154.131 144.173 154.528 144.665 154.811 cv
145.158 155.091 145.699 155.231 146.288 155.231 cv
146.877 155.231 147.417 155.091 147.91 154.811 cv
148.403 154.528 148.794 154.131 149.083 153.614 cv
149.373 153.099 149.518 152.542 149.518 151.944 cv
149.518 151.018 149.199 150.229 148.562 149.576 cv
147.924 148.922 147.167 148.596 146.288 148.596 cv
cp
146.292 147.556 mo
147.563 147.556 148.619 148.017 149.455 148.938 cv
150.216 149.779 150.596 150.773 150.596 151.921 cv
150.596 153.076 150.194 154.084 149.39 154.947 cv
148.586 155.809 147.553 156.242 146.292 156.242 cv
145.024 156.242 143.989 155.809 143.185 154.947 cv
142.381 154.084 141.98 153.076 141.98 151.921 cv
141.98 150.778 142.36 149.786 143.12 148.945 cv
143.957 148.019 145.014 147.556 146.292 147.556 cv
cp
f
152.161 147.769 mo
153.246 147.769 li
153.246 148.976 li
153.57 148.5 153.911 148.145 154.271 147.91 cv
154.63 147.674 155.005 147.556 155.394 147.556 cv
155.688 147.556 156.001 147.651 156.335 147.838 cv
155.782 148.733 li
155.559 148.636 155.371 148.589 155.22 148.589 cv
154.865 148.589 154.523 148.734 154.195 149.025 cv
153.866 149.317 153.616 149.769 153.442 150.38 cv
153.312 150.851 153.246 151.802 153.246 153.235 cv
153.246 156.028 li
152.161 156.028 li
152.161 147.769 li
cp
f
164.192 151.063 mo
164.051 150.498 163.844 150.044 163.573 149.704 cv
163.301 149.365 162.943 149.092 162.498 148.885 cv
162.051 148.677 161.583 148.574 161.091 148.574 cv
160.281 148.574 159.583 148.834 159 149.356 cv
158.576 149.736 158.253 150.305 158.036 151.063 cv
164.192 151.063 li
cp
164.192 153.288 mo
165.088 153.76 li
164.795 154.335 164.455 154.8 164.07 155.155 cv
163.685 155.509 163.252 155.779 162.771 155.963 cv
162.29 156.148 161.744 156.242 161.137 156.242 cv
159.789 156.242 158.736 155.799 157.976 154.916 cv
157.216 154.033 156.837 153.035 156.837 151.921 cv
156.837 150.874 157.157 149.94 157.801 149.12 cv
158.617 148.078 159.708 147.556 161.077 147.556 cv
162.484 147.556 163.609 148.091 164.45 149.158 cv
165.048 149.913 165.351 150.853 165.362 151.982 cv
157.929 151.982 li
157.95 152.942 158.257 153.729 158.85 154.342 cv
159.442 154.956 160.174 155.262 161.045 155.262 cv
161.466 155.262 161.875 155.189 162.273 155.042 cv
162.67 154.896 163.009 154.702 163.289 154.46 cv
163.567 154.218 163.868 153.827 164.192 153.288 cv
cp
f
167.334 147.769 mo
168.397 147.769 li
168.397 149.196 li
168.768 148.669 169.147 148.284 169.538 148.042 cv
170.075 147.719 170.639 147.556 171.232 147.556 cv
171.632 147.556 172.013 147.635 172.373 147.791 cv
172.732 147.949 173.026 148.157 173.253 148.418 cv
173.482 148.678 173.68 149.052 173.846 149.538 cv
174.2 148.889 174.642 148.398 175.171 148.061 cv
175.702 147.724 176.272 147.556 176.883 147.556 cv
177.454 147.556 177.958 147.7 178.395 147.989 cv
178.832 148.278 179.155 148.68 179.367 149.196 cv
179.579 149.713 179.686 150.487 179.686 151.519 cv
179.686 156.028 li
178.601 156.028 li
178.601 151.519 li
178.601 150.633 178.537 150.025 178.412 149.693 cv
178.285 149.362 178.069 149.095 177.764 148.893 cv
177.458 148.69 177.094 148.589 176.671 148.589 cv
176.156 148.589 175.686 148.741 175.259 149.044 cv
174.833 149.349 174.521 149.753 174.324 150.258 cv
174.128 150.765 174.031 151.61 174.031 152.793 cv
174.031 156.028 li
172.968 156.028 li
172.968 151.8 li
172.968 150.804 172.906 150.126 172.781 149.769 cv
172.658 149.412 172.441 149.126 172.133 148.912 cv
171.823 148.696 171.457 148.589 171.032 148.589 cv
170.542 148.589 170.082 148.738 169.654 149.034 cv
169.226 149.329 168.91 149.728 168.705 150.229 cv
168.5 150.729 168.397 151.496 168.397 152.529 cv
168.397 156.028 li
167.334 156.028 li
167.334 147.769 li
cp
f
186.07 147.769 mo
187.134 147.769 li
187.134 156.028 li
186.07 156.028 li
186.07 147.769 li
cp
186.599 144.368 mo
186.84 144.368 187.046 144.454 187.218 144.626 cv
187.389 144.798 187.475 145.006 187.475 145.249 cv
187.475 145.486 187.389 145.691 187.218 145.864 cv
187.046 146.036 186.84 146.122 186.599 146.122 cv
186.361 146.122 186.157 146.036 185.986 145.864 cv
185.814 145.691 185.729 145.486 185.729 145.249 cv
185.729 145.006 185.814 144.798 185.986 144.626 cv
186.157 144.454 186.361 144.368 186.599 144.368 cv
cp
f
193.608 148.581 mo
192.689 148.581 191.916 148.902 191.287 149.544 cv
190.658 150.186 190.344 150.985 190.344 151.94 cv
190.344 152.567 190.485 153.131 190.765 153.632 cv
191.044 154.131 191.446 154.528 191.968 154.821 cv
192.492 155.115 193.042 155.262 193.623 155.262 cv
194.194 155.262 194.73 155.113 195.232 154.818 cv
195.735 154.523 196.135 154.109 196.433 153.578 cv
196.73 153.047 196.88 152.492 196.88 151.91 cv
196.88 151.324 196.731 150.768 196.437 150.242 cv
196.141 149.717 195.744 149.307 195.244 149.017 cv
194.743 148.727 194.2 148.581 193.608 148.581 cv
cp
189.357 147.769 mo
190.42 147.769 li
190.42 149.287 li
190.84 148.71 191.322 148.278 191.868 147.989 cv
192.414 147.7 193.023 147.556 193.696 147.556 cv
194.869 147.556 195.873 147.979 196.706 148.824 cv
197.541 149.669 197.958 150.687 197.958 151.876 cv
197.958 153.091 197.545 154.122 196.718 154.969 cv
195.892 155.817 194.894 156.242 193.726 156.242 cv
193.069 156.242 192.465 156.104 191.914 155.831 cv
191.362 155.558 190.865 155.151 190.42 154.609 cv
190.42 159.049 li
189.357 159.049 li
189.357 147.769 li
cp
f
204.099 148.673 mo
203.416 149.378 li
202.848 148.827 202.292 148.551 201.749 148.551 cv
201.404 148.551 201.108 148.665 200.863 148.893 cv
200.616 149.12 200.493 149.386 200.493 149.69 cv
200.493 149.958 200.594 150.212 200.798 150.456 cv
201.001 150.705 201.426 150.995 202.075 151.33 cv
202.866 151.739 203.405 152.133 203.688 152.514 cv
203.967 152.898 204.106 153.331 204.106 153.812 cv
204.106 154.49 203.869 155.064 203.392 155.536 cv
202.916 156.006 202.32 156.242 201.605 156.242 cv
201.128 156.242 200.673 156.136 200.24 155.93 cv
199.807 155.723 199.449 155.437 199.165 155.073 cv
199.833 154.313 li
200.376 154.925 200.951 155.231 201.561 155.231 cv
201.986 155.231 202.349 155.095 202.648 154.821 cv
202.948 154.547 203.097 154.226 203.097 153.857 cv
203.097 153.553 202.998 153.283 202.801 153.045 cv
202.603 152.813 202.156 152.518 201.462 152.165 cv
200.716 151.779 200.208 151.4 199.939 151.026 cv
199.67 150.651 199.536 150.224 199.536 149.743 cv
199.536 149.116 199.75 148.593 200.18 148.18 cv
200.607 147.764 201.149 147.556 201.802 147.556 cv
202.563 147.556 203.328 147.929 204.099 148.673 cv
cp
f
205.845 147.769 mo
206.909 147.769 li
206.909 151.625 li
206.909 152.566 206.959 153.215 207.061 153.569 cv
207.211 154.075 207.502 154.476 207.93 154.768 cv
208.359 155.063 208.87 155.208 209.463 155.208 cv
210.055 155.208 210.559 155.066 210.971 154.78 cv
211.385 154.494 211.669 154.117 211.827 153.652 cv
211.934 153.333 211.987 152.658 211.987 151.625 cv
211.987 147.769 li
213.073 147.769 li
213.073 151.823 li
213.073 152.961 212.94 153.819 212.673 154.396 cv
212.408 154.973 212.008 155.424 211.475 155.751 cv
210.94 156.078 210.271 156.242 209.467 156.242 cv
208.662 156.242 207.99 156.078 207.451 155.751 cv
206.912 155.424 206.509 154.969 206.244 154.385 cv
205.978 153.8 205.845 152.922 205.845 151.746 cv
205.845 147.769 li
cp
f
215.425 147.769 mo
216.488 147.769 li
216.488 149.196 li
216.858 148.669 217.238 148.284 217.628 148.042 cv
218.166 147.719 218.731 147.556 219.323 147.556 cv
219.724 147.556 220.103 147.635 220.463 147.791 cv
220.822 147.949 221.117 148.157 221.344 148.418 cv
221.573 148.678 221.771 149.052 221.938 149.538 cv
222.291 148.889 222.732 148.398 223.262 148.061 cv
223.792 147.724 224.364 147.556 224.974 147.556 cv
225.545 147.556 226.048 147.7 226.486 147.989 cv
226.922 148.278 227.246 148.68 227.458 149.196 cv
227.67 149.713 227.776 150.487 227.776 151.519 cv
227.776 156.028 li
226.691 156.028 li
226.691 151.519 li
226.691 150.633 226.628 150.025 226.502 149.693 cv
226.375 149.362 226.161 149.095 225.854 148.893 cv
225.55 148.69 225.185 148.589 224.762 148.589 cv
224.247 148.589 223.777 148.741 223.35 149.044 cv
222.924 149.349 222.612 149.753 222.416 150.258 cv
222.219 150.765 222.122 151.61 222.122 152.793 cv
222.122 156.028 li
221.059 156.028 li
221.059 151.8 li
221.059 150.804 220.997 150.126 220.872 149.769 cv
220.748 149.412 220.531 149.126 220.224 148.912 cv
219.914 148.696 219.547 148.589 219.123 148.589 cv
218.632 148.589 218.173 148.738 217.744 149.034 cv
217.316 149.329 217.001 149.728 216.796 150.229 cv
216.591 150.729 216.488 151.496 216.488 152.529 cv
216.488 156.028 li
215.425 156.028 li
215.425 147.769 li
cp
f
238.316 148.581 mo
237.726 148.581 237.179 148.727 236.679 149.017 cv
236.178 149.307 235.781 149.717 235.484 150.242 cv
235.188 150.768 235.041 151.324 235.041 151.91 cv
235.041 152.492 235.189 153.047 235.488 153.578 cv
235.786 154.109 236.187 154.523 236.69 154.818 cv
237.193 155.113 237.732 155.262 238.309 155.262 cv
238.891 155.262 239.441 155.115 239.963 154.821 cv
240.482 154.528 240.884 154.131 241.163 153.632 cv
241.445 153.131 241.584 152.567 241.584 151.94 cv
241.584 150.985 241.271 150.186 240.64 149.544 cv
240.011 148.902 239.237 148.581 238.316 148.581 cv
cp
242.564 144.581 mo
242.564 156.028 li
241.517 156.028 li
241.517 154.609 li
241.071 155.151 240.572 155.558 240.017 155.831 cv
239.463 156.104 238.857 156.242 238.199 156.242 cv
237.029 156.242 236.031 155.817 235.204 154.969 cv
234.376 154.122 233.962 153.091 233.962 151.876 cv
233.962 150.687 234.38 149.669 235.215 148.824 cv
236.051 147.979 237.056 147.556 238.23 147.556 cv
238.908 147.556 239.521 147.7 240.07 147.989 cv
240.619 148.278 241.102 148.71 241.517 149.287 cv
241.517 144.581 li
242.564 144.581 li
cp
f
248.877 148.596 mo
247.991 148.596 247.234 148.922 246.6 149.576 cv
245.964 150.229 245.646 151.018 245.646 151.944 cv
245.646 152.542 245.791 153.099 246.08 153.614 cv
246.371 154.131 246.763 154.528 247.253 154.811 cv
247.746 155.091 248.287 155.231 248.877 155.231 cv
249.466 155.231 250.006 155.091 250.499 154.811 cv
250.991 154.528 251.383 154.131 251.672 153.614 cv
251.961 153.099 252.106 152.542 252.106 151.944 cv
252.106 151.018 251.788 150.229 251.15 149.576 cv
250.513 148.922 249.755 148.596 248.877 148.596 cv
cp
248.88 147.556 mo
250.152 147.556 251.207 148.017 252.044 148.938 cv
252.804 149.779 253.184 150.773 253.184 151.921 cv
253.184 153.076 252.782 154.084 251.979 154.947 cv
251.175 155.809 250.143 156.242 248.88 156.242 cv
247.612 156.242 246.578 155.809 245.774 154.947 cv
244.97 154.084 244.568 153.076 244.568 151.921 cv
244.568 150.778 244.948 149.786 245.709 148.945 cv
246.546 148.019 247.602 147.556 248.88 147.556 cv
cp
f
254.991 144.581 mo
256.054 144.581 li
256.054 156.028 li
254.991 156.028 li
254.991 144.581 li
cp
f
262.169 148.596 mo
261.285 148.596 260.526 148.922 259.891 149.576 cv
259.255 150.229 258.938 151.018 258.938 151.944 cv
258.938 152.542 259.083 153.099 259.372 153.614 cv
259.662 154.131 260.053 154.528 260.546 154.811 cv
261.038 155.091 261.579 155.231 262.169 155.231 cv
262.757 155.231 263.297 155.091 263.79 154.811 cv
264.283 154.528 264.675 154.131 264.963 153.614 cv
265.253 153.099 265.397 152.542 265.397 151.944 cv
265.397 151.018 265.078 150.229 264.442 149.576 cv
263.804 148.922 263.047 148.596 262.169 148.596 cv
cp
262.172 147.556 mo
263.444 147.556 264.499 148.017 265.335 148.938 cv
266.096 149.779 266.475 150.773 266.475 151.921 cv
266.475 153.076 266.074 154.084 265.271 154.947 cv
264.467 155.809 263.434 156.242 262.172 156.242 cv
260.905 156.242 259.868 155.809 259.065 154.947 cv
258.262 154.084 257.859 153.076 257.859 151.921 cv
257.859 150.778 258.238 149.786 259 148.945 cv
259.837 148.019 260.895 147.556 262.172 147.556 cv
cp
f
268.041 147.769 mo
269.127 147.769 li
269.127 148.976 li
269.449 148.5 269.791 148.145 270.151 147.91 cv
270.511 147.674 270.884 147.556 271.273 147.556 cv
271.567 147.556 271.881 147.651 272.216 147.838 cv
271.662 148.733 li
271.438 148.636 271.251 148.589 271.1 148.589 cv
270.745 148.589 270.403 148.734 270.075 149.025 cv
269.746 149.317 269.497 149.769 269.322 150.38 cv
269.191 150.851 269.127 151.802 269.127 153.235 cv
269.127 156.028 li
268.041 156.028 li
268.041 147.769 li
cp
f
281.574 148.673 mo
280.892 149.378 li
280.323 148.827 279.769 148.551 279.225 148.551 cv
278.88 148.551 278.584 148.665 278.338 148.893 cv
278.092 149.12 277.97 149.386 277.97 149.69 cv
277.97 149.958 278.07 150.212 278.274 150.456 cv
278.477 150.705 278.902 150.995 279.551 151.33 cv
280.344 151.739 280.881 152.133 281.164 152.514 cv
281.442 152.898 281.583 153.331 281.583 153.812 cv
281.583 154.49 281.345 155.064 280.868 155.536 cv
280.393 156.006 279.796 156.242 279.082 156.242 cv
278.604 156.242 278.149 156.136 277.716 155.93 cv
277.283 155.723 276.925 155.437 276.641 155.073 cv
277.309 154.313 li
277.853 154.925 278.428 155.231 279.036 155.231 cv
279.462 155.231 279.824 155.095 280.124 154.821 cv
280.424 154.547 280.573 154.226 280.573 153.857 cv
280.573 153.553 280.474 153.283 280.275 153.045 cv
280.08 152.813 279.632 152.518 278.937 152.165 cv
278.191 151.779 277.684 151.4 277.416 151.026 cv
277.146 150.651 277.012 150.224 277.012 149.743 cv
277.012 149.116 277.226 148.593 277.656 148.18 cv
278.083 147.764 278.624 147.556 279.278 147.556 cv
280.039 147.556 280.804 147.929 281.574 148.673 cv
cp
f
283.299 147.769 mo
284.362 147.769 li
284.362 156.028 li
283.299 156.028 li
283.299 147.769 li
cp
283.827 144.368 mo
284.069 144.368 284.274 144.454 284.446 144.626 cv
284.618 144.798 284.703 145.006 284.703 145.249 cv
284.703 145.486 284.618 145.691 284.446 145.864 cv
284.274 146.036 284.069 146.122 283.827 146.122 cv
283.589 146.122 283.385 146.036 283.215 145.864 cv
283.042 145.691 282.957 145.486 282.957 145.249 cv
282.957 145.006 283.042 144.798 283.215 144.626 cv
283.385 144.454 283.589 144.368 283.827 144.368 cv
cp
f
287.497 144.703 mo
288.558 144.703 li
288.558 147.769 li
290.244 147.769 li
290.244 148.688 li
288.558 148.688 li
288.558 156.028 li
287.497 156.028 li
287.497 148.688 li
286.047 148.688 li
286.047 147.769 li
287.497 147.769 li
287.497 144.703 li
cp
f
300.125 148.581 mo
299.532 148.581 298.987 148.727 298.485 149.017 cv
297.986 149.307 297.587 149.717 297.292 150.242 cv
296.996 150.768 296.848 151.324 296.848 151.91 cv
296.848 152.492 296.998 153.047 297.295 153.578 cv
297.594 154.109 297.995 154.523 298.497 154.818 cv
299 155.113 299.539 155.262 300.117 155.262 cv
300.697 155.262 301.25 155.115 301.771 154.821 cv
302.291 154.528 302.69 154.131 302.972 153.632 cv
303.252 153.131 303.393 152.567 303.393 151.94 cv
303.393 150.985 303.078 150.186 302.448 149.544 cv
301.819 148.902 301.043 148.581 300.125 148.581 cv
cp
304.372 147.769 mo
304.372 156.028 li
303.323 156.028 li
303.323 154.609 li
302.878 155.151 302.379 155.558 301.824 155.831 cv
301.271 156.104 300.664 156.242 300.007 156.242 cv
298.838 156.242 297.839 155.817 297.011 154.969 cv
296.185 154.122 295.771 153.091 295.771 151.876 cv
295.771 150.687 296.188 149.669 297.023 148.824 cv
297.858 147.979 298.862 147.556 300.037 147.556 cv
300.715 147.556 301.329 147.7 301.877 147.989 cv
302.426 148.278 302.908 148.71 303.323 149.287 cv
303.323 147.769 li
304.372 147.769 li
cp
f
306.754 147.769 mo
307.817 147.769 li
307.817 149.196 li
308.188 148.669 308.568 148.284 308.958 148.042 cv
309.494 147.719 310.061 147.556 310.653 147.556 cv
311.053 147.556 311.433 147.635 311.793 147.791 cv
312.152 147.949 312.446 148.157 312.674 148.418 cv
312.903 148.678 313.1 149.052 313.268 149.538 cv
313.621 148.889 314.062 148.398 314.592 148.061 cv
315.121 147.724 315.693 147.556 316.303 147.556 cv
316.875 147.556 317.377 147.7 317.814 147.989 cv
318.251 148.278 318.576 148.68 318.788 149.196 cv
319 149.713 319.106 150.487 319.106 151.519 cv
319.106 156.028 li
318.021 156.028 li
318.021 151.519 li
318.021 150.633 317.958 150.025 317.832 149.693 cv
317.705 149.362 317.49 149.095 317.184 148.893 cv
316.878 148.69 316.515 148.589 316.092 148.589 cv
315.577 148.589 315.106 148.741 314.68 149.044 cv
314.254 149.349 313.941 149.753 313.745 150.258 cv
313.549 150.765 313.451 151.61 313.451 152.793 cv
313.451 156.028 li
312.388 156.028 li
312.388 151.8 li
312.388 150.804 312.326 150.126 312.201 149.769 cv
312.077 149.412 311.86 149.126 311.553 148.912 cv
311.243 148.696 310.877 148.589 310.452 148.589 cv
309.961 148.589 309.502 148.738 309.073 149.034 cv
308.646 149.329 308.329 149.728 308.126 150.229 cv
307.922 150.729 307.817 151.496 307.817 152.529 cv
307.817 156.028 li
306.754 156.028 li
306.754 147.769 li
cp
f
328.299 151.063 mo
328.157 150.498 327.95 150.044 327.68 149.704 cv
327.408 149.365 327.05 149.092 326.604 148.885 cv
326.157 148.677 325.689 148.574 325.198 148.574 cv
324.389 148.574 323.691 148.834 323.107 149.356 cv
322.682 149.736 322.361 150.305 322.142 151.063 cv
328.299 151.063 li
cp
328.299 153.288 mo
329.195 153.76 li
328.901 154.335 328.562 154.8 328.178 155.155 cv
327.791 155.509 327.359 155.779 326.877 155.963 cv
326.396 156.148 325.852 156.242 325.243 156.242 cv
323.896 156.242 322.843 155.799 322.083 154.916 cv
321.323 154.033 320.943 153.035 320.943 151.921 cv
320.943 150.874 321.266 149.94 321.907 149.12 cv
322.724 148.078 323.816 147.556 325.184 147.556 cv
326.592 147.556 327.716 148.091 328.557 149.158 cv
329.154 149.913 329.458 150.853 329.468 151.982 cv
322.036 151.982 li
322.057 152.942 322.363 153.729 322.957 154.342 cv
323.549 154.956 324.28 155.262 325.153 155.262 cv
325.573 155.262 325.982 155.189 326.381 155.042 cv
326.777 154.896 327.115 154.702 327.395 154.46 cv
327.674 154.218 327.975 153.827 328.299 153.288 cv
cp
f
332.378 144.703 mo
333.438 144.703 li
333.438 147.769 li
335.123 147.769 li
335.123 148.688 li
333.438 148.688 li
333.438 156.028 li
332.378 156.028 li
332.378 148.688 li
330.927 148.688 li
330.927 147.769 li
332.378 147.769 li
332.378 144.703 li
cp
f
336.559 147.769 mo
337.621 147.769 li
337.621 156.028 li
336.559 156.028 li
336.559 147.769 li
cp
337.086 144.368 mo
337.329 144.368 337.534 144.454 337.705 144.626 cv
337.878 144.798 337.963 145.006 337.963 145.249 cv
337.963 145.486 337.878 145.691 337.705 145.864 cv
337.534 146.036 337.329 146.122 337.086 146.122 cv
336.85 146.122 336.646 146.036 336.475 145.864 cv
336.302 145.691 336.217 145.486 336.217 145.249 cv
336.217 145.006 336.302 144.798 336.475 144.626 cv
336.646 144.454 336.85 144.368 337.086 144.368 cv
cp
f
340.886 153.979 mo
341.911 154.465 li
340.37 157.334 li
339.618 157.015 li
340.886 153.979 li
cp
f
143.218 168.141 mo
142.375 168.664 li
141.646 167.698 140.653 167.216 139.395 167.216 cv
138.39 167.216 137.553 167.538 136.889 168.185 cv
136.224 168.832 135.892 169.619 135.892 170.543 cv
135.892 171.145 136.045 171.711 136.351 172.241 cv
136.656 172.772 137.077 173.184 137.609 173.478 cv
138.143 173.771 138.74 173.918 139.402 173.918 cv
140.615 173.918 141.606 173.436 142.375 172.468 cv
143.218 173.022 li
142.823 173.616 142.293 174.078 141.627 174.405 cv
140.961 174.733 140.204 174.896 139.354 174.896 cv
138.048 174.896 136.965 174.483 136.105 173.652 cv
135.244 172.822 134.814 171.812 134.814 170.624 cv
134.814 169.823 135.015 169.081 135.417 168.395 cv
135.82 167.709 136.373 167.174 137.077 166.789 cv
137.779 166.404 138.567 166.213 139.437 166.213 cv
139.983 166.213 140.512 166.295 141.02 166.463 cv
141.527 166.631 141.96 166.848 142.314 167.117 cv
142.668 167.384 142.97 167.726 143.218 168.141 cv
cp
f
149.165 167.252 mo
148.281 167.252 147.523 167.58 146.887 168.232 cv
146.252 168.885 145.934 169.674 145.934 170.601 cv
145.934 171.198 146.08 171.753 146.369 172.27 cv
146.659 172.787 147.05 173.185 147.542 173.466 cv
148.035 173.747 148.577 173.888 149.165 173.888 cv
149.754 173.888 150.295 173.747 150.788 173.466 cv
151.281 173.185 151.671 172.787 151.961 172.27 cv
152.25 171.753 152.395 171.198 152.395 170.601 cv
152.395 169.674 152.076 168.885 151.439 168.232 cv
150.801 167.58 150.043 167.252 149.165 167.252 cv
cp
149.169 166.213 mo
150.441 166.213 151.496 166.674 152.333 167.594 cv
153.093 168.434 153.473 169.429 153.473 170.577 cv
153.473 171.731 153.072 172.739 152.268 173.603 cv
151.464 174.466 150.431 174.896 149.169 174.896 cv
147.901 174.896 146.866 174.466 146.063 173.603 cv
145.259 172.739 144.857 171.731 144.857 170.577 cv
144.857 169.434 145.236 168.442 145.998 167.602 cv
146.834 166.676 147.891 166.213 149.169 166.213 cv
cp
f
155.439 166.425 mo
156.502 166.425 li
156.502 167.905 li
156.927 167.339 157.397 166.915 157.914 166.635 cv
158.43 166.353 158.992 166.213 159.599 166.213 cv
160.216 166.213 160.765 166.37 161.242 166.684 cv
161.72 166.997 162.074 167.419 162.301 167.951 cv
162.529 168.482 162.643 169.31 162.643 170.433 cv
162.643 174.685 li
161.581 174.685 li
161.581 170.745 li
161.581 169.793 161.541 169.158 161.462 168.839 cv
161.339 168.293 161.103 167.882 160.754 167.605 cv
160.404 167.33 159.948 167.192 159.386 167.192 cv
158.744 167.192 158.169 167.405 157.66 167.83 cv
157.15 168.254 156.815 168.781 156.653 169.409 cv
156.553 169.819 156.502 170.568 156.502 171.655 cv
156.502 174.685 li
155.439 174.685 li
155.439 166.425 li
cp
f
169.074 167.328 mo
168.391 168.035 li
167.822 167.483 167.267 167.208 166.723 167.208 cv
166.378 167.208 166.083 167.321 165.837 167.549 cv
165.59 167.776 165.467 168.042 165.467 168.346 cv
165.467 168.614 165.568 168.871 165.772 169.113 cv
165.975 169.36 166.4 169.651 167.05 169.986 cv
167.841 170.396 168.379 170.79 168.663 171.169 cv
168.941 171.554 169.081 171.987 169.081 172.468 cv
169.081 173.146 168.843 173.72 168.366 174.19 cv
167.89 174.662 167.294 174.896 166.58 174.896 cv
166.103 174.896 165.647 174.794 165.214 174.586 cv
164.781 174.377 164.423 174.092 164.139 173.728 cv
164.807 172.97 li
165.35 173.582 165.926 173.888 166.535 173.888 cv
166.96 173.888 167.323 173.75 167.623 173.478 cv
167.922 173.205 168.071 172.883 168.071 172.513 cv
168.071 172.209 167.973 171.939 167.775 171.701 cv
167.577 171.469 167.13 171.175 166.436 170.82 cv
165.69 170.437 165.183 170.056 164.914 169.682 cv
164.646 169.307 164.511 168.88 164.511 168.398 cv
164.511 167.771 164.725 167.25 165.154 166.834 cv
165.582 166.419 166.124 166.213 166.776 166.213 cv
167.537 166.213 168.302 166.584 169.074 167.328 cv
cp
f
177.909 169.721 mo
177.767 169.153 177.561 168.699 177.29 168.361 cv
177.018 168.022 176.66 167.749 176.214 167.541 cv
175.768 167.333 175.299 167.23 174.807 167.23 cv
173.998 167.23 173.3 167.492 172.718 168.012 cv
172.292 168.391 171.97 168.96 171.752 169.721 cv
177.909 169.721 li
cp
177.909 171.944 mo
178.805 172.415 li
178.511 172.992 178.171 173.458 177.787 173.812 cv
177.401 174.166 176.969 174.436 176.487 174.621 cv
176.006 174.805 175.461 174.896 174.854 174.896 cv
173.505 174.896 172.453 174.457 171.692 173.573 cv
170.933 172.689 170.554 171.691 170.554 170.577 cv
170.554 169.529 170.874 168.596 171.518 167.776 cv
172.334 166.734 173.425 166.213 174.793 166.213 cv
176.2 166.213 177.326 166.747 178.167 167.814 cv
178.764 168.569 179.068 169.51 179.079 170.638 cv
171.646 170.638 li
171.667 171.597 171.974 172.383 172.566 172.997 cv
173.159 173.611 173.891 173.918 174.763 173.918 cv
175.184 173.918 175.591 173.845 175.99 173.699 cv
176.387 173.552 176.726 173.358 177.004 173.116 cv
177.283 172.875 177.585 172.483 177.909 171.944 cv
cp
f
189.077 168.141 mo
188.233 168.664 li
187.505 167.698 186.512 167.216 185.254 167.216 cv
184.248 167.216 183.413 167.538 182.747 168.185 cv
182.083 168.832 181.751 169.619 181.751 170.543 cv
181.751 171.145 181.904 171.711 182.21 172.241 cv
182.515 172.772 182.935 173.184 183.468 173.478 cv
184.001 173.771 184.599 173.918 185.261 173.918 cv
186.474 173.918 187.465 173.436 188.233 172.468 cv
189.077 173.022 li
188.681 173.616 188.151 174.078 187.486 174.405 cv
186.82 174.733 186.062 174.896 185.212 174.896 cv
183.906 174.896 182.824 174.483 181.963 173.652 cv
181.103 172.822 180.673 171.812 180.673 170.624 cv
180.673 169.823 180.874 169.081 181.276 168.395 cv
181.679 167.709 182.231 167.174 182.935 166.789 cv
183.638 166.404 184.425 166.213 185.296 166.213 cv
185.842 166.213 186.37 166.295 186.878 166.463 cv
187.387 166.631 187.819 166.848 188.173 167.117 cv
188.527 167.384 188.829 167.726 189.077 168.141 cv
cp
f
192.044 163.359 mo
193.106 163.359 li
193.106 166.425 li
194.792 166.425 li
194.792 167.343 li
193.106 167.343 li
193.106 174.685 li
192.044 174.685 li
192.044 167.343 li
190.594 167.343 li
190.594 166.425 li
192.044 166.425 li
192.044 163.359 li
cp
f
203.341 169.721 mo
203.198 169.153 202.992 168.699 202.721 168.361 cv
202.449 168.022 202.091 167.749 201.646 167.541 cv
201.2 167.333 200.731 167.23 200.239 167.23 cv
199.429 167.23 198.731 167.492 198.149 168.012 cv
197.724 168.391 197.401 168.96 197.184 169.721 cv
203.341 169.721 li
cp
203.341 171.944 mo
204.236 172.415 li
203.943 172.992 203.603 173.458 203.218 173.812 cv
202.833 174.166 202.4 174.436 201.918 174.621 cv
201.438 174.805 200.893 174.896 200.286 174.896 cv
198.937 174.896 197.885 174.457 197.124 173.573 cv
196.365 172.689 195.985 171.691 195.985 170.577 cv
195.985 169.529 196.306 168.596 196.949 167.776 cv
197.765 166.734 198.856 166.213 200.225 166.213 cv
201.632 166.213 202.757 166.747 203.598 167.814 cv
204.196 168.569 204.5 169.51 204.51 170.638 cv
197.078 170.638 li
197.098 171.597 197.405 172.383 197.998 172.997 cv
198.59 173.611 199.322 173.918 200.194 173.918 cv
200.614 173.918 201.023 173.845 201.421 173.699 cv
201.819 173.552 202.157 173.358 202.437 173.116 cv
202.715 172.875 203.017 172.483 203.341 171.944 cv
cp
f
207.417 163.359 mo
208.479 163.359 li
208.479 166.425 li
210.165 166.425 li
210.165 167.343 li
208.479 167.343 li
208.479 174.685 li
207.417 174.685 li
207.417 167.343 li
205.967 167.343 li
205.967 166.425 li
207.417 166.425 li
207.417 163.359 li
cp
f
211.622 166.425 mo
212.685 166.425 li
212.685 170.282 li
212.685 171.223 212.735 171.871 212.837 172.225 cv
212.988 172.731 213.278 173.13 213.706 173.425 cv
214.135 173.717 214.646 173.866 215.239 173.866 cv
215.832 173.866 216.335 173.721 216.748 173.436 cv
217.161 173.149 217.446 172.775 217.604 172.308 cv
217.709 171.991 217.763 171.313 217.763 170.282 cv
217.763 166.425 li
218.849 166.425 li
218.849 170.48 li
218.849 171.618 218.716 172.476 218.449 173.052 cv
218.184 173.628 217.784 174.081 217.25 174.406 cv
216.716 174.733 216.048 174.896 215.243 174.896 cv
214.438 174.896 213.766 174.733 213.227 174.406 cv
212.688 174.081 212.286 173.625 212.02 173.042 cv
211.754 172.457 211.622 171.577 211.622 170.403 cv
211.622 166.425 li
cp
f
224.732 166.425 mo
225.863 166.425 li
228.635 172.445 li
231.375 166.425 li
232.513 166.425 li
228.733 174.685 li
228.535 174.685 li
224.732 166.425 li
cp
f
233.971 166.425 mo
235.035 166.425 li
235.035 174.685 li
233.971 174.685 li
233.971 166.425 li
cp
234.499 163.025 mo
234.74 163.025 234.947 163.11 235.119 163.282 cv
235.29 163.455 235.376 163.662 235.376 163.905 cv
235.376 164.143 235.29 164.349 235.119 164.519 cv
234.947 164.692 234.74 164.779 234.499 164.779 cv
234.261 164.779 234.058 164.692 233.887 164.519 cv
233.715 164.349 233.629 164.143 233.629 163.905 cv
233.629 163.662 233.715 163.455 233.887 163.282 cv
234.058 163.11 234.261 163.025 234.499 163.025 cv
cp
f
236.46 166.425 mo
237.592 166.425 li
240.363 172.445 li
243.104 166.425 li
244.241 166.425 li
240.461 174.685 li
240.264 174.685 li
236.46 166.425 li
cp
f
249.841 167.238 mo
249.248 167.238 248.703 167.382 248.201 167.673 cv
247.702 167.964 247.304 168.372 247.009 168.898 cv
246.712 169.424 246.564 169.979 246.564 170.566 cv
246.564 171.147 246.714 171.704 247.012 172.234 cv
247.311 172.765 247.71 173.178 248.214 173.474 cv
248.718 173.771 249.256 173.918 249.833 173.918 cv
250.414 173.918 250.965 173.771 251.485 173.478 cv
252.007 173.184 252.407 172.788 252.688 172.288 cv
252.968 171.786 253.108 171.223 253.108 170.597 cv
253.108 169.642 252.793 168.843 252.164 168.2 cv
251.535 167.559 250.761 167.238 249.841 167.238 cv
cp
254.087 166.425 mo
254.087 174.685 li
253.04 174.685 li
253.04 173.265 li
252.594 173.807 252.095 174.213 251.54 174.487 cv
250.987 174.761 250.381 174.896 249.723 174.896 cv
248.555 174.896 247.556 174.472 246.728 173.625 cv
245.899 172.778 245.487 171.746 245.487 170.532 cv
245.487 169.344 245.904 168.326 246.738 167.481 cv
247.574 166.635 248.579 166.213 249.753 166.213 cv
250.432 166.213 251.045 166.357 251.594 166.646 cv
252.143 166.934 252.625 167.366 253.04 167.944 cv
253.04 166.425 li
254.087 166.425 li
cp
f
256.472 166.425 mo
257.533 166.425 li
257.533 167.853 li
257.904 167.327 258.284 166.941 258.674 166.699 cv
259.211 166.375 259.776 166.213 260.37 166.213 cv
260.77 166.213 261.149 166.292 261.509 166.447 cv
261.868 166.604 262.163 166.814 262.39 167.075 cv
262.617 167.335 262.816 167.708 262.982 168.194 cv
263.337 167.547 263.778 167.053 264.309 166.717 cv
264.838 166.381 265.408 166.213 266.02 166.213 cv
266.591 166.213 267.094 166.357 267.531 166.646 cv
267.968 166.934 268.292 167.337 268.504 167.853 cv
268.716 168.368 268.822 169.143 268.822 170.175 cv
268.822 174.685 li
267.737 174.685 li
267.737 170.175 li
267.737 169.291 267.674 168.681 267.548 168.35 cv
267.421 168.018 267.205 167.75 266.9 167.549 cv
266.595 167.346 266.231 167.246 265.807 167.246 cv
265.293 167.246 264.823 167.396 264.396 167.701 cv
263.971 168.003 263.658 168.409 263.461 168.916 cv
263.266 169.422 263.167 170.266 263.167 171.451 cv
263.167 174.685 li
262.104 174.685 li
262.104 170.456 li
262.104 169.459 262.042 168.781 261.918 168.426 cv
261.794 168.069 261.576 167.783 261.27 167.568 cv
260.96 167.353 260.594 167.246 260.168 167.246 cv
259.678 167.246 259.218 167.393 258.79 167.689 cv
258.363 167.985 258.046 168.384 257.842 168.885 cv
257.637 169.385 257.533 170.152 257.533 171.186 cv
257.533 174.685 li
256.472 174.685 li
256.472 166.425 li
cp
f
270.925 166.425 mo
271.988 166.425 li
271.988 170.282 li
271.988 171.223 272.038 171.871 272.141 172.225 cv
272.292 172.731 272.581 173.13 273.011 173.425 cv
273.439 173.717 273.95 173.866 274.542 173.866 cv
275.135 173.866 275.638 173.721 276.051 173.436 cv
276.465 173.149 276.749 172.775 276.906 172.308 cv
277.013 171.991 277.066 171.313 277.066 170.282 cv
277.066 166.425 li
278.153 166.425 li
278.153 170.48 li
278.153 171.618 278.02 172.476 277.754 173.052 cv
277.488 173.628 277.089 174.081 276.555 174.406 cv
276.021 174.733 275.352 174.896 274.547 174.896 cv
273.742 174.896 273.07 174.733 272.53 174.406 cv
271.991 174.081 271.588 173.625 271.323 173.042 cv
271.059 172.457 270.925 171.577 270.925 170.403 cv
270.925 166.425 li
cp
f
284.666 167.328 mo
283.983 168.035 li
283.415 167.483 282.858 167.208 282.315 167.208 cv
281.971 167.208 281.675 167.321 281.429 167.549 cv
281.182 167.776 281.06 168.042 281.06 168.346 cv
281.06 168.614 281.16 168.871 281.363 169.113 cv
281.567 169.36 281.992 169.651 282.64 169.986 cv
283.433 170.396 283.971 170.79 284.255 171.169 cv
284.533 171.554 284.672 171.987 284.672 172.468 cv
284.672 173.146 284.436 173.72 283.959 174.19 cv
283.481 174.662 282.886 174.896 282.172 174.896 cv
281.694 174.896 281.24 174.794 280.808 174.586 cv
280.373 174.377 280.015 174.092 279.73 173.728 cv
280.398 172.97 li
280.942 173.582 281.518 173.888 282.126 173.888 cv
282.553 173.888 282.915 173.75 283.215 173.478 cv
283.515 173.205 283.664 172.883 283.664 172.513 cv
283.664 172.209 283.564 171.939 283.367 171.701 cv
283.169 171.469 282.722 171.175 282.028 170.82 cv
281.282 170.437 280.774 170.056 280.506 169.682 cv
280.238 169.307 280.104 168.88 280.104 168.398 cv
280.104 167.771 280.316 167.25 280.745 166.834 cv
281.174 166.419 281.716 166.213 282.368 166.213 cv
283.13 166.213 283.895 166.584 284.666 167.328 cv
cp
f
290.716 166.425 mo
291.778 166.425 li
291.778 170.282 li
291.778 171.223 291.829 171.871 291.932 172.225 cv
292.082 172.731 292.372 173.13 292.8 173.425 cv
293.229 173.717 293.739 173.866 294.332 173.866 cv
294.925 173.866 295.429 173.721 295.841 173.436 cv
296.254 173.149 296.54 172.775 296.697 172.308 cv
296.804 171.991 296.856 171.313 296.856 170.282 cv
296.856 166.425 li
297.942 166.425 li
297.942 170.48 li
297.942 171.618 297.811 172.476 297.544 173.052 cv
297.277 173.628 296.878 174.081 296.344 174.406 cv
295.811 174.733 295.141 174.896 294.338 174.896 cv
293.533 174.896 292.859 174.733 292.321 174.406 cv
291.781 174.081 291.379 173.625 291.113 173.042 cv
290.849 172.457 290.716 171.577 290.716 170.403 cv
290.716 166.425 li
cp
f
300.144 163.237 mo
301.207 163.237 li
301.207 174.685 li
300.144 174.685 li
300.144 163.237 li
cp
f
304.342 163.359 mo
305.403 163.359 li
305.403 166.425 li
307.089 166.425 li
307.089 167.343 li
305.403 167.343 li
305.403 174.685 li
304.342 174.685 li
304.342 167.343 li
302.893 167.343 li
302.893 166.425 li
304.342 166.425 li
304.342 163.359 li
cp
f
308.282 166.425 mo
309.367 166.425 li
309.367 167.632 li
309.691 167.157 310.033 166.801 310.392 166.565 cv
310.751 166.331 311.126 166.213 311.516 166.213 cv
311.809 166.213 312.123 166.306 312.458 166.493 cv
311.904 167.39 li
311.68 167.293 311.492 167.246 311.341 167.246 cv
310.985 167.246 310.645 167.391 310.317 167.682 cv
309.987 167.973 309.736 168.424 309.564 169.037 cv
309.434 169.507 309.367 170.459 309.367 171.891 cv
309.367 174.685 li
308.282 174.685 li
308.282 166.425 li
cp
f
313.2 166.425 mo
314.264 166.425 li
314.264 174.685 li
313.2 174.685 li
313.2 166.425 li
cp
313.729 163.025 mo
313.971 163.025 314.176 163.11 314.348 163.282 cv
314.52 163.455 314.605 163.662 314.605 163.905 cv
314.605 164.143 314.52 164.349 314.348 164.519 cv
314.176 164.692 313.971 164.779 313.729 164.779 cv
313.492 164.779 313.288 164.692 313.116 164.519 cv
312.943 164.349 312.858 164.143 312.858 163.905 cv
312.858 163.662 312.943 163.455 313.116 163.282 cv
313.288 163.11 313.492 163.025 313.729 163.025 cv
cp
f
324.488 168.141 mo
323.646 168.664 li
322.916 167.698 321.924 167.216 320.666 167.216 cv
319.66 167.216 318.824 167.538 318.159 168.185 cv
317.495 168.832 317.162 169.619 317.162 170.543 cv
317.162 171.145 317.315 171.711 317.622 172.241 cv
317.928 172.772 318.348 173.184 318.88 173.478 cv
319.413 173.771 320.012 173.918 320.673 173.918 cv
321.887 173.918 322.878 173.436 323.646 172.468 cv
324.488 173.022 li
324.094 173.616 323.564 174.078 322.897 174.405 cv
322.232 174.733 321.475 174.896 320.624 174.896 cv
319.318 174.896 318.235 174.483 317.376 173.652 cv
316.515 172.822 316.085 171.812 316.085 170.624 cv
316.085 169.823 316.286 169.081 316.688 168.395 cv
317.092 167.709 317.644 167.174 318.348 166.789 cv
319.05 166.404 319.837 166.213 320.708 166.213 cv
321.255 166.213 321.783 166.295 322.29 166.463 cv
322.798 166.631 323.23 166.848 323.585 167.117 cv
323.939 167.384 324.24 167.726 324.488 168.141 cv
cp
f
326.371 166.425 mo
327.435 166.425 li
327.435 174.685 li
326.371 174.685 li
326.371 166.425 li
cp
326.9 163.025 mo
327.141 163.025 327.348 163.11 327.52 163.282 cv
327.688 163.455 327.776 163.662 327.776 163.905 cv
327.776 164.143 327.688 164.349 327.52 164.519 cv
327.348 164.692 327.141 164.779 326.9 164.779 cv
326.662 164.779 326.459 164.692 326.286 164.519 cv
326.116 164.349 326.03 164.143 326.03 163.905 cv
326.03 163.662 326.116 163.455 326.286 163.282 cv
326.459 163.11 326.662 163.025 326.9 163.025 cv
cp
f
336.597 169.721 mo
336.454 169.153 336.248 168.699 335.977 168.361 cv
335.706 168.022 335.348 167.749 334.902 167.541 cv
334.455 167.333 333.987 167.23 333.496 167.23 cv
332.686 167.23 331.988 167.492 331.405 168.012 cv
330.979 168.391 330.658 168.96 330.44 169.721 cv
336.597 169.721 li
cp
336.597 171.944 mo
337.492 172.415 li
337.199 172.992 336.86 173.458 336.475 173.812 cv
336.09 174.166 335.657 174.436 335.175 174.621 cv
334.694 174.805 334.149 174.896 333.541 174.896 cv
332.193 174.896 331.141 174.457 330.38 173.573 cv
329.621 172.689 329.241 171.691 329.241 170.577 cv
329.241 169.529 329.563 168.596 330.206 167.776 cv
331.021 166.734 332.113 166.213 333.48 166.213 cv
334.888 166.213 336.013 166.747 336.854 167.814 cv
337.452 168.569 337.756 169.51 337.766 170.638 cv
330.334 170.638 li
330.355 171.597 330.66 172.383 331.254 172.997 cv
331.848 173.611 332.578 173.918 333.45 173.918 cv
333.87 173.918 334.279 173.845 334.678 173.699 cv
335.074 173.552 335.413 173.358 335.691 173.116 cv
335.972 172.875 336.272 172.483 336.597 171.944 cv
cp
f
340.916 173.014 mo
341.174 173.014 341.394 173.106 341.577 173.287 cv
341.759 173.47 341.849 173.692 341.849 173.956 cv
341.849 174.213 341.759 174.436 341.577 174.621 cv
341.394 174.805 341.174 174.896 340.916 174.896 cv
340.658 174.896 340.437 174.805 340.254 174.621 cv
340.073 174.436 339.981 174.213 339.981 173.956 cv
339.981 173.692 340.073 173.47 340.254 173.287 cv
340.437 173.106 340.658 173.014 340.916 173.014 cv
cp
f
134.221 191.26 mo
135.17 190.691 li
135.838 191.921 136.611 192.536 137.486 192.536 cv
137.861 192.536 138.212 192.449 138.542 192.275 cv
138.87 192.099 139.121 191.865 139.293 191.572 cv
139.465 191.278 139.551 190.968 139.551 190.638 cv
139.551 190.263 139.425 189.896 139.171 189.537 cv
138.822 189.042 138.185 188.445 137.258 187.746 cv
136.327 187.042 135.748 186.534 135.52 186.221 cv
135.125 185.694 134.928 185.125 134.928 184.512 cv
134.928 184.027 135.044 183.583 135.277 183.184 cv
135.51 182.784 135.837 182.468 136.26 182.238 cv
136.683 182.008 137.142 181.893 137.638 181.893 cv
138.164 181.893 138.656 182.024 139.114 182.284 cv
139.573 182.544 140.056 183.024 140.568 183.723 cv
139.658 184.414 li
139.237 183.856 138.879 183.49 138.583 183.313 cv
138.287 183.136 137.965 183.046 137.616 183.046 cv
137.165 183.046 136.796 183.184 136.51 183.457 cv
136.224 183.73 136.081 184.067 136.081 184.467 cv
136.081 184.71 136.133 184.945 136.233 185.173 cv
136.334 185.4 136.52 185.648 136.788 185.917 cv
136.935 186.058 137.415 186.431 138.23 187.033 cv
139.196 187.746 139.86 188.381 140.219 188.937 cv
140.579 189.496 140.759 190.054 140.759 190.616 cv
140.759 191.425 140.451 192.128 139.835 192.725 cv
139.221 193.323 138.473 193.621 137.592 193.621 cv
136.914 193.621 136.299 193.441 135.748 193.08 cv
135.196 192.717 134.688 192.111 134.221 191.26 cv
cp
f
146.926 185.893 mo
146.334 185.893 145.789 186.04 145.287 186.33 cv
144.787 186.621 144.389 187.028 144.094 187.554 cv
143.797 188.08 143.65 188.636 143.65 189.222 cv
143.65 189.804 143.799 190.359 144.096 190.89 cv
144.396 191.421 144.797 191.834 145.299 192.13 cv
145.802 192.426 146.341 192.574 146.919 192.574 cv
147.499 192.574 148.05 192.427 148.571 192.134 cv
149.092 191.841 149.492 191.444 149.773 190.944 cv
150.053 190.444 150.194 189.879 150.194 189.253 cv
150.194 188.297 149.879 187.499 149.249 186.856 cv
148.62 186.214 147.846 185.893 146.926 185.893 cv
cp
151.173 185.081 mo
151.173 193.341 li
150.125 193.341 li
150.125 191.921 li
149.679 192.462 149.18 192.871 148.626 193.143 cv
148.072 193.417 147.465 193.554 146.808 193.554 cv
145.639 193.554 144.64 193.13 143.813 192.282 cv
142.985 191.433 142.571 190.402 142.571 189.188 cv
142.571 187.999 142.989 186.982 143.824 186.136 cv
144.66 185.291 145.664 184.87 146.838 184.87 cv
147.516 184.87 148.129 185.014 148.679 185.301 cv
149.228 185.589 149.71 186.023 150.125 186.599 cv
150.125 185.081 li
151.173 185.081 li
cp
f
157.831 185.893 mo
156.911 185.893 156.138 186.214 155.51 186.856 cv
154.88 187.499 154.566 188.297 154.566 189.253 cv
154.566 189.879 154.707 190.444 154.986 190.944 cv
155.267 191.444 155.668 191.841 156.19 192.134 cv
156.713 192.427 157.265 192.574 157.845 192.574 cv
158.417 192.574 158.953 192.426 159.455 192.13 cv
159.957 191.834 160.357 191.421 160.655 190.89 cv
160.953 190.359 161.103 189.804 161.103 189.222 cv
161.103 188.636 160.955 188.08 160.659 187.554 cv
160.363 187.028 159.966 186.621 159.466 186.33 cv
158.966 186.04 158.421 185.893 157.831 185.893 cv
cp
153.58 185.081 mo
154.642 185.081 li
154.642 186.599 li
155.062 186.023 155.544 185.589 156.091 185.301 cv
156.636 185.014 157.246 184.87 157.918 184.87 cv
159.091 184.87 160.095 185.291 160.928 186.136 cv
161.763 186.982 162.18 187.999 162.18 189.188 cv
162.18 190.402 161.767 191.433 160.939 192.282 cv
160.113 193.13 159.116 193.554 157.948 193.554 cv
157.292 193.554 156.688 193.417 156.136 193.143 cv
155.584 192.871 155.087 192.462 154.642 191.921 cv
154.642 196.362 li
153.58 196.362 li
153.58 185.081 li
cp
f
164.011 185.081 mo
165.073 185.081 li
165.073 193.341 li
164.011 193.341 li
164.011 185.081 li
cp
164.539 181.68 mo
164.781 181.68 164.986 181.767 165.158 181.938 cv
165.329 182.11 165.415 182.318 165.415 182.561 cv
165.415 182.798 165.329 183.003 165.158 183.176 cv
164.986 183.348 164.781 183.434 164.539 183.434 cv
164.3 183.434 164.097 183.348 163.926 183.176 cv
163.754 183.003 163.669 182.798 163.669 182.561 cv
163.669 182.318 163.754 182.11 163.926 181.938 cv
164.097 181.767 164.3 181.68 164.539 181.68 cv
cp
f
174.235 188.376 mo
174.094 187.809 173.886 187.356 173.616 187.017 cv
173.345 186.678 172.986 186.405 172.54 186.197 cv
172.094 185.99 171.625 185.887 171.134 185.887 cv
170.324 185.887 169.626 186.146 169.044 186.668 cv
168.618 187.047 168.296 187.617 168.078 188.376 cv
174.235 188.376 li
cp
174.235 190.6 mo
175.131 191.07 li
174.837 191.648 174.498 192.114 174.113 192.468 cv
173.728 192.823 173.294 193.091 172.813 193.276 cv
172.333 193.461 171.787 193.554 171.18 193.554 cv
169.832 193.554 168.779 193.113 168.019 192.228 cv
167.259 191.345 166.88 190.347 166.88 189.234 cv
166.88 188.185 167.201 187.252 167.844 186.433 cv
168.66 185.39 169.751 184.87 171.119 184.87 cv
172.527 184.87 173.652 185.402 174.492 186.471 cv
175.091 187.225 175.394 188.167 175.404 189.294 cv
167.973 189.294 li
167.993 190.253 168.3 191.041 168.892 191.654 cv
169.485 192.267 170.217 192.574 171.089 192.574 cv
171.509 192.574 171.917 192.501 172.316 192.355 cv
172.713 192.208 173.052 192.014 173.331 191.772 cv
173.609 191.531 173.911 191.14 174.235 190.6 cv
cp
f
177.386 185.081 mo
178.449 185.081 li
178.449 186.562 li
178.874 185.995 179.345 185.571 179.861 185.29 cv
180.376 185.009 180.938 184.87 181.546 184.87 cv
182.163 184.87 182.712 185.026 183.189 185.34 cv
183.668 185.654 184.021 186.076 184.248 186.608 cv
184.478 187.139 184.59 187.965 184.59 189.089 cv
184.59 193.341 li
183.528 193.341 li
183.528 189.4 li
183.528 188.45 183.488 187.815 183.409 187.496 cv
183.287 186.949 183.049 186.538 182.701 186.261 cv
182.352 185.986 181.896 185.848 181.334 185.848 cv
180.691 185.848 180.116 186.061 179.607 186.486 cv
179.098 186.911 178.762 187.437 178.601 188.065 cv
178.5 188.474 178.449 189.224 178.449 190.312 cv
178.449 193.341 li
177.386 193.341 li
177.386 185.081 li
cp
f
195.077 185.909 mo
194.193 185.909 193.435 186.235 192.799 186.889 cv
192.165 187.541 191.847 188.33 191.847 189.255 cv
191.847 189.854 191.992 190.411 192.281 190.926 cv
192.572 191.443 192.962 191.841 193.455 192.123 cv
193.947 192.404 194.489 192.543 195.077 192.543 cv
195.667 192.543 196.207 192.404 196.7 192.123 cv
197.193 191.841 197.584 191.443 197.874 190.926 cv
198.163 190.411 198.308 189.854 198.308 189.255 cv
198.308 188.33 197.988 187.541 197.352 186.889 cv
196.713 186.235 195.957 185.909 195.077 185.909 cv
cp
195.082 184.87 mo
196.354 184.87 197.408 185.33 198.245 186.25 cv
199.005 187.091 199.385 188.085 199.385 189.234 cv
199.385 190.386 198.984 191.396 198.18 192.259 cv
197.376 193.122 196.343 193.554 195.082 193.554 cv
193.813 193.554 192.778 193.122 191.975 192.259 cv
191.171 191.396 190.77 190.386 190.77 189.234 cv
190.77 188.09 191.149 187.099 191.909 186.257 cv
192.747 185.333 193.803 184.87 195.082 184.87 cv
cp
f
206.582 182.015 mo
207.644 182.015 li
207.644 185.081 li
209.33 185.081 li
209.33 186 li
207.644 186 li
207.644 193.341 li
206.582 193.341 li
206.582 186 li
205.132 186 li
205.132 185.081 li
206.582 185.081 li
206.582 182.015 li
cp
f
210.521 185.081 mo
211.606 185.081 li
211.606 186.288 li
211.93 185.813 212.272 185.457 212.632 185.223 cv
212.992 184.987 213.366 184.87 213.755 184.87 cv
214.048 184.87 214.363 184.963 214.697 185.149 cv
214.143 186.045 li
213.919 185.95 213.732 185.901 213.581 185.901 cv
213.226 185.901 212.884 186.046 212.556 186.338 cv
212.227 186.629 211.977 187.081 211.804 187.693 cv
211.673 188.164 211.606 189.115 211.606 190.546 cv
211.606 193.341 li
210.521 193.341 li
210.521 185.081 li
cp
f
215.441 185.081 mo
216.504 185.081 li
216.504 193.341 li
215.441 193.341 li
215.441 185.081 li
cp
215.968 181.68 mo
216.21 181.68 216.416 181.767 216.588 181.938 cv
216.759 182.11 216.845 182.318 216.845 182.561 cv
216.845 182.798 216.759 183.003 216.588 183.176 cv
216.416 183.348 216.21 183.434 215.968 183.434 cv
215.73 183.434 215.527 183.348 215.356 183.176 cv
215.185 183.003 215.098 182.798 215.098 182.561 cv
215.098 182.318 215.185 182.11 215.356 181.938 cv
215.527 181.767 215.73 181.68 215.968 181.68 cv
cp
f
222.865 185.984 mo
222.182 186.69 li
221.614 186.139 221.059 185.863 220.515 185.863 cv
220.17 185.863 219.875 185.978 219.629 186.205 cv
219.382 186.433 219.26 186.697 219.26 187.002 cv
219.26 187.27 219.36 187.525 219.564 187.768 cv
219.767 188.016 220.193 188.308 220.841 188.642 cv
221.632 189.051 222.17 189.447 222.455 189.826 cv
222.734 190.21 222.873 190.644 222.873 191.125 cv
222.873 191.802 222.635 192.376 222.158 192.848 cv
221.682 193.318 221.086 193.554 220.372 193.554 cv
219.894 193.554 219.439 193.449 219.006 193.242 cv
218.573 193.035 218.215 192.749 217.931 192.384 cv
218.599 191.625 li
219.143 192.238 219.717 192.543 220.326 192.543 cv
220.752 192.543 221.115 192.408 221.415 192.134 cv
221.713 191.861 221.863 191.539 221.863 191.169 cv
221.863 190.867 221.764 190.595 221.567 190.357 cv
221.369 190.125 220.922 189.832 220.229 189.476 cv
219.481 189.093 218.975 188.712 218.706 188.338 cv
218.437 187.963 218.302 187.536 218.302 187.055 cv
218.302 186.428 218.517 185.906 218.945 185.491 cv
219.374 185.076 219.916 184.87 220.569 184.87 cv
221.328 184.87 222.095 185.241 222.865 185.984 cv
cp
f
225.674 182.015 mo
226.736 182.015 li
226.736 185.081 li
228.421 185.081 li
228.421 186 li
226.736 186 li
226.736 193.341 li
225.674 193.341 li
225.674 186 li
224.224 186 li
224.224 185.081 li
225.674 185.081 li
225.674 182.015 li
cp
f
229.856 185.081 mo
230.92 185.081 li
230.92 193.341 li
229.856 193.341 li
229.856 185.081 li
cp
230.385 181.68 mo
230.626 181.68 230.833 181.767 231.004 181.938 cv
231.175 182.11 231.262 182.318 231.262 182.561 cv
231.262 182.798 231.175 183.003 231.004 183.176 cv
230.833 183.348 230.626 183.434 230.385 183.434 cv
230.147 183.434 229.943 183.348 229.773 183.176 cv
229.601 183.003 229.515 182.798 229.515 182.561 cv
229.515 182.318 229.601 182.11 229.773 181.938 cv
229.943 181.767 230.147 181.68 230.385 181.68 cv
cp
f
237.102 185.893 mo
236.511 185.893 235.965 186.04 235.464 186.33 cv
234.964 186.621 234.566 187.028 234.27 187.554 cv
233.974 188.08 233.826 188.636 233.826 189.222 cv
233.826 189.804 233.975 190.359 234.273 190.89 cv
234.572 191.421 234.973 191.834 235.476 192.13 cv
235.979 192.426 236.518 192.574 237.094 192.574 cv
237.676 192.574 238.227 192.427 238.747 192.134 cv
239.268 191.841 239.67 191.444 239.949 190.944 cv
240.229 190.444 240.37 189.879 240.37 189.253 cv
240.37 188.297 240.055 187.499 239.426 186.856 cv
238.796 186.214 238.021 185.893 237.102 185.893 cv
cp
241.35 185.081 mo
241.35 196.362 li
240.302 196.362 li
240.302 191.921 li
239.856 192.462 239.356 192.871 238.803 193.143 cv
238.248 193.417 237.643 193.554 236.984 193.554 cv
235.815 193.554 234.817 193.13 233.989 192.282 cv
233.163 191.433 232.749 190.402 232.749 189.188 cv
232.749 187.999 233.167 186.982 234.001 186.136 cv
234.836 185.291 235.841 184.87 237.015 184.87 cv
237.693 184.87 238.307 185.014 238.855 185.301 cv
239.405 185.589 239.887 186.023 240.302 186.599 cv
240.302 185.081 li
241.35 185.081 li
cp
f
243.597 185.081 mo
244.659 185.081 li
244.659 188.937 li
244.659 189.878 244.71 190.527 244.812 190.88 cv
244.963 191.387 245.253 191.787 245.681 192.08 cv
246.11 192.375 246.62 192.521 247.213 192.521 cv
247.806 192.521 248.31 192.378 248.721 192.092 cv
249.136 191.806 249.421 191.43 249.578 190.964 cv
249.684 190.646 249.737 189.97 249.737 188.937 cv
249.737 185.081 li
250.823 185.081 li
250.823 189.134 li
250.823 190.274 250.691 191.13 250.424 191.708 cv
250.157 192.287 249.76 192.738 249.225 193.064 cv
248.69 193.39 248.021 193.554 247.217 193.554 cv
246.413 193.554 245.741 193.39 245.201 193.064 cv
244.662 192.738 244.261 192.282 243.995 191.697 cv
243.729 191.113 243.597 190.233 243.597 189.06 cv
243.597 185.081 li
cp
f
260.138 188.376 mo
259.995 187.809 259.788 187.356 259.518 187.017 cv
259.247 186.678 258.888 186.405 258.443 186.197 cv
257.996 185.99 257.527 185.887 257.036 185.887 cv
256.227 185.887 255.528 186.146 254.945 186.668 cv
254.52 187.047 254.198 187.617 253.981 188.376 cv
260.138 188.376 li
cp
260.138 190.6 mo
261.033 191.07 li
260.739 191.648 260.4 192.114 260.016 192.468 cv
259.631 192.823 259.198 193.091 258.716 193.276 cv
258.235 193.461 257.689 193.554 257.082 193.554 cv
255.733 193.554 254.681 193.113 253.921 192.228 cv
253.161 191.345 252.782 190.347 252.782 189.234 cv
252.782 188.185 253.103 187.252 253.747 186.433 cv
254.562 185.39 255.654 184.87 257.021 184.87 cv
258.429 184.87 259.554 185.402 260.396 186.471 cv
260.993 187.225 261.295 188.167 261.307 189.294 cv
253.875 189.294 li
253.895 190.253 254.201 191.041 254.795 191.654 cv
255.387 192.267 256.119 192.574 256.99 192.574 cv
257.411 192.574 257.819 192.501 258.219 192.355 cv
258.615 192.208 258.953 192.014 259.232 191.772 cv
259.513 191.531 259.813 191.14 260.138 190.6 cv
cp
f
271.573 185.893 mo
270.982 185.893 270.437 186.04 269.937 186.33 cv
269.435 186.621 269.037 187.028 268.742 187.554 cv
268.445 188.08 268.298 188.636 268.298 189.222 cv
268.298 189.804 268.447 190.359 268.744 190.89 cv
269.043 191.421 269.445 191.834 269.945 192.13 cv
270.45 192.426 270.989 192.574 271.566 192.574 cv
272.147 192.574 272.698 192.427 273.219 192.134 cv
273.74 191.841 274.139 191.444 274.421 190.944 cv
274.701 190.444 274.842 189.879 274.842 189.253 cv
274.842 188.297 274.527 187.499 273.897 186.856 cv
273.269 186.214 272.494 185.893 271.573 185.893 cv
cp
275.821 185.081 mo
275.821 193.341 li
274.773 193.341 li
274.773 191.921 li
274.328 192.462 273.828 192.871 273.273 193.143 cv
272.72 193.417 272.113 193.554 271.455 193.554 cv
270.287 193.554 269.288 193.13 268.46 192.282 cv
267.634 191.433 267.22 190.402 267.22 189.188 cv
267.22 187.999 267.638 186.982 268.472 186.136 cv
269.308 185.291 270.312 184.87 271.485 184.87 cv
272.164 184.87 272.777 185.014 273.327 185.301 cv
273.875 185.589 274.358 186.023 274.773 186.599 cv
274.773 185.081 li
275.821 185.081 li
cp
f
278.212 185.081 mo
279.275 185.081 li
279.275 186.562 li
279.701 185.995 280.171 185.571 280.688 185.29 cv
281.203 185.009 281.766 184.87 282.373 184.87 cv
282.989 184.87 283.539 185.026 284.017 185.34 cv
284.494 185.654 284.847 186.076 285.075 186.608 cv
285.303 187.139 285.416 187.965 285.416 189.089 cv
285.416 193.341 li
284.354 193.341 li
284.354 189.4 li
284.354 188.45 284.314 187.815 284.236 187.496 cv
284.113 186.949 283.876 186.538 283.527 186.261 cv
283.179 185.986 282.722 185.848 282.161 185.848 cv
281.518 185.848 280.942 186.061 280.435 186.486 cv
279.926 186.911 279.589 187.437 279.428 188.065 cv
279.326 188.474 279.275 189.224 279.275 190.312 cv
279.275 193.341 li
278.212 193.341 li
278.212 185.081 li
cp
f
288.62 182.015 mo
289.682 182.015 li
289.682 185.081 li
291.368 185.081 li
291.368 186 li
289.682 186 li
289.682 193.341 li
288.62 193.341 li
288.62 186 li
287.17 186 li
287.17 185.081 li
288.62 185.081 li
288.62 182.015 li
cp
f
299.917 188.376 mo
299.773 187.809 299.567 187.356 299.296 187.017 cv
299.025 186.678 298.667 186.405 298.221 186.197 cv
297.775 185.99 297.307 185.887 296.814 185.887 cv
296.005 185.887 295.307 186.146 294.725 186.668 cv
294.299 187.047 293.978 187.617 293.76 188.376 cv
299.917 188.376 li
cp
299.917 190.6 mo
300.812 191.07 li
300.519 191.648 300.178 192.114 299.794 192.468 cv
299.409 192.823 298.976 193.091 298.494 193.276 cv
298.014 193.461 297.468 193.554 296.861 193.554 cv
295.514 193.554 294.46 193.113 293.699 192.228 cv
292.939 191.345 292.56 190.347 292.56 189.234 cv
292.56 188.185 292.882 187.252 293.525 186.433 cv
294.341 185.39 295.434 184.87 296.8 184.87 cv
298.208 184.87 299.333 185.402 300.174 186.471 cv
300.771 187.225 301.075 188.167 301.085 189.294 cv
293.653 189.294 li
293.673 190.253 293.979 191.041 294.573 191.654 cv
295.166 192.267 295.898 192.574 296.769 192.574 cv
297.19 192.574 297.6 192.501 297.996 192.355 cv
298.395 192.208 298.732 192.014 299.012 191.772 cv
299.291 191.531 299.592 191.14 299.917 190.6 cv
cp
f
311.637 185.893 mo
310.717 185.893 309.944 186.214 309.315 186.856 cv
308.688 187.499 308.373 188.297 308.373 189.253 cv
308.373 189.879 308.514 190.444 308.794 190.944 cv
309.073 191.444 309.475 191.841 309.998 192.134 cv
310.521 192.427 311.071 192.574 311.652 192.574 cv
312.224 192.574 312.759 192.426 313.262 192.13 cv
313.765 191.834 314.164 191.421 314.463 190.89 cv
314.759 190.359 314.909 189.804 314.909 189.222 cv
314.909 188.636 314.76 188.08 314.465 187.554 cv
314.17 187.028 313.772 186.621 313.271 186.33 cv
312.773 186.04 312.229 185.893 311.637 185.893 cv
cp
307.387 185.081 mo
308.448 185.081 li
308.448 186.599 li
308.868 186.023 309.351 185.589 309.897 185.301 cv
310.442 185.014 311.052 184.87 311.725 184.87 cv
312.898 184.87 313.901 185.291 314.734 186.136 cv
315.569 186.982 315.986 187.999 315.986 189.188 cv
315.986 190.402 315.574 191.433 314.746 192.282 cv
313.921 193.13 312.923 193.554 311.755 193.554 cv
311.099 193.554 310.494 193.417 309.943 193.143 cv
309.391 192.871 308.894 192.462 308.448 191.921 cv
308.448 196.362 li
307.387 196.362 li
307.387 185.081 li
cp
f
317.976 181.893 mo
319.037 181.893 li
319.037 186.562 li
319.468 185.995 319.942 185.571 320.457 185.29 cv
320.975 185.009 321.533 184.87 322.135 184.87 cv
322.753 184.87 323.302 185.026 323.779 185.34 cv
324.257 185.654 324.609 186.074 324.839 186.603 cv
325.065 187.132 325.179 187.96 325.179 189.089 cv
325.179 193.341 li
324.117 193.341 li
324.117 189.4 li
324.117 188.45 324.079 187.815 324.004 187.496 cv
323.871 186.949 323.632 186.538 323.286 186.261 cv
322.939 185.986 322.484 185.848 321.924 185.848 cv
321.279 185.848 320.705 186.061 320.196 186.486 cv
319.687 186.911 319.352 187.437 319.189 188.065 cv
319.089 188.47 319.037 189.218 319.037 190.312 cv
319.037 193.341 li
317.976 193.341 li
317.976 181.893 li
cp
f
331.439 185.893 mo
330.846 185.893 330.3 186.04 329.799 186.33 cv
329.3 186.621 328.901 187.028 328.606 187.554 cv
328.311 188.08 328.162 188.636 328.162 189.222 cv
328.162 189.804 328.313 190.359 328.608 190.89 cv
328.908 191.421 329.309 191.834 329.811 192.13 cv
330.315 192.426 330.854 192.574 331.431 192.574 cv
332.012 192.574 332.562 192.427 333.083 192.134 cv
333.604 191.841 334.004 191.444 334.285 190.944 cv
334.565 190.444 334.706 189.879 334.706 189.253 cv
334.706 188.297 334.391 187.499 333.762 186.856 cv
333.133 186.214 332.358 185.893 331.439 185.893 cv
cp
335.685 185.081 mo
335.685 193.341 li
334.638 193.341 li
334.638 191.921 li
334.191 192.462 333.692 192.871 333.138 193.143 cv
332.585 193.417 331.978 193.554 331.32 193.554 cv
330.151 193.554 329.152 193.13 328.325 192.282 cv
327.498 191.433 327.085 190.402 327.085 189.188 cv
327.085 187.999 327.502 186.982 328.337 186.136 cv
329.172 185.291 330.176 184.87 331.351 184.87 cv
332.028 184.87 332.642 185.014 333.19 185.301 cv
333.739 185.589 334.223 186.023 334.638 186.599 cv
334.638 185.081 li
335.685 185.081 li
cp
f
342.23 185.984 mo
341.547 186.69 li
340.979 186.139 340.423 185.863 339.88 185.863 cv
339.534 185.863 339.239 185.978 338.993 186.205 cv
338.746 186.433 338.624 186.697 338.624 187.002 cv
338.624 187.27 338.725 187.525 338.929 187.768 cv
339.131 188.016 339.557 188.308 340.205 188.642 cv
340.998 189.051 341.535 189.447 341.818 189.826 cv
342.098 190.21 342.237 190.644 342.237 191.125 cv
342.237 191.802 341.999 192.376 341.523 192.848 cv
341.047 193.318 340.451 193.554 339.736 193.554 cv
339.26 193.554 338.804 193.449 338.371 193.242 cv
337.938 193.035 337.579 192.749 337.295 192.384 cv
337.963 191.625 li
338.507 192.238 339.081 192.543 339.69 192.543 cv
340.117 192.543 340.479 192.408 340.778 192.134 cv
341.079 191.861 341.229 191.539 341.229 191.169 cv
341.229 190.867 341.128 190.595 340.932 190.357 cv
340.734 190.125 340.286 189.832 339.593 189.476 cv
338.847 189.093 338.338 188.712 338.07 188.338 cv
337.801 187.963 337.668 187.536 337.668 187.055 cv
337.668 186.428 337.88 185.906 338.311 185.491 cv
338.738 185.076 339.28 184.87 339.934 184.87 cv
340.694 184.87 341.458 185.241 342.23 185.984 cv
cp
f
142.155 207.033 mo
142.013 206.464 141.806 206.013 141.535 205.673 cv
141.263 205.334 140.906 205.061 140.459 204.853 cv
140.014 204.646 139.545 204.542 139.053 204.542 cv
138.243 204.542 137.546 204.802 136.963 205.324 cv
136.538 205.704 136.215 206.272 135.998 207.033 cv
142.155 207.033 li
cp
142.155 209.255 mo
143.051 209.727 li
142.757 210.304 142.417 210.77 142.032 211.125 cv
141.647 211.478 141.214 211.749 140.732 211.932 cv
140.251 212.118 139.707 212.209 139.1 212.209 cv
137.751 212.209 136.699 211.769 135.938 210.884 cv
135.179 210.001 134.799 209.003 134.799 207.89 cv
134.799 206.841 135.12 205.909 135.763 205.088 cv
136.579 204.046 137.671 203.525 139.039 203.525 cv
140.447 203.525 141.571 204.058 142.412 205.126 cv
143.01 205.88 143.313 206.823 143.324 207.95 cv
135.892 207.95 li
135.913 208.91 136.219 209.697 136.812 210.311 cv
137.405 210.922 138.136 211.231 139.008 211.231 cv
139.429 211.231 139.838 211.156 140.236 211.01 cv
140.633 210.866 140.971 210.671 141.25 210.427 cv
141.529 210.187 141.831 209.796 142.155 209.255 cv
cp
f
145.146 200.549 mo
146.208 200.549 li
146.208 211.997 li
145.146 211.997 li
145.146 200.549 li
cp
f
148.258 200.549 mo
149.321 200.549 li
149.321 211.997 li
148.258 211.997 li
148.258 200.549 li
cp
f
151.393 203.738 mo
152.456 203.738 li
152.456 207.593 li
152.456 208.534 152.506 209.183 152.608 209.538 cv
152.76 210.042 153.05 210.443 153.478 210.736 cv
153.907 211.03 154.417 211.177 155.01 211.177 cv
155.603 211.177 156.106 211.034 156.519 210.748 cv
156.932 210.462 157.218 210.086 157.375 209.621 cv
157.481 209.302 157.535 208.626 157.535 207.593 cv
157.535 203.738 li
158.62 203.738 li
158.62 207.792 li
158.62 208.93 158.487 209.788 158.221 210.365 cv
157.956 210.943 157.556 211.394 157.022 211.719 cv
156.488 212.045 155.819 212.209 155.014 212.209 cv
154.209 212.209 153.538 212.045 152.998 211.719 cv
152.459 211.394 152.057 210.938 151.791 210.353 cv
151.525 209.769 151.393 208.888 151.393 207.714 cv
151.393 203.738 li
cp
f
165.133 204.64 mo
164.45 205.347 li
163.882 204.795 163.326 204.519 162.783 204.519 cv
162.438 204.519 162.143 204.634 161.897 204.861 cv
161.65 205.088 161.527 205.354 161.527 205.658 cv
161.527 205.926 161.628 206.181 161.832 206.424 cv
162.035 206.671 162.46 206.962 163.109 207.298 cv
163.9 207.708 164.439 208.103 164.723 208.483 cv
165.001 208.867 165.14 209.3 165.14 209.781 cv
165.14 210.458 164.902 211.033 164.427 211.504 cv
163.949 211.973 163.354 212.209 162.64 212.209 cv
162.162 212.209 161.707 212.106 161.274 211.899 cv
160.841 211.691 160.482 211.404 160.198 211.041 cv
160.867 210.282 li
161.41 210.893 161.985 211.2 162.594 211.2 cv
163.021 211.2 163.383 211.064 163.682 210.79 cv
163.982 210.517 164.131 210.194 164.131 209.826 cv
164.131 209.522 164.032 209.252 163.834 209.013 cv
163.637 208.781 163.19 208.488 162.496 208.132 cv
161.75 207.749 161.242 207.37 160.974 206.994 cv
160.705 206.62 160.57 206.192 160.57 205.71 cv
160.57 205.083 160.784 204.562 161.213 204.147 cv
161.641 203.732 162.183 203.525 162.836 203.525 cv
163.597 203.525 164.363 203.897 165.133 204.64 cv
cp
f
178.274 207.033 mo
178.132 206.464 177.926 206.013 177.655 205.673 cv
177.383 205.334 177.025 205.061 176.58 204.853 cv
176.133 204.646 175.665 204.542 175.172 204.542 cv
174.363 204.542 173.665 204.802 173.083 205.324 cv
172.658 205.704 172.335 206.272 172.118 207.033 cv
178.274 207.033 li
cp
178.274 209.255 mo
179.17 209.727 li
178.876 210.304 178.537 210.77 178.152 211.125 cv
177.767 211.478 177.334 211.749 176.853 211.932 cv
176.372 212.118 175.826 212.209 175.22 212.209 cv
173.871 212.209 172.818 211.769 172.058 210.884 cv
171.298 210.001 170.919 209.003 170.919 207.89 cv
170.919 206.841 171.24 205.909 171.883 205.088 cv
172.699 204.046 173.791 203.525 175.158 203.525 cv
176.566 203.525 177.69 204.058 178.532 205.126 cv
179.13 205.88 179.433 206.823 179.443 207.95 cv
172.012 207.95 li
172.032 208.91 172.339 209.697 172.931 210.311 cv
173.524 210.922 174.255 211.231 175.127 211.231 cv
175.549 211.231 175.957 211.156 176.355 211.01 cv
176.752 210.866 177.091 210.671 177.37 210.427 cv
177.649 210.187 177.95 209.796 178.274 209.255 cv
cp
f
182.35 200.67 mo
183.413 200.67 li
183.413 203.738 li
185.099 203.738 li
185.099 204.657 li
183.413 204.657 li
183.413 211.997 li
182.35 211.997 li
182.35 204.657 li
180.9 204.657 li
180.9 203.738 li
182.35 203.738 li
182.35 200.67 li
cp
f
190.989 203.738 mo
192.052 203.738 li
192.052 205.166 li
192.422 204.639 192.802 204.254 193.192 204.011 cv
193.729 203.687 194.294 203.525 194.887 203.525 cv
195.287 203.525 195.667 203.603 196.026 203.76 cv
196.386 203.917 196.68 204.126 196.908 204.386 cv
197.136 204.647 197.334 205.021 197.5 205.505 cv
197.854 204.859 198.295 204.367 198.827 204.03 cv
199.356 203.694 199.927 203.525 200.537 203.525 cv
201.108 203.525 201.612 203.669 202.049 203.958 cv
202.485 204.246 202.81 204.648 203.021 205.166 cv
203.234 205.681 203.339 206.456 203.339 207.487 cv
203.339 211.997 li
202.255 211.997 li
202.255 207.487 li
202.255 206.602 202.191 205.994 202.066 205.662 cv
201.939 205.331 201.724 205.064 201.418 204.861 cv
201.113 204.659 200.749 204.558 200.326 204.558 cv
199.811 204.558 199.341 204.708 198.914 205.012 cv
198.487 205.316 198.176 205.721 197.979 206.228 cv
197.783 206.733 197.685 207.58 197.685 208.764 cv
197.685 211.997 li
196.622 211.997 li
196.622 207.768 li
196.622 206.771 196.56 206.095 196.436 205.739 cv
196.313 205.38 196.095 205.095 195.787 204.879 cv
195.478 204.664 195.111 204.558 194.686 204.558 cv
194.195 204.558 193.736 204.707 193.308 205.001 cv
192.88 205.297 192.564 205.696 192.36 206.198 cv
192.155 206.698 192.052 207.465 192.052 208.498 cv
192.052 211.997 li
190.989 211.997 li
190.989 203.738 li
cp
f
209.561 204.549 mo
208.97 204.549 208.424 204.696 207.923 204.986 cv
207.423 205.277 207.024 205.684 206.729 206.209 cv
206.433 206.737 206.285 207.292 206.285 207.877 cv
206.285 208.459 206.435 209.015 206.732 209.546 cv
207.031 210.078 207.433 210.492 207.935 210.787 cv
208.438 211.082 208.977 211.231 209.554 211.231 cv
210.134 211.231 210.686 211.083 211.208 210.791 cv
211.728 210.498 212.128 210.1 212.409 209.6 cv
212.688 209.098 212.83 208.536 212.83 207.91 cv
212.83 206.954 212.515 206.154 211.885 205.513 cv
211.256 204.871 210.481 204.549 209.561 204.549 cv
cp
213.808 203.738 mo
213.808 211.997 li
212.761 211.997 li
212.761 210.578 li
212.315 211.12 211.816 211.526 211.262 211.799 cv
210.708 212.074 210.102 212.209 209.444 212.209 cv
208.275 212.209 207.276 211.786 206.449 210.938 cv
205.621 210.089 205.207 209.059 205.207 207.845 cv
205.207 206.655 205.625 205.637 206.459 204.792 cv
207.295 203.947 208.299 203.525 209.474 203.525 cv
210.152 203.525 210.766 203.669 211.315 203.958 cv
211.863 204.246 212.346 204.679 212.761 205.255 cv
212.761 203.738 li
213.808 203.738 li
cp
f
216.063 203.738 mo
217.126 203.738 li
217.126 207.593 li
217.126 208.534 217.177 209.183 217.278 209.538 cv
217.43 210.042 217.72 210.443 218.148 210.736 cv
218.577 211.03 219.087 211.177 219.68 211.177 cv
220.272 211.177 220.776 211.034 221.189 210.748 cv
221.602 210.462 221.888 210.086 222.044 209.621 cv
222.151 209.302 222.205 208.626 222.205 207.593 cv
222.205 203.738 li
223.29 203.738 li
223.29 207.792 li
223.29 208.93 223.157 209.788 222.892 210.365 cv
222.626 210.943 222.227 211.394 221.692 211.719 cv
221.158 212.045 220.489 212.209 219.685 212.209 cv
218.879 212.209 218.208 212.045 217.668 211.719 cv
217.129 211.394 216.727 210.938 216.461 210.353 cv
216.196 209.769 216.063 208.888 216.063 207.714 cv
216.063 203.738 li
cp
f
225.249 203.738 mo
226.334 203.738 li
226.334 204.945 li
226.658 204.468 226.999 204.113 227.359 203.878 cv
227.719 203.642 228.093 203.525 228.482 203.525 cv
228.775 203.525 229.089 203.619 229.423 203.806 cv
228.87 204.702 li
228.646 204.606 228.459 204.558 228.308 204.558 cv
227.953 204.558 227.611 204.703 227.283 204.994 cv
226.954 205.285 226.704 205.736 226.531 206.349 cv
226.4 206.819 226.334 207.771 226.334 209.202 cv
226.334 211.997 li
225.249 211.997 li
225.249 203.738 li
cp
f
230.167 203.738 mo
231.231 203.738 li
231.231 211.997 li
230.167 211.997 li
230.167 203.738 li
cp
230.695 200.335 mo
230.938 200.335 231.143 200.422 231.315 200.594 cv
231.486 200.766 231.572 200.974 231.572 201.217 cv
231.572 201.455 231.486 201.66 231.315 201.833 cv
231.143 202.004 230.938 202.089 230.695 202.089 cv
230.458 202.089 230.254 202.004 230.083 201.833 cv
229.912 201.66 229.826 201.455 229.826 201.217 cv
229.826 200.974 229.912 200.766 230.083 200.594 cv
230.254 200.422 230.458 200.335 230.695 200.335 cv
cp
f
237.592 204.64 mo
236.908 205.347 li
236.34 204.795 235.784 204.519 235.241 204.519 cv
234.896 204.519 234.6 204.634 234.355 204.861 cv
234.108 205.088 233.985 205.354 233.985 205.658 cv
233.985 205.926 234.087 206.181 234.29 206.424 cv
234.493 206.671 234.919 206.962 235.567 207.298 cv
236.358 207.708 236.896 208.103 237.181 208.483 cv
237.46 208.867 237.598 209.3 237.598 209.781 cv
237.598 210.458 237.361 211.033 236.884 211.504 cv
236.408 211.973 235.812 212.209 235.098 212.209 cv
234.621 212.209 234.166 212.106 233.732 211.899 cv
233.299 211.691 232.941 211.404 232.657 211.041 cv
233.325 210.282 li
233.868 210.893 234.443 211.2 235.053 211.2 cv
235.479 211.2 235.841 211.064 236.14 210.79 cv
236.44 210.517 236.589 210.194 236.589 209.826 cv
236.589 209.522 236.49 209.252 236.292 209.013 cv
236.095 208.781 235.649 208.488 234.954 208.132 cv
234.208 207.749 233.7 207.37 233.432 206.994 cv
233.163 206.62 233.028 206.192 233.028 205.71 cv
233.028 205.083 233.242 204.562 233.672 204.147 cv
234.1 203.732 234.641 203.525 235.294 203.525 cv
236.055 203.525 236.82 203.897 237.592 204.64 cv
cp
f
242.997 203.738 mo
244.128 203.738 li
246.9 209.758 li
249.64 203.738 li
250.778 203.738 li
246.998 211.997 li
246.801 211.997 li
242.997 203.738 li
cp
f
259.348 207.033 mo
259.206 206.464 258.999 206.013 258.729 205.673 cv
258.457 205.334 258.1 205.061 257.653 204.853 cv
257.206 204.646 256.738 204.542 256.247 204.542 cv
255.438 204.542 254.74 204.802 254.156 205.324 cv
253.73 205.704 253.41 206.272 253.191 207.033 cv
259.348 207.033 li
cp
259.348 209.255 mo
260.243 209.727 li
259.951 210.304 259.61 210.77 259.226 211.125 cv
258.84 211.478 258.407 211.749 257.925 211.932 cv
257.446 212.118 256.9 212.209 256.293 212.209 cv
254.945 212.209 253.892 211.769 253.131 210.884 cv
252.371 210.001 251.992 209.003 251.992 207.89 cv
251.992 206.841 252.314 205.909 252.956 205.088 cv
253.772 204.046 254.865 203.525 256.232 203.525 cv
257.64 203.525 258.765 204.058 259.606 205.126 cv
260.203 205.88 260.506 206.823 260.517 207.95 cv
253.085 207.95 li
253.105 208.91 253.412 209.697 254.006 210.311 cv
254.598 210.922 255.329 211.231 256.202 211.231 cv
256.622 211.231 257.031 211.156 257.429 211.01 cv
257.826 210.866 258.164 210.671 258.444 210.427 cv
258.723 210.187 259.023 209.796 259.348 209.255 cv
cp
f
262.34 200.549 mo
263.402 200.549 li
263.402 211.997 li
262.34 211.997 li
262.34 200.549 li
cp
f
265.452 203.738 mo
266.515 203.738 li
266.515 211.997 li
265.452 211.997 li
265.452 203.738 li
cp
265.979 200.335 mo
266.222 200.335 266.426 200.422 266.6 200.594 cv
266.77 200.766 266.856 200.974 266.856 201.217 cv
266.856 201.455 266.77 201.66 266.6 201.833 cv
266.426 202.004 266.222 202.089 265.979 202.089 cv
265.743 202.089 265.538 202.004 265.367 201.833 cv
265.196 201.66 265.109 201.455 265.109 201.217 cv
265.109 200.974 265.196 200.766 265.367 200.594 cv
265.538 200.422 265.743 200.335 265.979 200.335 cv
cp
f
269.65 200.67 mo
270.713 200.67 li
270.713 203.738 li
272.397 203.738 li
272.397 204.657 li
270.713 204.657 li
270.713 211.997 li
269.65 211.997 li
269.65 204.657 li
268.199 204.657 li
268.199 203.738 li
269.65 203.738 li
269.65 200.67 li
cp
f
275.16 210.326 mo
275.419 210.326 275.64 210.418 275.821 210.601 cv
276.004 210.783 276.094 211.004 276.094 211.268 cv
276.094 211.526 276.004 211.749 275.821 211.932 cv
275.64 212.118 275.419 212.209 275.16 212.209 cv
274.902 212.209 274.684 212.118 274.5 211.932 cv
274.318 211.749 274.227 211.526 274.227 211.268 cv
274.227 211.004 274.318 210.783 274.5 210.601 cv
274.684 210.418 274.902 210.326 275.16 210.326 cv
cp
f
287.196 203.203 mo
285.283 207.245 li
289.101 207.245 li
287.196 203.203 li
cp
287.337 200.83 mo
292.544 211.997 li
291.339 211.997 li
289.582 208.323 li
284.773 208.323 li
283.032 211.997 li
281.787 211.997 li
287.064 200.83 li
287.337 200.83 li
cp
f
293.942 200.549 mo
295.005 200.549 li
295.005 211.997 li
293.942 211.997 li
293.942 200.549 li
cp
f
297.055 203.738 mo
298.117 203.738 li
298.117 211.997 li
297.055 211.997 li
297.055 203.738 li
cp
297.582 200.335 mo
297.824 200.335 298.029 200.422 298.201 200.594 cv
298.372 200.766 298.46 200.974 298.46 201.217 cv
298.46 201.455 298.372 201.66 298.201 201.833 cv
298.029 202.004 297.824 202.089 297.582 202.089 cv
297.345 202.089 297.142 202.004 296.97 201.833 cv
296.798 201.66 296.714 201.455 296.714 201.217 cv
296.714 200.974 296.798 200.766 296.97 200.594 cv
297.142 200.422 297.345 200.335 297.582 200.335 cv
cp
f
304.301 204.549 mo
303.708 204.549 303.161 204.696 302.661 204.986 cv
302.162 205.277 301.764 205.684 301.467 206.209 cv
301.172 206.737 301.023 207.292 301.023 207.877 cv
301.023 208.459 301.173 209.015 301.471 209.546 cv
301.771 210.078 302.17 210.492 302.674 210.787 cv
303.177 211.082 303.717 211.231 304.291 211.231 cv
304.874 211.231 305.425 211.083 305.943 210.791 cv
306.465 210.498 306.867 210.1 307.146 209.6 cv
307.427 209.098 307.567 208.536 307.567 207.91 cv
307.567 206.954 307.252 206.154 306.623 205.513 cv
305.994 204.871 305.22 204.549 304.301 204.549 cv
cp
308.548 203.738 mo
308.548 215.018 li
307.499 215.018 li
307.499 210.578 li
307.054 211.12 306.553 211.526 305.999 211.799 cv
305.445 212.074 304.84 212.209 304.182 212.209 cv
303.014 212.209 302.015 211.786 301.187 210.938 cv
300.36 210.089 299.946 209.059 299.946 207.845 cv
299.946 206.655 300.364 205.637 301.199 204.792 cv
302.034 203.947 303.038 203.525 304.213 203.525 cv
304.891 203.525 305.504 203.669 306.053 203.958 cv
306.604 204.246 307.086 204.679 307.499 205.255 cv
307.499 203.738 li
308.548 203.738 li
cp
f
310.793 203.738 mo
311.857 203.738 li
311.857 207.593 li
311.857 208.534 311.907 209.183 312.01 209.538 cv
312.16 210.042 312.45 210.443 312.878 210.736 cv
313.308 211.03 313.817 211.177 314.41 211.177 cv
315.004 211.177 315.508 211.034 315.919 210.748 cv
316.333 210.462 316.618 210.086 316.775 209.621 cv
316.882 209.302 316.936 208.626 316.936 207.593 cv
316.936 203.738 li
318.021 203.738 li
318.021 207.792 li
318.021 208.93 317.888 209.788 317.622 210.365 cv
317.356 210.943 316.956 211.394 316.423 211.719 cv
315.889 212.045 315.22 212.209 314.416 212.209 cv
313.609 212.209 312.938 212.045 312.398 211.719 cv
311.859 211.394 311.457 210.938 311.191 210.353 cv
310.926 209.769 310.793 208.888 310.793 207.714 cv
310.793 203.738 li
cp
f
324.363 204.549 mo
323.771 204.549 323.228 204.696 322.725 204.986 cv
322.225 205.277 321.826 205.684 321.531 206.209 cv
321.235 206.737 321.088 207.292 321.088 207.877 cv
321.088 208.459 321.237 209.015 321.533 209.546 cv
321.833 210.078 322.234 210.492 322.736 210.787 cv
323.239 211.082 323.779 211.231 324.355 211.231 cv
324.937 211.231 325.487 211.083 326.009 210.791 cv
326.53 210.498 326.93 210.1 327.211 209.6 cv
327.489 209.098 327.632 208.536 327.632 207.91 cv
327.632 206.954 327.316 206.154 326.687 205.513 cv
326.058 204.871 325.284 204.549 324.363 204.549 cv
cp
328.609 203.738 mo
328.609 211.997 li
327.562 211.997 li
327.562 210.578 li
327.116 211.12 326.617 211.526 326.063 211.799 cv
325.509 212.074 324.903 212.209 324.245 212.209 cv
323.077 212.209 322.078 211.786 321.249 210.938 cv
320.423 210.089 320.009 209.059 320.009 207.845 cv
320.009 206.655 320.427 205.637 321.262 204.792 cv
322.098 203.947 323.102 203.525 324.275 203.525 cv
324.954 203.525 325.568 203.669 326.117 203.958 cv
326.666 204.246 327.147 204.679 327.562 205.255 cv
327.562 203.738 li
328.609 203.738 li
cp
f
330.994 203.738 mo
332.057 203.738 li
332.057 205.166 li
332.428 204.639 332.807 204.254 333.196 204.011 cv
333.734 203.687 334.299 203.525 334.892 203.525 cv
335.292 203.525 335.671 203.603 336.031 203.76 cv
336.392 203.917 336.686 204.126 336.914 204.386 cv
337.141 204.647 337.34 205.021 337.505 205.505 cv
337.859 204.859 338.301 204.367 338.831 204.03 cv
339.36 203.694 339.932 203.525 340.542 203.525 cv
341.113 203.525 341.616 203.669 342.054 203.958 cv
342.491 204.246 342.814 204.648 343.026 205.166 cv
343.238 205.681 343.345 206.456 343.345 207.487 cv
343.345 211.997 li
342.26 211.997 li
342.26 207.487 li
342.26 206.602 342.196 205.994 342.071 205.662 cv
341.944 205.331 341.729 205.064 341.423 204.861 cv
341.118 204.659 340.753 204.558 340.33 204.558 cv
339.815 204.558 339.346 204.708 338.919 205.012 cv
338.492 205.316 338.181 205.721 337.984 206.228 cv
337.788 206.733 337.689 207.58 337.689 208.764 cv
337.689 211.997 li
336.627 211.997 li
336.627 207.768 li
336.627 206.771 336.565 206.095 336.441 205.739 cv
336.315 205.38 336.1 205.095 335.792 204.879 cv
335.481 204.664 335.115 204.558 334.69 204.558 cv
334.2 204.558 333.74 204.707 333.313 205.001 cv
332.885 205.297 332.569 205.696 332.363 206.198 cv
332.159 206.698 332.057 207.465 332.057 208.498 cv
332.057 211.997 li
330.994 211.997 li
330.994 203.738 li
cp
f
139.198 223.206 mo
138.607 223.206 138.061 223.351 137.56 223.641 cv
137.06 223.933 136.662 224.34 136.366 224.867 cv
136.07 225.392 135.923 225.948 135.923 226.535 cv
135.923 227.116 136.071 227.671 136.37 228.204 cv
136.667 228.733 137.068 229.147 137.571 229.443 cv
138.075 229.739 138.614 229.885 139.19 229.885 cv
139.771 229.885 140.323 229.74 140.844 229.446 cv
141.363 229.154 141.765 228.756 142.044 228.257 cv
142.326 227.755 142.466 227.192 142.466 226.566 cv
142.466 225.61 142.152 224.811 141.522 224.168 cv
140.892 223.526 140.119 223.206 139.198 223.206 cv
cp
143.445 219.206 mo
143.445 230.654 li
142.398 230.654 li
142.398 229.234 li
141.952 229.775 141.453 230.183 140.898 230.455 cv
140.344 230.73 139.739 230.865 139.08 230.865 cv
137.911 230.865 136.913 230.442 136.085 229.594 cv
135.258 228.747 134.844 227.713 134.844 226.501 cv
134.844 225.311 135.263 224.294 136.097 223.448 cv
136.932 222.603 137.937 222.182 139.111 222.182 cv
139.789 222.182 140.402 222.326 140.952 222.614 cv
141.5 222.902 141.983 223.335 142.398 223.911 cv
142.398 219.206 li
143.445 219.206 li
cp
f
152.806 225.689 mo
152.664 225.123 152.457 224.668 152.187 224.33 cv
151.915 223.991 151.557 223.717 151.11 223.51 cv
150.665 223.302 150.196 223.199 149.705 223.199 cv
148.894 223.199 148.197 223.458 147.614 223.981 cv
147.188 224.36 146.867 224.929 146.649 225.689 cv
152.806 225.689 li
cp
152.806 227.914 mo
153.701 228.383 li
153.408 228.961 153.068 229.426 152.684 229.781 cv
152.298 230.134 151.865 230.405 151.384 230.588 cv
150.903 230.774 150.358 230.865 149.75 230.865 cv
148.402 230.865 147.35 230.424 146.589 229.541 cv
145.829 228.657 145.45 227.659 145.45 226.545 cv
145.45 225.498 145.771 224.564 146.415 223.746 cv
147.23 222.702 148.322 222.182 149.689 222.182 cv
151.097 222.182 152.223 222.715 153.063 223.783 cv
153.661 224.537 153.964 225.478 153.975 226.606 cv
146.543 226.606 li
146.563 227.566 146.87 228.353 147.463 228.966 cv
148.055 229.581 148.787 229.885 149.659 229.885 cv
150.079 229.885 150.488 229.813 150.887 229.667 cv
151.284 229.521 151.622 229.328 151.901 229.084 cv
152.18 228.842 152.481 228.452 152.806 227.914 cv
cp
f
159.941 223.206 mo
159.339 223.206 158.78 223.351 158.263 223.643 cv
157.747 223.933 157.342 224.335 157.049 224.848 cv
156.755 225.364 156.608 225.917 156.608 226.515 cv
156.608 227.422 156.912 228.17 157.52 228.762 cv
158.127 229.355 158.914 229.65 159.881 229.65 cv
160.857 229.65 161.642 229.357 162.237 228.771 cv
162.832 228.182 163.129 227.411 163.129 226.456 cv
163.129 225.833 162.993 225.277 162.719 224.789 cv
162.447 224.299 162.059 223.915 161.558 223.631 cv
161.057 223.348 160.518 223.206 159.941 223.206 cv
cp
163.076 222.393 mo
164.139 222.393 li
164.139 228.975 li
164.139 230.134 164.037 230.983 163.835 231.518 cv
163.557 232.277 163.074 232.862 162.385 233.271 cv
161.697 233.681 160.869 233.886 159.903 233.886 cv
159.195 233.886 158.558 233.786 157.993 233.584 cv
157.43 233.385 156.971 233.116 156.617 232.779 cv
156.262 232.441 155.935 231.947 155.637 231.298 cv
156.791 231.298 li
157.104 231.844 157.509 232.25 158.006 232.512 cv
158.503 232.776 159.12 232.908 159.854 232.908 cv
160.579 232.908 161.189 232.772 161.689 232.502 cv
162.188 232.233 162.544 231.893 162.757 231.485 cv
162.97 231.076 163.076 230.417 163.076 229.506 cv
163.076 229.082 li
162.676 229.587 162.187 229.975 161.609 230.246 cv
161.032 230.517 160.419 230.654 159.771 230.654 cv
159.011 230.654 158.296 230.465 157.628 230.086 cv
156.959 229.71 156.442 229.203 156.077 228.565 cv
155.712 227.928 155.531 227.226 155.531 226.461 cv
155.531 225.7 155.721 224.986 156.101 224.325 cv
156.48 223.667 157.006 223.143 157.677 222.757 cv
158.348 222.373 159.057 222.182 159.801 222.182 cv
160.419 222.182 160.995 222.309 161.53 222.564 cv
162.064 222.82 162.58 223.241 163.076 223.827 cv
163.076 222.393 li
cp
f
170.398 223.206 mo
169.806 223.206 169.261 223.351 168.759 223.641 cv
168.26 223.933 167.861 224.34 167.566 224.867 cv
167.27 225.392 167.122 225.948 167.122 226.535 cv
167.122 227.116 167.271 227.671 167.569 228.204 cv
167.868 228.733 168.269 229.147 168.771 229.443 cv
169.274 229.739 169.813 229.885 170.391 229.885 cv
170.971 229.885 171.522 229.74 172.043 229.446 cv
172.563 229.154 172.964 228.756 173.245 228.257 cv
173.525 227.755 173.667 227.192 173.667 226.566 cv
173.667 225.61 173.352 224.811 172.721 224.168 cv
172.093 223.526 171.318 223.206 170.398 223.206 cv
cp
174.645 222.393 mo
174.645 230.654 li
173.597 230.654 li
173.597 229.234 li
173.151 229.775 172.653 230.183 172.098 230.455 cv
171.544 230.73 170.938 230.865 170.281 230.865 cv
169.111 230.865 168.112 230.442 167.285 229.594 cv
166.458 228.747 166.043 227.713 166.043 226.501 cv
166.043 225.311 166.461 224.294 167.296 223.448 cv
168.132 222.603 169.136 222.182 170.31 222.182 cv
170.988 222.182 171.602 222.326 172.151 222.614 cv
172.7 222.902 173.183 223.335 173.597 223.911 cv
173.597 222.393 li
174.645 222.393 li
cp
f
189.357 224.11 mo
188.515 224.633 li
187.787 223.667 186.793 223.182 185.534 223.182 cv
184.529 223.182 183.694 223.506 183.029 224.154 cv
182.364 224.8 182.032 225.587 182.032 226.511 cv
182.032 227.114 182.185 227.68 182.49 228.21 cv
182.796 228.741 183.216 229.154 183.749 229.446 cv
184.282 229.74 184.88 229.885 185.542 229.885 cv
186.755 229.885 187.746 229.403 188.515 228.437 cv
189.357 228.99 li
188.962 229.584 188.432 230.045 187.767 230.375 cv
187.101 230.702 186.343 230.865 185.493 230.865 cv
184.188 230.865 183.104 230.449 182.245 229.621 cv
181.383 228.79 180.954 227.78 180.954 226.59 cv
180.954 225.792 181.155 225.05 181.557 224.363 cv
181.96 223.678 182.512 223.143 183.216 222.757 cv
183.918 222.373 184.707 222.182 185.577 222.182 cv
186.123 222.182 186.651 222.265 187.16 222.431 cv
187.667 222.598 188.1 222.816 188.454 223.084 cv
188.808 223.352 189.11 223.695 189.357 224.11 cv
cp
f
195.305 223.221 mo
194.421 223.221 193.663 223.546 193.027 224.2 cv
192.392 224.853 192.075 225.642 192.075 226.568 cv
192.075 227.166 192.22 227.723 192.508 228.239 cv
192.799 228.755 193.19 229.154 193.681 229.434 cv
194.174 229.716 194.716 229.855 195.305 229.855 cv
195.894 229.855 196.435 229.716 196.927 229.434 cv
197.42 229.154 197.811 228.755 198.1 228.239 cv
198.39 227.723 198.535 227.166 198.535 226.568 cv
198.535 225.642 198.216 224.853 197.579 224.2 cv
196.94 223.546 196.183 223.221 195.305 223.221 cv
cp
195.309 222.182 mo
196.581 222.182 197.636 222.642 198.472 223.562 cv
199.232 224.403 199.612 225.397 199.612 226.545 cv
199.612 227.699 199.211 228.708 198.407 229.571 cv
197.604 230.434 196.571 230.865 195.309 230.865 cv
194.041 230.865 193.006 230.434 192.202 229.571 cv
191.398 228.708 190.997 227.699 190.997 226.545 cv
190.997 225.403 191.376 224.41 192.137 223.57 cv
192.974 222.645 194.031 222.182 195.309 222.182 cv
cp
f
201.579 222.393 mo
202.642 222.393 li
202.642 223.875 li
203.066 223.307 203.537 222.884 204.054 222.602 cv
204.569 222.322 205.131 222.182 205.738 222.182 cv
206.356 222.182 206.904 222.338 207.382 222.652 cv
207.86 222.966 208.213 223.387 208.441 223.92 cv
208.669 224.451 208.783 225.279 208.783 226.401 cv
208.783 230.654 li
207.72 230.654 li
207.72 226.712 li
207.72 225.762 207.68 225.126 207.602 224.809 cv
207.479 224.262 207.242 223.85 206.894 223.574 cv
206.545 223.297 206.088 223.161 205.526 223.161 cv
204.883 223.161 204.308 223.374 203.799 223.799 cv
203.29 224.223 202.955 224.748 202.793 225.377 cv
202.692 225.787 202.642 226.537 202.642 227.624 cv
202.642 230.654 li
201.579 230.654 li
201.579 222.393 li
cp
f
210.279 222.393 mo
211.409 222.393 li
214.183 228.415 li
216.921 222.393 li
218.06 222.393 li
214.28 230.654 li
214.082 230.654 li
210.279 222.393 li
cp
f
223.658 223.206 mo
223.066 223.206 222.521 223.351 222.019 223.641 cv
221.52 223.933 221.121 224.34 220.826 224.867 cv
220.53 225.392 220.382 225.948 220.382 226.535 cv
220.382 227.116 220.531 227.671 220.829 228.204 cv
221.127 228.733 221.528 229.147 222.031 229.443 cv
222.534 229.739 223.073 229.885 223.65 229.885 cv
224.231 229.885 224.783 229.74 225.303 229.446 cv
225.824 229.154 226.224 228.756 226.505 228.257 cv
226.785 227.755 226.926 227.192 226.926 226.566 cv
226.926 225.61 226.611 224.811 225.981 224.168 cv
225.353 223.526 224.577 223.206 223.658 223.206 cv
cp
227.904 222.393 mo
227.904 230.654 li
226.857 230.654 li
226.857 229.234 li
226.411 229.775 225.912 230.183 225.357 230.455 cv
224.804 230.73 224.198 230.865 223.541 230.865 cv
222.371 230.865 221.372 230.442 220.545 229.594 cv
219.717 228.747 219.304 227.713 219.304 226.501 cv
219.304 225.311 219.722 224.294 220.556 223.448 cv
221.392 222.603 222.396 222.182 223.57 222.182 cv
224.248 222.182 224.861 222.326 225.411 222.614 cv
225.959 222.902 226.442 223.335 226.857 223.911 cv
226.857 222.393 li
227.904 222.393 li
cp
f
230.138 219.206 mo
231.201 219.206 li
231.201 230.654 li
230.138 230.654 li
230.138 219.206 li
cp
f
233.25 219.206 mo
234.313 219.206 li
234.313 230.654 li
233.25 230.654 li
233.25 219.206 li
cp
f
236.362 222.393 mo
237.425 222.393 li
237.425 230.654 li
236.362 230.654 li
236.362 222.393 li
cp
236.889 218.993 mo
237.131 218.993 237.337 219.079 237.509 219.251 cv
237.68 219.421 237.766 219.63 237.766 219.873 cv
237.766 220.111 237.68 220.316 237.509 220.489 cv
237.337 220.661 237.131 220.746 236.889 220.746 cv
236.652 220.746 236.448 220.661 236.278 220.489 cv
236.105 220.316 236.02 220.111 236.02 219.873 cv
236.02 219.63 236.105 219.421 236.278 219.251 cv
236.448 219.079 236.652 218.993 236.889 218.993 cv
cp
f
243.787 223.296 mo
243.104 224.003 li
242.535 223.452 241.979 223.175 241.436 223.175 cv
241.091 223.175 240.796 223.29 240.55 223.517 cv
240.303 223.746 240.181 224.009 240.181 224.314 cv
240.181 224.583 240.281 224.837 240.484 225.081 cv
240.688 225.329 241.113 225.62 241.762 225.955 cv
242.554 226.364 243.092 226.759 243.376 227.138 cv
243.654 227.523 243.793 227.956 243.793 228.437 cv
243.793 229.115 243.557 229.689 243.08 230.161 cv
242.603 230.63 242.007 230.865 241.293 230.865 cv
240.815 230.865 240.361 230.761 239.928 230.554 cv
239.494 230.347 239.136 230.061 238.852 229.696 cv
239.52 228.937 li
240.063 229.55 240.639 229.855 241.247 229.855 cv
241.674 229.855 242.035 229.719 242.335 229.446 cv
242.635 229.172 242.783 228.851 242.783 228.482 cv
242.783 228.179 242.685 227.908 242.488 227.669 cv
242.289 227.437 241.843 227.144 241.149 226.79 cv
240.403 226.406 239.896 226.026 239.627 225.652 cv
239.357 225.276 239.224 224.848 239.224 224.368 cv
239.224 223.74 239.438 223.219 239.867 222.803 cv
240.295 222.388 240.837 222.182 241.489 222.182 cv
242.25 222.182 243.016 222.551 243.787 223.296 cv
cp
f
249.191 222.393 mo
250.321 222.393 li
253.095 228.415 li
255.834 222.393 li
256.972 222.393 li
253.191 230.654 li
252.995 230.654 li
249.191 222.393 li
cp
f
258.453 222.393 mo
259.516 222.393 li
259.516 226.25 li
259.516 227.19 259.566 227.839 259.668 228.193 cv
259.819 228.7 260.109 229.099 260.538 229.391 cv
260.967 229.686 261.478 229.833 262.069 229.833 cv
262.663 229.833 263.167 229.691 263.579 229.405 cv
263.993 229.119 264.277 228.742 264.435 228.277 cv
264.541 227.958 264.595 227.283 264.595 226.25 cv
264.595 222.393 li
265.68 222.393 li
265.68 226.447 li
265.68 227.585 265.548 228.443 265.28 229.021 cv
265.015 229.598 264.615 230.05 264.082 230.375 cv
263.548 230.703 262.879 230.865 262.073 230.865 cv
261.27 230.865 260.597 230.703 260.059 230.375 cv
259.519 230.05 259.117 229.594 258.851 229.01 cv
258.585 228.425 258.453 227.544 258.453 226.372 cv
258.453 222.393 li
cp
f
267.881 219.206 mo
268.944 219.206 li
268.944 230.654 li
267.881 230.654 li
267.881 219.206 li
cp
f
275.419 223.206 mo
274.499 223.206 273.727 223.526 273.097 224.168 cv
272.47 224.811 272.156 225.61 272.156 226.566 cv
272.156 227.192 272.295 227.755 272.574 228.257 cv
272.855 228.756 273.256 229.154 273.779 229.446 cv
274.301 229.74 274.853 229.885 275.433 229.885 cv
276.006 229.885 276.541 229.739 277.043 229.443 cv
277.545 229.147 277.945 228.733 278.244 228.204 cv
278.542 227.671 278.691 227.116 278.691 226.535 cv
278.691 225.948 278.542 225.392 278.247 224.867 cv
277.952 224.34 277.554 223.933 277.055 223.641 cv
276.555 223.351 276.01 223.206 275.419 223.206 cv
cp
271.169 222.393 mo
272.23 222.393 li
272.23 223.911 li
272.65 223.335 273.133 222.902 273.68 222.614 cv
274.224 222.326 274.834 222.182 275.507 222.182 cv
276.681 222.182 277.684 222.603 278.518 223.448 cv
279.352 224.294 279.769 225.311 279.769 226.501 cv
279.769 227.713 279.356 228.747 278.527 229.594 cv
277.701 230.442 276.705 230.865 275.537 230.865 cv
274.879 230.865 274.275 230.73 273.724 230.455 cv
273.174 230.183 272.677 229.775 272.23 229.234 cv
272.23 233.674 li
271.169 233.674 li
271.169 222.393 li
cp
f
281.621 222.393 mo
282.685 222.393 li
282.685 226.25 li
282.685 227.19 282.734 227.839 282.836 228.193 cv
282.986 228.7 283.277 229.099 283.705 229.391 cv
284.135 229.686 284.645 229.833 285.237 229.833 cv
285.831 229.833 286.334 229.691 286.746 229.405 cv
287.16 229.119 287.444 228.742 287.603 228.277 cv
287.708 227.958 287.763 227.283 287.763 226.25 cv
287.763 222.393 li
288.847 222.393 li
288.847 226.447 li
288.847 227.585 288.715 228.443 288.449 229.021 cv
288.183 229.598 287.783 230.05 287.249 230.375 cv
286.715 230.703 286.047 230.865 285.242 230.865 cv
284.437 230.865 283.765 230.703 283.226 230.375 cv
282.687 230.05 282.284 229.594 282.019 229.01 cv
281.753 228.425 281.621 227.544 281.621 226.372 cv
281.621 222.393 li
cp
f
292.136 219.327 mo
293.197 219.327 li
293.197 222.393 li
294.883 222.393 li
294.883 223.312 li
293.197 223.312 li
293.197 230.654 li
292.136 230.654 li
292.136 223.312 li
290.687 223.312 li
290.687 222.393 li
292.136 222.393 li
292.136 219.327 li
cp
f
300.458 223.206 mo
299.868 223.206 299.322 223.351 298.82 223.641 cv
298.321 223.933 297.921 224.34 297.627 224.867 cv
297.33 225.392 297.184 225.948 297.184 226.535 cv
297.184 227.116 297.333 227.671 297.63 228.204 cv
297.929 228.733 298.33 229.147 298.831 229.443 cv
299.334 229.739 299.873 229.885 300.451 229.885 cv
301.031 229.885 301.584 229.74 302.105 229.446 cv
302.624 229.154 303.024 228.756 303.306 228.257 cv
303.586 227.755 303.729 227.192 303.729 226.566 cv
303.729 225.61 303.413 224.811 302.782 224.168 cv
302.154 223.526 301.379 223.206 300.458 223.206 cv
cp
304.706 222.393 mo
304.706 230.654 li
303.657 230.654 li
303.657 229.234 li
303.213 229.775 302.714 230.183 302.159 230.455 cv
301.605 230.73 300.999 230.865 300.342 230.865 cv
299.172 230.865 298.173 230.442 297.346 229.594 cv
296.519 228.747 296.105 227.713 296.105 226.501 cv
296.105 225.311 296.522 224.294 297.358 223.448 cv
298.193 222.603 299.196 222.182 300.371 222.182 cv
301.049 222.182 301.663 222.326 302.213 222.614 cv
302.761 222.902 303.243 223.335 303.657 223.911 cv
303.657 222.393 li
304.706 222.393 li
cp
f
308.024 219.327 mo
309.085 219.327 li
309.085 222.393 li
310.771 222.393 li
310.771 223.312 li
309.085 223.312 li
309.085 230.654 li
308.024 230.654 li
308.024 223.312 li
306.572 223.312 li
306.572 222.393 li
308.024 222.393 li
308.024 219.327 li
cp
f
319.318 225.689 mo
319.179 225.123 318.971 224.668 318.699 224.33 cv
318.429 223.991 318.07 223.717 317.625 223.51 cv
317.178 223.302 316.71 223.199 316.218 223.199 cv
315.408 223.199 314.71 223.458 314.128 223.981 cv
313.703 224.36 313.381 224.929 313.163 225.689 cv
319.318 225.689 li
cp
319.318 227.914 mo
320.215 228.383 li
319.921 228.961 319.582 229.426 319.197 229.781 cv
318.813 230.134 318.379 230.405 317.897 230.588 cv
317.416 230.774 316.871 230.865 316.264 230.865 cv
314.915 230.865 313.863 230.424 313.103 229.541 cv
312.344 228.657 311.965 227.659 311.965 226.545 cv
311.965 225.498 312.284 224.564 312.929 223.746 cv
313.743 222.702 314.835 222.182 316.203 222.182 cv
317.61 222.182 318.736 222.715 319.578 223.783 cv
320.175 224.537 320.479 225.478 320.489 226.606 cv
313.057 226.606 li
313.078 227.566 313.384 228.353 313.976 228.966 cv
314.57 229.581 315.301 229.885 316.172 229.885 cv
316.594 229.885 317.001 229.813 317.4 229.667 cv
317.798 229.521 318.136 229.328 318.415 229.084 cv
318.693 228.842 318.995 228.452 319.318 227.914 cv
cp
f
333.728 225.689 mo
333.586 225.123 333.379 224.668 333.108 224.33 cv
332.837 223.991 332.479 223.717 332.032 223.51 cv
331.586 223.302 331.118 223.199 330.625 223.199 cv
329.816 223.199 329.119 223.458 328.536 223.981 cv
328.111 224.36 327.79 224.929 327.57 225.689 cv
333.728 225.689 li
cp
333.728 227.914 mo
334.623 228.383 li
334.329 228.961 333.99 229.426 333.604 229.781 cv
333.221 230.134 332.787 230.405 332.306 230.588 cv
331.825 230.774 331.279 230.865 330.672 230.865 cv
329.324 230.865 328.271 230.424 327.511 229.541 cv
326.75 228.657 326.371 227.659 326.371 226.545 cv
326.371 225.498 326.693 224.564 327.336 223.746 cv
328.152 222.702 329.244 222.182 330.611 222.182 cv
332.019 222.182 333.145 222.715 333.984 223.783 cv
334.583 224.537 334.887 225.478 334.896 226.606 cv
327.465 226.606 li
327.484 227.566 327.791 228.353 328.385 228.966 cv
328.978 229.581 329.709 229.885 330.58 229.885 cv
331.001 229.885 331.41 229.813 331.808 229.667 cv
332.205 229.521 332.544 229.328 332.823 229.084 cv
333.102 228.842 333.403 228.452 333.728 227.914 cv
cp
f
341.03 223.296 mo
340.347 224.003 li
339.779 223.452 339.224 223.175 338.68 223.175 cv
338.335 223.175 338.039 223.29 337.794 223.517 cv
337.547 223.746 337.425 224.009 337.425 224.314 cv
337.425 224.583 337.524 224.837 337.729 225.081 cv
337.932 225.329 338.357 225.62 339.007 225.955 cv
339.797 226.364 340.334 226.759 340.619 227.138 cv
340.898 227.523 341.037 227.956 341.037 228.437 cv
341.037 229.115 340.799 229.689 340.324 230.161 cv
339.846 230.63 339.251 230.865 338.537 230.865 cv
338.059 230.865 337.604 230.761 337.171 230.554 cv
336.738 230.347 336.38 230.061 336.097 229.696 cv
336.764 228.937 li
337.307 229.55 337.882 229.855 338.491 229.855 cv
338.918 229.855 339.28 229.719 339.579 229.446 cv
339.878 229.172 340.027 228.851 340.027 228.482 cv
340.027 228.179 339.93 227.908 339.73 227.669 cv
339.533 227.437 339.087 227.144 338.394 226.79 cv
337.646 226.406 337.14 226.026 336.869 225.652 cv
336.602 225.276 336.467 224.848 336.467 224.368 cv
336.467 223.74 336.681 223.219 337.109 222.803 cv
337.54 222.388 338.079 222.182 338.733 222.182 cv
339.494 222.182 340.26 222.551 341.03 223.296 cv
cp
f
135.042 241.05 mo
136.105 241.05 li
136.105 249.31 li
135.042 249.31 li
135.042 241.05 li
cp
135.57 237.649 mo
135.812 237.649 136.018 237.736 136.189 237.908 cv
136.36 238.08 136.446 238.288 136.446 238.53 cv
136.446 238.768 136.36 238.972 136.189 239.146 cv
136.018 239.317 135.812 239.403 135.57 239.403 cv
135.333 239.403 135.128 239.317 134.958 239.146 cv
134.786 238.972 134.7 238.768 134.7 238.53 cv
134.7 238.288 134.786 238.08 134.958 237.908 cv
135.128 237.736 135.333 237.649 135.57 237.649 cv
cp
f
142.58 241.863 mo
141.66 241.863 140.887 242.184 140.258 242.826 cv
139.629 243.468 139.316 244.266 139.316 245.223 cv
139.316 245.85 139.456 246.414 139.735 246.914 cv
140.016 247.414 140.417 247.81 140.94 248.104 cv
141.462 248.396 142.014 248.543 142.594 248.543 cv
143.166 248.543 143.702 248.395 144.204 248.099 cv
144.706 247.805 145.106 247.391 145.404 246.86 cv
145.702 246.33 145.852 245.773 145.852 245.192 cv
145.852 244.605 145.704 244.049 145.408 243.524 cv
145.112 242.998 144.715 242.59 144.215 242.299 cv
143.715 242.009 143.17 241.863 142.58 241.863 cv
cp
138.329 241.05 mo
139.391 241.05 li
139.391 242.57 li
139.811 241.993 140.293 241.559 140.84 241.271 cv
141.385 240.983 141.995 240.838 142.667 240.838 cv
143.84 240.838 144.844 241.261 145.677 242.106 cv
146.512 242.951 146.929 243.968 146.929 245.158 cv
146.929 246.373 146.516 247.403 145.688 248.251 cv
144.862 249.099 143.865 249.524 142.697 249.524 cv
142.041 249.524 141.437 249.386 140.885 249.113 cv
140.333 248.84 139.836 248.432 139.391 247.89 cv
139.391 252.331 li
138.329 252.331 li
138.329 241.05 li
cp
f
153.072 241.954 mo
152.388 242.661 li
151.82 242.108 151.265 241.833 150.72 241.833 cv
150.376 241.833 150.081 241.946 149.834 242.174 cv
149.588 242.402 149.465 242.667 149.465 242.97 cv
149.465 243.24 149.566 243.494 149.77 243.738 cv
149.973 243.985 150.398 244.278 151.047 244.611 cv
151.838 245.021 152.376 245.416 152.66 245.795 cv
152.939 246.18 153.078 246.613 153.078 247.093 cv
153.078 247.773 152.841 248.346 152.364 248.817 cv
151.888 249.288 151.292 249.524 150.578 249.524 cv
150.1 249.524 149.646 249.419 149.212 249.211 cv
148.779 249.004 148.421 248.719 148.136 248.354 cv
148.805 247.594 li
149.348 248.207 149.923 248.513 150.533 248.513 cv
150.958 248.513 151.321 248.376 151.621 248.102 cv
151.919 247.831 152.069 247.508 152.069 247.138 cv
152.069 246.835 151.97 246.564 151.772 246.326 cv
151.575 246.094 151.128 245.801 150.434 245.446 cv
149.688 245.062 149.18 244.681 148.912 244.308 cv
148.644 243.934 148.508 243.504 148.508 243.024 cv
148.508 242.396 148.723 241.875 149.152 241.459 cv
149.58 241.045 150.121 240.838 150.775 240.838 cv
151.535 240.838 152.3 241.21 153.072 241.954 cv
cp
f
154.816 241.05 mo
155.88 241.05 li
155.88 244.907 li
155.88 245.849 155.93 246.496 156.032 246.85 cv
156.184 247.358 156.474 247.757 156.901 248.049 cv
157.331 248.344 157.841 248.49 158.434 248.49 cv
159.027 248.49 159.529 248.346 159.942 248.062 cv
160.356 247.776 160.642 247.4 160.799 246.933 cv
160.904 246.614 160.958 245.94 160.958 244.907 cv
160.958 241.05 li
162.044 241.05 li
162.044 245.104 li
162.044 246.244 161.911 247.101 161.645 247.678 cv
161.379 248.255 160.979 248.707 160.446 249.034 cv
159.912 249.359 159.243 249.524 158.438 249.524 cv
157.633 249.524 156.961 249.359 156.422 249.034 cv
155.883 248.707 155.48 248.251 155.215 247.667 cv
154.949 247.083 154.816 246.203 154.816 245.028 cv
154.816 241.05 li
cp
f
164.396 241.05 mo
165.459 241.05 li
165.459 242.477 li
165.83 241.952 166.209 241.567 166.6 241.324 cv
167.137 241 167.702 240.838 168.294 240.838 cv
168.695 240.838 169.074 240.917 169.435 241.073 cv
169.793 241.231 170.088 241.44 170.315 241.7 cv
170.544 241.961 170.741 242.334 170.908 242.82 cv
171.262 242.17 171.704 241.68 172.234 241.343 cv
172.763 241.006 173.334 240.838 173.945 240.838 cv
174.516 240.838 175.02 240.983 175.457 241.271 cv
175.893 241.559 176.217 241.961 176.429 242.477 cv
176.642 242.994 176.747 243.769 176.747 244.801 cv
176.747 249.31 li
175.663 249.31 li
175.663 244.801 li
175.663 243.917 175.599 243.306 175.473 242.974 cv
175.347 242.644 175.132 242.377 174.826 242.174 cv
174.52 241.97 174.156 241.872 173.733 241.872 cv
173.219 241.872 172.748 242.023 172.321 242.326 cv
171.895 242.629 171.583 243.035 171.387 243.541 cv
171.191 244.046 171.092 244.891 171.092 246.077 cv
171.092 249.31 li
170.03 249.31 li
170.03 245.081 li
170.03 244.084 169.968 243.408 169.843 243.051 cv
169.72 242.694 169.502 242.409 169.195 242.193 cv
168.885 241.977 168.519 241.872 168.093 241.872 cv
167.603 241.872 167.144 242.019 166.716 242.314 cv
166.288 242.611 165.971 243.01 165.767 243.509 cv
165.562 244.011 165.459 244.778 165.459 245.811 cv
165.459 249.31 li
164.396 249.31 li
164.396 241.05 li
cp
f
183.132 241.05 mo
184.195 241.05 li
184.195 249.31 li
183.132 249.31 li
183.132 241.05 li
cp
183.661 237.649 mo
183.902 237.649 184.108 237.736 184.28 237.908 cv
184.451 238.08 184.538 238.288 184.538 238.53 cv
184.538 238.768 184.451 238.972 184.28 239.146 cv
184.108 239.317 183.902 239.403 183.661 239.403 cv
183.423 239.403 183.219 239.317 183.048 239.146 cv
182.876 238.972 182.791 238.768 182.791 238.53 cv
182.791 238.288 182.876 238.08 183.048 237.908 cv
183.219 237.736 183.423 237.649 183.661 237.649 cv
cp
f
190.385 241.863 mo
189.794 241.863 189.249 242.009 188.748 242.299 cv
188.247 242.59 187.85 242.998 187.554 243.524 cv
187.257 244.049 187.11 244.605 187.11 245.192 cv
187.11 245.773 187.26 246.33 187.557 246.86 cv
187.854 247.391 188.256 247.805 188.759 248.099 cv
189.262 248.395 189.801 248.543 190.378 248.543 cv
190.958 248.543 191.511 248.396 192.031 248.104 cv
192.552 247.81 192.952 247.414 193.233 246.914 cv
193.512 246.414 193.654 245.85 193.654 245.223 cv
193.654 244.266 193.339 243.468 192.709 242.826 cv
192.08 242.184 191.306 241.863 190.385 241.863 cv
cp
194.633 241.05 mo
194.633 249.31 li
193.585 249.31 li
193.585 247.89 li
193.139 248.432 192.64 248.84 192.085 249.113 cv
191.532 249.386 190.926 249.524 190.268 249.524 cv
189.1 249.524 188.1 249.099 187.272 248.251 cv
186.445 247.403 186.031 246.373 186.031 245.158 cv
186.031 243.968 186.449 242.951 187.284 242.106 cv
188.119 241.261 189.124 240.838 190.298 240.838 cv
190.977 240.838 191.59 240.983 192.14 241.271 cv
192.688 241.559 193.17 241.993 193.585 242.57 cv
193.585 241.05 li
194.633 241.05 li
cp
f
205.041 242.765 mo
204.198 243.291 li
203.47 242.324 202.477 241.841 201.218 241.841 cv
200.212 241.841 199.377 242.164 198.712 242.81 cv
198.047 243.458 197.714 244.244 197.714 245.169 cv
197.714 245.771 197.868 246.337 198.174 246.869 cv
198.479 247.397 198.899 247.81 199.432 248.104 cv
199.965 248.396 200.563 248.543 201.225 248.543 cv
202.438 248.543 203.43 248.059 204.198 247.093 cv
205.041 247.648 li
204.645 248.241 204.116 248.703 203.45 249.032 cv
202.784 249.358 202.027 249.524 201.176 249.524 cv
199.871 249.524 198.788 249.107 197.928 248.279 cv
197.067 247.448 196.638 246.438 196.638 245.249 cv
196.638 244.448 196.838 243.708 197.24 243.02 cv
197.643 242.335 198.195 241.8 198.899 241.416 cv
199.602 241.031 200.39 240.838 201.26 240.838 cv
201.806 240.838 202.334 240.922 202.843 241.088 cv
203.351 241.255 203.783 241.474 204.137 241.741 cv
204.491 242.01 204.792 242.351 205.041 242.765 cv
cp
f
206.946 241.05 mo
208.008 241.05 li
208.008 244.907 li
208.008 245.849 208.059 246.496 208.161 246.85 cv
208.312 247.358 208.603 247.757 209.031 248.049 cv
209.46 248.344 209.97 248.49 210.563 248.49 cv
211.155 248.49 211.659 248.346 212.071 248.062 cv
212.485 247.776 212.77 247.4 212.927 246.933 cv
213.034 246.614 213.087 245.94 213.087 244.907 cv
213.087 241.05 li
214.172 241.05 li
214.172 245.104 li
214.172 246.244 214.04 247.101 213.773 247.678 cv
213.508 248.255 213.109 248.707 212.575 249.034 cv
212.041 249.359 211.372 249.524 210.567 249.524 cv
209.762 249.524 209.09 249.359 208.551 249.034 cv
208.012 248.707 207.609 248.251 207.343 247.667 cv
207.079 247.083 206.946 246.203 206.946 245.028 cv
206.946 241.05 li
cp
f
216.374 237.863 mo
217.438 237.863 li
217.438 249.31 li
216.374 249.31 li
216.374 237.863 li
cp
f
219.487 241.05 mo
220.55 241.05 li
220.55 249.31 li
219.487 249.31 li
219.487 241.05 li
cp
220.015 237.649 mo
220.257 237.649 220.462 237.736 220.635 237.908 cv
220.805 238.08 220.892 238.288 220.892 238.53 cv
220.892 238.768 220.805 238.972 220.635 239.146 cv
220.462 239.317 220.257 239.403 220.015 239.403 cv
219.777 239.403 219.573 239.317 219.402 239.146 cv
219.23 238.972 219.146 238.768 219.146 238.53 cv
219.146 238.288 219.23 238.08 219.402 237.908 cv
219.573 237.736 219.777 237.649 220.015 237.649 cv
cp
f
226.91 241.954 mo
226.228 242.661 li
225.659 242.108 225.104 241.833 224.561 241.833 cv
224.215 241.833 223.92 241.946 223.674 242.174 cv
223.427 242.402 223.305 242.667 223.305 242.97 cv
223.305 243.24 223.406 243.494 223.609 243.738 cv
223.813 243.985 224.238 244.278 224.886 244.611 cv
225.678 245.021 226.216 245.416 226.5 245.795 cv
226.779 246.18 226.917 246.613 226.917 247.093 cv
226.917 247.773 226.681 248.346 226.204 248.817 cv
225.727 249.288 225.132 249.524 224.417 249.524 cv
223.939 249.524 223.485 249.419 223.051 249.211 cv
222.618 249.004 222.26 248.719 221.977 248.354 cv
222.644 247.594 li
223.188 248.207 223.762 248.513 224.372 248.513 cv
224.798 248.513 225.16 248.376 225.46 248.102 cv
225.759 247.831 225.908 247.508 225.908 247.138 cv
225.908 246.835 225.81 246.564 225.612 246.326 cv
225.415 246.094 224.968 245.801 224.273 245.446 cv
223.527 245.062 223.02 244.681 222.751 244.308 cv
222.482 243.934 222.347 243.504 222.347 243.024 cv
222.347 242.396 222.562 241.875 222.991 241.459 cv
223.419 241.045 223.96 240.838 224.613 240.838 cv
225.374 240.838 226.14 241.21 226.91 241.954 cv
cp
f
228.634 241.05 mo
229.698 241.05 li
229.698 249.31 li
228.634 249.31 li
228.634 241.05 li
cp
229.162 237.649 mo
229.404 237.649 229.61 237.736 229.781 237.908 cv
229.953 238.08 230.039 238.288 230.039 238.53 cv
230.039 238.768 229.953 238.972 229.781 239.146 cv
229.61 239.317 229.404 239.403 229.162 239.403 cv
228.925 239.403 228.721 239.317 228.55 239.146 cv
228.378 238.972 228.293 238.768 228.293 238.53 cv
228.293 238.288 228.378 238.08 228.55 237.908 cv
228.721 237.736 228.925 237.649 229.162 237.649 cv
cp
f
236.604 237.649 mo
236.847 237.649 237.054 237.736 237.224 237.908 cv
237.393 238.08 237.479 238.288 237.479 238.53 cv
237.479 238.768 237.393 238.972 237.224 239.146 cv
237.054 239.317 236.847 239.403 236.604 239.403 cv
236.362 239.403 236.155 239.317 235.986 239.146 cv
235.816 238.972 235.732 238.768 235.732 238.53 cv
235.732 238.288 235.816 238.08 235.986 237.908 cv
236.155 237.736 236.362 237.649 236.604 237.649 cv
cp
236.081 241.05 mo
237.159 241.05 li
237.159 250.555 li
237.159 251.248 237.034 251.752 236.784 252.069 cv
236.533 252.385 236.19 252.544 235.754 252.544 cv
235.396 252.544 234.991 252.458 234.54 252.287 cv
234.54 251.33 li
234.823 251.476 235.08 251.549 235.307 251.549 cv
235.595 251.549 235.81 251.432 235.952 251.192 cv
236.038 251.042 236.081 250.724 236.081 250.243 cv
236.081 241.05 li
cp
f
239.232 241.05 mo
240.295 241.05 li
240.295 244.907 li
240.295 245.849 240.346 246.496 240.447 246.85 cv
240.598 247.358 240.888 247.757 241.316 248.049 cv
241.745 248.344 242.256 248.49 242.849 248.49 cv
243.442 248.49 243.946 248.346 244.357 248.062 cv
244.771 247.776 245.056 247.4 245.214 246.933 cv
245.319 246.614 245.374 245.94 245.374 244.907 cv
245.374 241.05 li
246.458 241.05 li
246.458 245.104 li
246.458 246.244 246.326 247.101 246.06 247.678 cv
245.795 248.255 245.396 248.707 244.861 249.034 cv
244.326 249.359 243.658 249.524 242.854 249.524 cv
242.048 249.524 241.375 249.359 240.837 249.034 cv
240.297 248.707 239.896 248.251 239.629 247.667 cv
239.365 247.083 239.232 246.203 239.232 245.028 cv
239.232 241.05 li
cp
f
252.972 241.954 mo
252.289 242.661 li
251.72 242.108 251.166 241.833 250.622 241.833 cv
250.277 241.833 249.981 241.946 249.736 242.174 cv
249.488 242.402 249.367 242.667 249.367 242.97 cv
249.367 243.24 249.467 243.494 249.671 243.738 cv
249.873 243.985 250.3 244.278 250.947 244.611 cv
251.74 245.021 252.278 245.416 252.562 245.795 cv
252.84 246.18 252.979 246.613 252.979 247.093 cv
252.979 247.773 252.742 248.346 252.265 248.817 cv
251.789 249.288 251.192 249.524 250.478 249.524 cv
250.001 249.524 249.547 249.419 249.113 249.211 cv
248.679 249.004 248.321 248.719 248.038 248.354 cv
248.705 247.594 li
249.248 248.207 249.824 248.513 250.434 248.513 cv
250.859 248.513 251.222 248.376 251.521 248.102 cv
251.821 247.831 251.969 247.508 251.969 247.138 cv
251.969 246.835 251.871 246.564 251.673 246.326 cv
251.476 246.094 251.029 245.801 250.334 245.446 cv
249.587 245.062 249.081 244.681 248.813 244.308 cv
248.544 243.934 248.409 243.504 248.409 243.024 cv
248.409 242.396 248.623 241.875 249.052 241.459 cv
249.48 241.045 250.022 240.838 250.676 240.838 cv
251.436 240.838 252.201 241.21 252.972 241.954 cv
cp
f
255.781 237.983 mo
256.842 237.983 li
256.842 241.05 li
258.527 241.05 li
258.527 241.97 li
256.842 241.97 li
256.842 249.31 li
255.781 249.31 li
255.781 241.97 li
254.33 241.97 li
254.33 241.05 li
255.781 241.05 li
255.781 237.983 li
cp
f
264.028 241.878 mo
263.145 241.878 262.386 242.205 261.751 242.858 cv
261.116 243.509 260.798 244.298 260.798 245.226 cv
260.798 245.825 260.943 246.379 261.232 246.896 cv
261.522 247.414 261.913 247.81 262.406 248.092 cv
262.898 248.372 263.44 248.513 264.028 248.513 cv
264.619 248.513 265.159 248.372 265.652 248.092 cv
266.144 247.81 266.536 247.414 266.825 246.896 cv
267.114 246.379 267.259 245.825 267.259 245.226 cv
267.259 244.298 266.94 243.509 266.303 242.858 cv
265.665 242.205 264.908 241.878 264.028 241.878 cv
cp
264.032 240.838 mo
265.304 240.838 266.359 241.297 267.195 242.22 cv
267.957 243.06 268.336 244.055 268.336 245.203 cv
268.336 246.356 267.934 247.366 267.13 248.228 cv
266.327 249.09 265.294 249.524 264.032 249.524 cv
262.766 249.524 261.729 249.09 260.925 248.228 cv
260.121 247.366 259.722 246.356 259.722 245.203 cv
259.722 244.059 260.101 243.068 260.86 242.227 cv
261.697 241.302 262.754 240.838 264.032 240.838 cv
cp
f
274.449 237.863 mo
275.511 237.863 li
275.511 249.31 li
274.449 249.31 li
274.449 237.863 li
cp
f
281.625 241.878 mo
280.74 241.878 279.982 242.205 279.348 242.858 cv
278.711 243.509 278.395 244.298 278.395 245.226 cv
278.395 245.825 278.54 246.379 278.829 246.896 cv
279.118 247.414 279.51 247.81 280.002 248.092 cv
280.495 248.372 281.036 248.513 281.625 248.513 cv
282.215 248.513 282.754 248.372 283.247 248.092 cv
283.739 247.81 284.131 247.414 284.42 246.896 cv
284.709 246.379 284.854 245.825 284.854 245.226 cv
284.854 244.298 284.537 243.509 283.899 242.858 cv
283.262 242.205 282.504 241.878 281.625 241.878 cv
cp
281.628 240.838 mo
282.9 240.838 283.955 241.297 284.792 242.22 cv
285.552 243.06 285.933 244.055 285.933 245.203 cv
285.933 246.356 285.531 247.366 284.727 248.228 cv
283.924 249.09 282.891 249.524 281.628 249.524 cv
280.361 249.524 279.326 249.09 278.521 248.228 cv
277.718 247.366 277.316 246.356 277.316 245.203 cv
277.316 244.059 277.697 243.068 278.457 242.227 cv
279.294 241.302 280.351 240.838 281.628 240.838 cv
cp
f
292.051 241.954 mo
291.368 242.661 li
290.8 242.108 290.244 241.833 289.701 241.833 cv
289.356 241.833 289.061 241.946 288.815 242.174 cv
288.567 242.402 288.445 242.667 288.445 242.97 cv
288.445 243.24 288.547 243.494 288.75 243.738 cv
288.952 243.985 289.38 244.278 290.026 244.611 cv
290.818 245.021 291.356 245.416 291.642 245.795 cv
291.919 246.18 292.059 246.613 292.059 247.093 cv
292.059 247.773 291.82 248.346 291.344 248.817 cv
290.868 249.288 290.272 249.524 289.558 249.524 cv
289.08 249.524 288.626 249.419 288.191 249.211 cv
287.759 249.004 287.401 248.719 287.116 248.354 cv
287.784 247.594 li
288.328 248.207 288.902 248.513 289.513 248.513 cv
289.938 248.513 290.302 248.376 290.601 248.102 cv
290.899 247.831 291.049 247.508 291.049 247.138 cv
291.049 246.835 290.951 246.564 290.753 246.326 cv
290.555 246.094 290.109 245.801 289.414 245.446 cv
288.667 245.062 288.161 244.681 287.892 244.308 cv
287.623 243.934 287.487 243.504 287.487 243.024 cv
287.487 242.396 287.702 241.875 288.132 241.459 cv
288.559 241.045 289.101 240.838 289.754 240.838 cv
290.514 240.838 291.281 241.21 292.051 241.954 cv
cp
f
297.84 241.878 mo
296.955 241.878 296.197 242.205 295.563 242.858 cv
294.928 243.509 294.609 244.298 294.609 245.226 cv
294.609 245.825 294.755 246.379 295.044 246.896 cv
295.334 247.414 295.725 247.81 296.217 248.092 cv
296.71 248.372 297.251 248.513 297.84 248.513 cv
298.43 248.513 298.97 248.372 299.463 248.092 cv
299.956 247.81 300.347 247.414 300.636 246.896 cv
300.925 246.379 301.07 245.825 301.07 245.226 cv
301.07 244.298 300.752 243.509 300.113 242.858 cv
299.477 242.205 298.719 241.878 297.84 241.878 cv
cp
297.843 240.838 mo
299.115 240.838 300.17 241.297 301.007 242.22 cv
301.769 243.06 302.147 244.055 302.147 245.203 cv
302.147 246.356 301.746 247.366 300.942 248.228 cv
300.138 249.09 299.105 249.524 297.843 249.524 cv
296.576 249.524 295.541 249.09 294.736 248.228 cv
293.934 247.366 293.533 246.356 293.533 245.203 cv
293.533 244.059 293.912 243.068 294.672 242.227 cv
295.509 241.302 296.565 240.838 297.843 240.838 cv
cp
f
308.419 241.05 mo
309.482 241.05 li
309.482 242.531 li
309.907 241.964 310.377 241.541 310.895 241.259 cv
311.409 240.978 311.971 240.838 312.579 240.838 cv
313.195 240.838 313.743 240.995 314.222 241.309 cv
314.7 241.623 315.053 242.044 315.28 242.577 cv
315.51 243.108 315.622 243.935 315.622 245.058 cv
315.622 249.31 li
314.561 249.31 li
314.561 245.37 li
314.561 244.418 314.521 243.783 314.441 243.463 cv
314.318 242.918 314.08 242.506 313.733 242.231 cv
313.384 241.956 312.929 241.817 312.365 241.817 cv
311.724 241.817 311.147 242.03 310.639 242.456 cv
310.13 242.88 309.795 243.406 309.633 244.033 cv
309.532 244.443 309.482 245.193 309.482 246.282 cv
309.482 249.31 li
308.419 249.31 li
308.419 241.05 li
cp
f
317.762 241.05 mo
318.825 241.05 li
318.825 244.907 li
318.825 245.849 318.875 246.496 318.979 246.85 cv
319.13 247.358 319.42 247.757 319.847 248.049 cv
320.276 248.344 320.786 248.49 321.379 248.49 cv
321.973 248.49 322.476 248.346 322.889 248.062 cv
323.302 247.776 323.588 247.4 323.745 246.933 cv
323.851 246.614 323.904 245.94 323.904 244.907 cv
323.904 241.05 li
324.99 241.05 li
324.99 245.104 li
324.99 246.244 324.857 247.101 324.59 247.678 cv
324.324 248.255 323.926 248.707 323.391 249.034 cv
322.857 249.359 322.188 249.524 321.384 249.524 cv
320.58 249.524 319.907 249.359 319.368 249.034 cv
318.828 248.707 318.427 248.251 318.161 247.667 cv
317.895 247.083 317.762 246.203 317.762 245.028 cv
317.762 241.05 li
cp
f
327.191 237.863 mo
328.254 237.863 li
328.254 249.31 li
327.191 249.31 li
327.191 237.863 li
cp
f
330.304 237.863 mo
331.367 237.863 li
331.367 249.31 li
330.304 249.31 li
330.304 237.863 li
cp
f
337.558 241.863 mo
336.965 241.863 336.42 242.009 335.919 242.299 cv
335.418 242.59 335.02 242.998 334.725 243.524 cv
334.43 244.049 334.281 244.605 334.281 245.192 cv
334.281 245.773 334.431 246.33 334.728 246.86 cv
335.026 247.391 335.428 247.805 335.93 248.099 cv
336.434 248.395 336.972 248.543 337.549 248.543 cv
338.13 248.543 338.683 248.396 339.202 248.104 cv
339.724 247.81 340.123 247.414 340.405 246.914 cv
340.684 246.414 340.825 245.85 340.825 245.223 cv
340.825 244.266 340.51 243.468 339.881 242.826 cv
339.251 242.184 338.479 241.863 337.558 241.863 cv
cp
341.803 241.05 mo
341.803 249.31 li
340.756 249.31 li
340.756 247.89 li
340.31 248.432 339.811 248.84 339.257 249.113 cv
338.703 249.386 338.097 249.524 337.438 249.524 cv
336.271 249.524 335.271 249.099 334.443 248.251 cv
333.616 247.403 333.203 246.373 333.203 245.158 cv
333.203 243.968 333.62 242.951 334.455 242.106 cv
335.291 241.261 336.295 240.838 337.469 240.838 cv
338.148 240.838 338.762 240.983 339.312 241.271 cv
339.859 241.559 340.341 241.993 340.756 242.57 cv
340.756 241.05 li
341.803 241.05 li
cp
f
345.363 247.639 mo
345.622 247.639 345.843 247.732 346.025 247.914 cv
346.208 248.096 346.299 248.318 346.299 248.582 cv
346.299 248.84 346.208 249.061 346.025 249.245 cv
345.843 249.429 345.622 249.524 345.363 249.524 cv
345.105 249.524 344.887 249.429 344.704 249.245 cv
344.521 249.061 344.43 248.84 344.43 248.582 cv
344.43 248.318 344.521 248.096 344.704 247.914 cv
344.887 247.732 345.105 247.639 345.363 247.639 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Administrator) ()
%%Title: (quote round box.eps)
%%CreationDate: 7/30/2015 10:21 AM
%AI9_DataStream
%Gb",KBj4b4e+!6[Y&""=R;<e,S:+7uaD+C*)Ds7]5r^>+JZqfppP7q@^U80UmXlY&\L0>oi(OiB?E1$+C[4%+rVQCk^KITrcgn3Q
%<\pUcB7)Am3GuhCr83"9J,aeB5O&`eaa0Oi6Gon`)?I3gZ=[Kid)F1SL5XlFX_RkkCA.?^X_QAQ(0Z\uVn8BHr2__24-_VsUlp!F
%2&`S=R=(c-]mr;W/bcb[Da`\fkH`OZ^u,@&O/_`?0(a_rn?mdb262^c/_YjV;/PV354?oIr\;)HLjD5").k`<U]&HMNm)7XT`5ck
%mRLp_DQd"'eQ^;EMqBkqjmf,O;7j[e^gJi+r3lYJAr=uMV;LJk2At$P?M5-j35e^,[uHJ%p$uK7PQ!AVJ,IS#@Y"Ap`PhdVZ`C;!
%[?\!Q%aVJj=2[*MDVuBM=??oi1Ttn!""b(IaMYpZZJDJO,$J-i0XB%c%,n\h=uM)BTk:!^=UDd#Dh+L6T(l8:Gk>W3qQZK7*`ZrP
%8$$L/dlXN.#M.3X/-c;*&FfXI,O2pUepG1[MdR]LI]$2()SC*bJ%8Fm[FD`Q^I='u9'7bjJZQ9uI:W7j-8=LnYPOU?Q(LpO.gHKD
%GM?!dYk=;9?*S4aM&+&;ge;DYEb/K?j+l??aUtd>G*^%o<nRSKg[3M:lHRioe$Ll],K+T.;m.Wao\gJ_7JLKtm9_:A#rI4s?8$%c
%]M7_%YbO[>-/(?jEu^eG02J%%3\ns3TlGNL.M't`/67'3?qB4eYUk98niqK.<=JZ-D>`dHpcAoSGG-.Q[Z,cR)aC`Ir7&1NdrLkf
%F#VF_AtFeH4:dp,*]EW&E`ikjL=dg]YtYKge3+5F=VtU(I"f>?=eUAj$3fd".,ZJ,!k'PEn^DO3o;I#HN"*p@m_hXPb)?qYae*$D
%q71?0GPm*<O=pHjc&aPL/UrLCiGWOb7,`'Y?*])E,@1'`h]Ykl)i%m7n^'f@r[-@h"bMjhS<\BB(go-F%=_lWEZ&;+PmDZt2"Ql5
%Ktk/K;pPS#qMZH@:WU_UP"k]VRj!dd)i*F,ABO^(Z#KI>Rj!c3V3s3r)/7%Hp^RU@3PaMRGm*)ECkae+DdH*Q(M5:0J9+=c+QT@E
%ae`J]RJ5?mR4!9te2%,Y4JTnPo@S*:\;C."2FsL*;'_771ZeNhdYPZC)9Y(haF)slp`%s1J^@[p\_Kd#5+[BQ?&Gs&)C]l`4GsUU
%L"mqoD419[+7l(:B'']rEa^5AN'9.`oCMH6!.W9Y!dWY$/D7]0bTIt$9Kt)NCA2ckkUq(_g1QROC*0[Ub<;LDOh*&WOum$Q[cFi"
%%E(iDPI`9189?0#Eb6A[]:,T_5PS<Y8lPXi(4W.ZnrMi#HhE_TTY'MF8H%Wlhrjb!0E2.U^CPp@p-AQ:Er;'rb<Peb^K5p\#J(_0
%$rVTNVc;[Ml7`/SnW2&g\;'dJf9bC<GPi7k[%)a.QA[Zj0c0UR^Z\je?Ol"$d@e7?molmU(NVmQkQU(RBMgT`T4<NK6\@UVO,D_T
%iGME-/I15;F(off&]_0Yr4jtOYuqtE>,?6^]#1c%VA-K?Ll78u!6]CNVi2Xq+i&%TK]JM^4@0TT*0U>Yfb#s7LF@3)%+l;M0O,qY
%(Z6")M,Wmhd+u&@76.\j#gEE_,n4QD/%lS5!+I((OCt0&/4KPRj`+<f(e?oJD(u@HWdp]S)gPraGd=:pWKe/2:?jWeQM<Ub[u.Hl
%K8^d-$(,kD.@CLP"U[2+:LXDJKlTXC#bt%biQt"D-eRX=8Vf/^]BFo(fIj?eckcsji:lbVJ/g?@/n.<Y#MgB94P<FenteaiX?9=p
%l\#o`mF[-f-ta#Y(]H^,0GgYi[O-iQA9X36E`mM0$ei.2?I!FkMQF)tV`\f63Ar%K(V"/'iGVkV/TF>($$W;p9eiAUY4uE%$86:p
%L*a+PRS$<_H7_KA7W'p&!oK(t/>8=B3/EPC\nh3dDMJ;XG]4h5nGr2K",(-D]Y[06+P*0oN"Cn&Y:5T19FcXGMEUDNKVn?p\kl9p
%#aQ+UcjJ\pQ[=^!3>V2ef0*ZeHrkHDGFi3li26W$r*8T4">N/6*@V-F,c'%47%3=Q`nQCfY%Y+'j6543S7&2m.etaK[&T8FSX;70
%)_4Q\)ROIH7YqtgOq8@e,NKkEW2s%i\(L.In`"JWO["kkKhphsfH6Qi/;KmP;r^aHZ=9KV\+Dkm/gfrq*fcJMS<K5QNe@8Mpu+L9
%);Bi^H/?B#,5t]4Nu2`N9j?=:Z-FjmohTC%Ml(Qd-]iT6!kDmbna:Fb3O3-IhFPOje%,pD/r>Q3(G4"a-(/Q^>MBthZC[tT!nC:Q
%*3$N&TP4*l<TT(jV4!G#NN!Y%'+:)/h@3)J/!if.^Sfp]B'JWtCI7@4Z6X!U/XRH@=%&\6V#ACS<bN@<=DtVt31-4iViV#PVh4Lk
%5>nrN?b&T>d^#(";>)UN.7jjqaXl9Ld[/A7bHDb.=3B$cZB0El)p?ODST&&;;_nsh`de&78l5#\lcIJp8.fJ>RM]VmQE8#IERk&O
%VKF`FV+ej&,jK4)j**g>O`a]F?6'P*^l%/M1\#87mug8IJeD6]WA(<ePVfZI'C(2$0lBJ))hjF69W[R,5k/;S"F2CEBhHO5LnWkM
%-8O/CgfXEV;S$u;VC>G\^O'&V].W2CLm7IfAR;O5i@/'8,Z#meOteD*as+f:@M#YM95*F@&i%@4(0]C&(`D+.[#b>7L,"q:%nK^J
%b[8=WhZpf9RZUME7WLU--mQRsj_&TE;Kl]0KIep:Y%3g3js(Zp+m1/k64GJ'Nu19d!%D[6T.D,U<Dq051.mq`\/O`SW<c-H(j!C7
%a0R:5;_DFbDt6iK4JfcFfZ5\V-'c]<S`;Sojsq"j`"65:a'PR><*;Pt$m(EllD-][$;4H,=*5S][BW@5Z(r/p>b-q<<h9Nq(,h1;
%P+7l.8CqV!romUI%<Paa?rH;Fihh[+*+a[6#.bXiR9[Nf!aUJD""&/QD@,hT8!.@g+XuYS<(^S!JkU_VHPc%r/+aHh.lQ,Z:ZA9d
%S(P:]35)SsMHqsI[:T5;=UCpuWCZ_o-rq\H8TP,RD9'KI!cul6#n8@GW`9j1=o?lI8=aej#7Mf!TGY_s#L&%G7dP?\Gj+"qg,?NX
%U?d<^?(e!@/7suKD=T"YI&hL8c4*AF.I!5c[SDYe:D1j`>$'K=K<hWaQ)d[80Qa3Lk-2cjq/FJ:;D)/n9dC`SL%JboAIE"CM;<$n
%O&E]gbSoFjVjNE]<(&/JDDJ.i9cSqbT@6$A5Qi:#,Z8X)5Z7f`LS0YZ[=GVEZ+R>"b)7iM(-sTC`S15^",<h.$lCE.B8A.W"(89$
%Ug!==#gR/#\6[Z`08-As]TD\)(d3o?7<=m+&A_aLq=AY!U?^Z/;@;O<hTN!TC8nL.ES<i>Q>"H`KGmn"A>`BNQ4s(VJjNG@0M]'t
%?qf^K:i):N.2sIc1J;J-_PEi*6uq-UC)9$_UUnNS<EMItSMZ$\Od2'M&bdTWNp%1WUn:c!34U?I'U3G`CT0ghBN(lXcBRI&'7k+m
%J=mBiXS_$X(V-Xj::R!;<gcS'<tZW:;#X:-*Kc-m@`&PAPXV*5'^@DRR8uV]TcIme3GP<71.*f5=-At#9C7"=n)JdRE^@3hEJdsW
%_A"cG'tb=1EM0ERgHj:&[&a-OP0:_ciMIfO'?HPnNDqNl)7);,k_R/$B?@^[eSLD+YXO:O+tesd=c;n$VGps?o%BU.qa5QTO9jR+
%^nE.]8tH6+.k;EW8ie>GJ19`l>eu]Ai02Yo:1h^l](CIh;%`))*X8RWP!.:+9-ZFW?^s!sjat9F^9-N1Mn)0"J5MW['1ft/6":i]
%r/6-9=`YNq?GE;u9q7.jIkj22M>%ir+XLOcTCAo`JYl9]MIp##H:(hj)s-AKat<6Y8:ZZ'NA/Wnigdou?&MQB46b0*$T<MQ'?Nqt
%(JaO#kA?s:nE!<!NAY>D,W88RBZ%]V:k_5g)g"=HUti$(YN02rs'*_%@_:DK2/?=!,$l$gQWR@C"Y3j&ZI`eJ>%chnonGXlLjK$n
%mp)YUJE']_kYQ2,ais4g^#I@ij1Ro(52>M3qX(EIC$YNN(36h68X.o/oZf8g7b"M^(Gc-4D_p/PT\K-(,qrQ&[hm'nH1:FrUt)Df
%0B3(U8GkNn:ktT6($Na*SpZHr4m4HtlIA28hM]ej[>0H)S`XgR.IQi?kF'4gWt?R*)MjG`icCY3pR.IAil8k_J.JQ%n3Wu!W1S2^
%mIPXHf_@ftO!bjn2pJ_k7\pctOm"Cp4iP18"M.4+2@SX,8+@9pHVDIB\59*rAdu>u`_i7E?+.$#203_CBd4I!QF3#mn1R8/Xj3ai
%)[%`Ms,7ku[^H/jU]M2N<BBMH>H:V8<]V,p+<I"/dp<3bh12pXQl=O=#0j,_`g)hHIkrnVVQMp<4-`ti'^odKiDoLp,N!)CIT1XD
%o8EuCNVFW+B'`4*pA8bMJ,dd73f\(25/+=..s+I2jd;q6i@Dh8"38D_0)RRIH50V\90GDT%P=p':?MOq^@V5?lbEJ^Rm+b$?HF^D
%"Y]?+][.$KhfCs$ZTZJ6T@,=%"ZPo4gq`SgcZNN\f/6h>&Y,"_FRi2P$(\m%*RA_FC<(?ga0<a1abG&WcInm3fY6b+Y&+:+L/k[t
%KN`XOB8%*^X<)U@Nb)F\AQX[i1;Q2,s70dI$r%h%=\RFh9^$4p-Ir]m%.Fsi]TG!:pb+=O!5jNj?r@tp95T.Xm4$EfG_^r4j6d=`
%?NC!=p:snN5/t9Dk6ZKl^Orpi[O%k#BlkIDStLgP!Fu5!ZCiQukR!=pTSFs_H=-aSjYBXYl!hf&/s#3_b)j'!3fQ=o/rSAT-lYrf
%/kMTC_L]Hl;!>p+0kHNV>YL]aO/\oI!l<?bdoS+)I0>i8R03KfN?9#-+9)(_,>.f!2tTF$%)O^BL&%qa(;j$Pc5AVuBBAKMPB1eO
%Nd\rQ/tXZTMRcWf$pnFcXh:3Kno!=-qtV?Vk&^?G^@;#<q-q(&0,G&L6l%>Z;fE+N_(PqFY`LLP$H5?2JC1T([#-c[@rBZrT04TW
%`EY-)/79K&YmefeQE66TE_>cg^QlHp?OBD6.9FZY$Dh42"FdjX2To.S/j!XRm$0:/!,.^-i\GUGa&C@Z&(62s!I_k"b5laLT^Oqa
%DFb^EpA8bQWOn2!OjoX]Iu^=B*.?71OPt2a^>?igI/m`Ir36aTGP*kkSTSf,*7@`6K'`^i#d^5jfl?$Q0Xf1AQ(aHIo(oTO)Y<j'
%frSFJ[EP&GZnC(h+jddYSK$FriLLqE\`'(uhRVSc1qZ1bhD':Be)1`IhJSYFN?1:/pc*_n=bV(gG.(bcC(\-3euST,@AWR:bXZH:
%Ktf5Z:&&\(dd)&@-iIB$?-Fie_d'*<)/N57Y;^3eW(ASBbi::Zp$mh4X7m9K'_(&_.(];6RE#OdB_*e.kg)kr03Xo:os=8HLj%u]
%:c#mP2I)hgEdlMR^%2rfLj"t+-4MCg;ipNj\k2ZI"UTZQNeA1EcF!o2a&@(PgRXp6:-i*Yoq\P1D&qdXmISK*3M*m0/Ho/,BK7*Q
%e#!e*rQ\!L&N-W:G[>?mZ.t-?T*Ra-ej6LrX,^)')ED)<LC`gNOk`@jM5clDiJo;PUsb7FS`kDBQ8OZI*,%PciiM[72>``PeR%@`
%<%Fh)SeOo/]uH8dM7WXT)OEfL9W;htiG;hUo6?6:*KF&:)U?rUINj]%-U6XICpg$5V:Y".=;9;-\tuLb*4<Zs[L?A7MNEHk^Jg+M
%q;=.?7B$Q]pjSn=dk2Z7VV!N9#Rg49`Zsu_(nG9ik+UQEOu!X1VMTtO-oXkoS21];:-020G8m_hp$Or0Ru(N*7K-^bA%<<.E?<<J
%A%?k92im(_Z/!)WQ?-qF/=26a)2[HUXBQ7\V'BHlj#Mp;o$O(,j5@RJC]0VB?)@*H]=hB&qQirK:T"O-o]D>pS.sQRZY"8&e=8Al
%UFaq(Hd/%FI^`Ob2"RKARr5u$`TF.r;<tXS%Phg6[!HS@C-CDHR/1+F3^)k"]k_f/%.EjpU2;6$H&?'^DSL6rWC@-C8g@%o0\Lif
%C]5h>)AoG]Z"937FQ:F;kcci$eGN"L<8;@h`-'g3FgjSMhu&i;?o!jMMR<JZqi+4Gct[`NQ"Cr7Y'-3MI7AMa97O?Rc0.V"W\-(G
%E3.EM'!iYi];_`rnp#Du9",Z;8O:@G-LPC1[Hc#nG.J+6nukF@5]"tf@@1ZTl+(q,!]NdY9`<'uC<p;Q*OoJAj35dta0]Q28uLN-
%^PmJQcCJQ>';Y+_0C0C;@&%G5+cQi@R%OXViHJOcU,,)f3ScNNb-31*E+VB8c@ApmL$.P28oF:b@\pVTr3)JPD79*aRGM)Gl.ChR
%B+]0)-G>uB)sqgOa"PD@?KEuHnek&[H(1g];Q\3nV_qE"0]bmNJ'C>"KiY7:mmPQQ;Ohsep,]'S*PZ+`[Ugqo.3@Zl)ef(^`)\dd
%Ci"9!9!V@A0Jd@IC"D;defVZNhe[GhkBL?\$:?n/@E;]59t_IW%EduQ4b>Pn[*4fes!Rr["nf+!Sf=0mm@E6]BQj+D"J4':<?$=?
%X'k*$`m<@knL:!2)1=2&77Hpo4W'e`btYn18`T$\N8[>obcDYQ)8DhP<&ouAU=2;Q1#[m?dKnCqf3-l=D3[GhAk-(%+Qb$)C*H(4
%V`9&RS6)0(W,WA+U2%7Jf[VU<U+_kmJFM^n?0sCUCK%<YgPnf__CsHpWO-<djBP_n\.hGg1D/m0QQkpKR4Br8`67ZRe&sRS[;7hQ
%)KG%Z</R4"m+A6C>VPrRFBej=2Vko=8PHUB9Cj.c/7/7:9#d`Wf;H]/bg*@e6-O1!:H;-PVK5pZ1t#AH2(#f*buQV(.@"YUJ(_U!
%3*Rb$D`fJS3Y=BS.4D7IlFm%dWT]5/:5Z&@]bsgJPaPT'NTs7h9sq4VFAbN'YY=n>aiRm%&`XZZfmZge<Z41P5=[`f8OLk*FAc9D
%DE0//g_Ai!dTd!qXX4fYV'+eD3_SRHLj"t+-&!:_g1aiiYt<G]@Zm!#;K&Cgdp!KG/1Sp@ALa1[r2VN]"W+MI"S56MW<d%7\#Bud
%%5G2P^6hur9N-E6Q<0g9ipYVpF5>HleY8j;FAm+(DGr,Z)Id<toZVP38da0j7VYdu$.\\"U>-5qFdm,CdL\4<7@Dc%r%G.r]G>)$
%@\#4W.(?Mu-'^riH5h!rC/NCj1FjO>]GBUdB0@!;.&g`nl?E2DW^TKHbcL1-J+Ah9(2IY_XlU"8f-Jsg[P,s"<T,fBM:oM2@WiOH
%QXV[@$uXVoKt4>G,2I3Zr"!FrB$l(`b.E,NUbQNDVOq)hji]TqAS/*sDPGaq\R)n5H7d+IcLomrYMDCU<pBZqm]QMs&0W99R9#f(
%CNHWO0@jlZBC/`7[CNJ!f4t=XXeq]r*DbU@HeMSbJd)2A\aiE7!7&($c*rg"haT%s0],@kD3U,"f>tHN$M^"PrDYY%>2)VoA,i"$
%(>>hh'fG\'Q(Q)1Gij#"A@W@Z[RT-I0l*,be=3l0[,)f$`LD^iY'*e/'iSDZTXC=)C%H[cB'<QiDB!Mk),JaUh+KQLSBW^`)5]A?
%Hmt&CjuSk)XYg(,--;NiQB<n-phaR"h\s.^^ME=)k1;^21:[\O-9&Y4RqqX\#Rr/KG.fKb<Hs\lMoKD,Ld)n?s2Hhn#t5Q;m/6(e
%B.d-_Lj[>c1[TLig:D+0\e)I@p.+AHs&,I`;@sTgFYg!#.\1nSr%dQ6feG:Z%8nIe/k4C=k`fJMBr3&5'"aO(%SMpY^)0:OJd-;-
%Bc(u+R@qBaZuo(0)Ge%`]U;Wb.3&)@/ml7+7WK7T,&Xp!1K+]=J'r7ar]<@ES^-ia$!]SPD6c8gs.,e^:@Q?lG+S`jb3pXETE!3_
%Ij^Rf\39#ij?;K/Y[so4oH`U4^@O/<q3g^Lb]eNuq`ds).<IhiEscgN6/&rt'@!F[bbfg[fBT93rA<Dl1,Jel2+:GnYP?GBd:iIq
%:Iq70G2@iU.oj7<2$Hj0*@BoEV\QhNWZfc9MQ%4D>%fc:U1pLX<EFLBZqJk[%d"Y7H%p.,+e*,cdL_\\Wm0"'e!MJOIsLLiV9.AT
%>W_7>;0*15QY6hE=8f5.p1M(hLjEj-W4(:B<15&X[HI@l8Sk1F767dGTDE-62sLbo',jZTS<O_6.EI>an1J91:hr/O1ek5MDYZ3E
%XGPN*'KJq@(<1DR`I=C7Rd-D?[iJJbO73"PgA2*rm\Q"+62:rkpT%RHkE_qlYk2!9!l,`eW4GYT\/U^\qhLAHo>Jg7nM3nQbS)Z$
%`61:51/GR,'/.sA.SR0fi^IBd./u%u]M*ALHHQpSNGJ(tZZIBT:E[V\k#W^H+Mt[Wc61rkM^E>fUU2sP+jC[0PLN:tb9j)a,G_jm
%@+m9'841;%?T+&/_Mn;%'@TqS3W7P!(OhXiKYif,?DTjV1gt8AkJhLj'@Yj4@G6_$r$J<*0TJ(#\#/"IVDfnZ@iOSi0\rlNQu9.2
%o@oVo[kCHJ9`I!E'HN]FC98TL0<+ba+iQT=o;D.,mMGf4Vt)3L6>$4:p(UjJ=\J9ZV:90VU6UIf;0F'J_dCm,4f3[p[n]`2;%Ik<
%-`X"B?*h!&GDX=h@gqjN<qgbA"4O\6\+RqMk7QFMMpP/P\3F:dc_GTI6ZL"8=Zk/)6dCa=/QHAQBK%AL<_PFU0kpR%$+bcRLe-P;
%:=(*\\)f@,QRsk8o/t#$6oad#``,"7_(E`<UnM4ga-bROGLlKc4HD5C@nbY"bju\C4N<?@1&a<J>-F*hU@Pb5B;_:m[9%(TC=Udt
%ATPVkr.p-#d,bZ@]m?kC.Pm?G4L*^N]ohT2h*gR#&SGWQ>S(sSksjc0oXu>(X(gRGJbG;%/^<B@c2QfW#je1_<_REo.AEjBE,F9=
%Le*ZMR[H75dL^KSec,K@Ti?V)^M)h4M;S6*Tc(CS.#fl7^Lq5YQ(.,'6au0GTem8JBr?*A`_979a\e5\X1!>V2"=Qr[H$dmOrcQm
%2X"3gILc7GPC<V@dVL66kI7(Z$$dlmpfa[O@7F/&2g`V]Sg[<sX12F=?`D,7Ob0bnUeH'E<uM_6`Eq#5Pb9"Yj&+DCr/3=']l@rC
%r&A,1RZ8&?gO#NRU@`-]NY?AYh7fn[Gq:n8jX.`Xk0_sHR[Zfgo4W"_c!;XSh\aV7n;M:41cI&uS$dJn`Ouj>)U>1PC`^mH_mt%P
%2\5*6iS;10S9&UM31#Mm)%#J,bZbY*V'BFjdS35&GLUBXc8q4IB)T0YF")M#)8;-ip3[aqYIfm)MTP[l2rCfZfOk+hM>@+;o6Vcq
%n6UqX&pJ\ef0==B`ak7[%<1D'$a3W-)O9U,>)#>FG,8C2rEN'^rTs6,2UZ-87Cu.5?-;X/Ssb"kP+Gh07V*:HRG:6?0"^rR0#!bM
%,\Pg?1\VA+W7AJ$d:;-Yl*f:E^:Y/Xp>(2\Zr2knWg.[t5be':=ST)@8Gs9r1SY'#J#VZApA[N/q/N"k%Y]Z4f(kTs9U&<$@#%>$
%Qhp%&dV=M)lRA]'LhNL4m.MnR^QC13()cJ$dO%\X2)+D3p7UuKqIMnAiE=rV;N"7Rko[XTAhk/iVmu(BC;@HGk7ChO$+j!P3c1;P
%FJm=*^Ch.4_qRNTcFpd!2trBR5<&D`g6qKp;HQmip^Kp^eLhN1088hZfTuMO\!k^(#ZP+/"chs).@LmIB^QPYIA67f*!dQBdn\;m
%9B"d:!p(B37<9hpT'ZHg92k*)Hfp_mWiO?V8gC.9KGUD$>L=n97ak$u)HCr85u!Xh'Y5.3-:*8Eh<QbpE$R`%1H?B%+#6O)FhDS1
%\rD#SY>QG[,0u8/gc5<%Q1D:$a##VH]5^MS=Q[VCao[eF0TbN.b1no#^29CZ%.a>>#,g#9q),`nG1P]?@PO&Z0u(V=[dNXqbu_4-
%b--'%?/GfMp@=dmp=X'U@\V$Q%%#tBL7-EIB#YD^%=8gW``#M`e*%.lE#*WJe>nF#khWqLjDK^["?k&:F5:/lDDcFG0DW+0G4sNP
%&N@fp2"Pp%XJBgPVuDj<Q.p7N`imQ@9n]%ms3^GBPMH*mI*'=/X0)7\nhpS_,WG3WVd:\-;$&AsiN9a%Gd`M9bV\3A4-T+)c(o6S
%2Go>:,\Ls1c+HDlgD'@ne#63JG:&^WR'mat<DLuDmS%.=X\=V9$6o7^g@SmLon9_E\_jLVc_MJi9gY0=1IgN8MqR5tbU+oRk3Z5^
%q2#lB:l'ab4<J_rc0f;7Dc2rhRD3mDNuL;s0_JS0RlR&riCEJ`:"GN"V`oj;%[F]g)NB#qo69;=?=N_G8h>H("ulGmV#.\Sdl8s;
%C[m`7&^3\jnZ,]3%n<8I6<44O+.^rOqBs&Xp8\)#qh4lMY1#JJX/`cS-nh'l+&.':d^&?S&?W`sq[><p!rPWW%dKDJ7MId:1;!<S
%f&,D8mj\U*[5dW(ik$#rl5RNfA=Uk=k2U)!;u7S!gZOmkC+q?,*@"p5#),U8L>mG]pF;0$f8CKF]bC11opsH[J3</nJRb2A_Jk,-
%?A+%NH4n\\O8CUr\(@=l.M,=Qr<F4&r8@>,p8Z#d?9"[+A&QE%Vkp!^:Q3LEr6%;Z70!1ARNd6ARUtGXoHOIp8?EAn@clT=V,oh#
%![i\VWe&<b@IJRbL*#30-eZZnQH"lqRG;T\@hQ(fFksRLh\9#A,4sj1cc_MQ",H`&qUQO7Ng`6V?#3O<Qb\AcV$C8?J,ECM:mCKe
%_@Q]4ZP#Vh*j'LWENF<_=2Xr'Z]%eBpQ)L8DYK2.*]1LLIo\Vd[BZ#,)WM'4,K1LhDY!2=Z`4>j?5bFR>1JOEm(Gc>M/9ac'a1,X
%S+sC!j6J@l/]c.%e9aX6U``WTr_Em?J'X?prJ19jku^g'e4?U1O_1F;/dOC;$EJZR<t!Z(3WpMgXS09>f&[UE^L&IbX5+,oJ7q;Y
%+/YCSs2D]4(gf2n^W,G[D<:3MO"$1Z):7I#7_O+pe@9!,=k@eheUCJ3>XN\GDoF"r[-tu)!WiHHcnaC]"K)$e>XCi,;sr_go=_6a
%)SoP@``=>u%R6kE.at`1SnFI$aVnBYbXbD8=dd>+<pMem:0Kf"1q'1.hJT6?2Eji+aB\*h2*M0m9?rLE(CErn;ZX=E.e's,HBfCn
%>Q4[YiI?j2h3pm&Ulma?p%$JSA:&@g[OX3Q]c(nn>ZSEPK:AUiDY44g<>p!/ZG,+![<=\`Q+I#r>E+Z[/[q"eom<gbI\keW3q`M@
%K;7S;_G%SiN]NSGrNb<Wop0>iYt:e@4)%\U[>_]I)>NiD-`Y_oQ^RfNgM6@L7PX%-DTajmEUjFK`-sdHL)G;7';jOM7,=f.d6_(I
%-g2tHR^m)ud,4-_12!.Y^O:Ob3oEm"72bSe.5[BU\;"5h,\AFhT#VfoMDY`/(Y_K&g$SOfJAR[KT'P+u8?QMt^ag0U95E.s,OorR
%K+FOURIqIL7_D]1#<hB@Z0])g@g/VH><2sugYQW%:7RXgMm-r2-C0c^U@W#^3K3t&AP0@VYB!NZe9aF1U5M=@$J'BsH.K0h7@Chi
%4-l&^e(JQE:+D8%W82B6eT1Hm9@LtP`hM.[<F5JWWqHF"kZFPA;6OB/pSg(9D'0CB`kR&>1RP"#V@1IeUY^qbh-R"%&WLS^QHX(A
%)0OZ#q<\[F$cC!Q!B17J">5VbMRZYnpFF>Ib]`Vke/5%$#41D:e9G<a_('91Wg*d+j"<2+DH5`J0R_I(.ONm7T-%N1M,VHe_%KdQ
%SQ\u3Jlh+)X&a/so6ahmQ9-L2D$=eh5-NAMc@+m/mXpQnlUO_lY#X=1^T\gHY2hN&S!W<=B?`Lkb'0-f*Z"%+D"jOqk'>(\]=RNE
%oBD;,Cj#X(_juc^^Zq.YekU2AFI]std4KetSh1oU2V,TQ+)S)4\%<U8Qe#Z6An,]T:.Ma=dEA.FJ%`P#mR.;6qNIi-@Q+,Qm)iSf
%[J)AK?S()Aofm9dMVgV\SI[6o\]`QI2n*qV4(!=!h<gPecFp"N\&Q<1R&5+C]Jpcig-%Y_p#!L_paLDhaM&ZXX57aeo>^Vqq=DU@
%2g`)7>e])K05T37@2e-,q<RQg^NfVNaNle')Xg^&oB3g(\c9K>E9->;@b'95^9R\(i=QS'89YGKcG$[DeV!>0XkM?sr(?JG?LD4_
%DNg3-=/kk$Rdf(K;RKJH?S<,=S`@-NgjT(9;Z>5;f;4JD_`-[De:7,_m>JU>CXm1]!ajKE8uLG,4LJlcY5"Ra]s"L00/%)9`r0N\
%=#s!HqRQ!G#N(Yo`Jq8Ak;H#oXhF\GO_[u>?7nCo=aTLBIX4odrQ!_m44gHLR7e?sAisV3pnIX$39NMbr$0spXk!l@/$R+WcBEsI
%jXB$UpF_kgpY5F$$<uh?O%RThMe@:RXcM>pVgb?4ASM*[mGk3hEq_ALqm:Vj8:'Pa\r4c&d6$o*2j%*9o,!>AM@e.D[;EhZI!;L`
%\?c+,HtV\2#H.+]K.f%g21]J#P<ZJqHF*7N]ImNm+-g/QqndC</!";U\$ePRh\f'_T9beFij5s=@\BJDlYEnHYJ/@u`YcU<]6RIQ
%"0M,I@MD!V'[27Yqq*B=#j1!c(QXF/`Mi[XnNM3TWk$%,\#&*Kj-SXrQ-.!kH10h=lYu=l]/R:V6@Q+_H;OXUnbr(E),-6<hB*dp
%6U,h'&#EcWl##:&QeO).^E"=2lJK7pCT!NnccUsj7jd`pkuZd"YI2l5_85lhQatr>7k`')`S*uINoW'9!>L)k48X?gg"XYn-L%KG
%<&W;;H[k)d?hF1rM&Tj*`X00mmlG[R:^=4WFpiO1=Sbk+IqF+7Io\DKT/LMKKCuG6jW_deUZJ>"/,V04?:j;EM^oTr`TPp"[nhB<
%C33Lif\Xgm^G&5sesG*+?crhT0=*ZKrU>HIGjig:A!5o/fA@+6o"p%Q@c?+s^F1[NB?NnR@3<.#Og6tqePK($@!>m?!93E!(=(2u
%?%9!QAj>I.Y`8q>@IJL%D.<!!2G5RD-fM:@#qr$>"dgW\\5QT5Ab.`0k-s5T%)\F#C@*q:qkpZD8sWn&3]gE^Vmf`6ghX!VMs^gc
%l07>34=sR/!F=7)EiJ:!H#I9g/a8k.q>BV8c!#Mm[J_NRX]N-Y2k"Yh\\n#_pL&rH9CW#LdW4Z=<IV13J'@;PSj.mGT-*.-V<r>t
%3Z!^P&"e3!DsNon@d39lk>J(m$njgeg?"=#-gsmhIk@6Ok=<'ApT*+\]*GnF_iKf8>@V68[%"?/3/q\"H=<o<0,E:7o(o5oTW.bu
%qi<3f>JR[\WnT@*qPAlnhiF#`)>FmLHD0Mo!J8_8Pm5(VV7!Gn.Hp6c>rQ]q)]s,+?XFMcVd]#Z`qo9n(7KW!$i49.6/MOd5L(;A
%%it<l2+F,@ONWVYFnGbgRD)N?^L)K!>A3m4bK=,N7IT8knT*To"M\\sj/#o%nZ*JpT7l_!h,Ai(2KY=3QDYc`NS_#dHG3WD/'+=>
%i72;Ha.5VB3<Kf1UUA:lmb'e:qGuZ(U2aC2'-i=8oRU\EbMqFs)Z"H7(DjKR5_j>Glt@(uJu2sKBh1X-0n6tm0cJG.dpVo90#^?l
%cFU\A\-(bG2'8H)h-]etf:g`aBCP4s:?NtK^[Pf%133?$`WTo<LPN(o-sq"P\N!<([>(mR9c%;I-.Fd&SP@3Z5ZP2kpf+OK_%CR_
%hQkLipu'Y'OVgM]RUmW\plugsI%#;<Z9`7^69ME5N=U6AFh3gM>iccM5gp/%(R%M9O;uZH`l:CA8ck_a/U44]2FofL&ei8p,gk"_
%.hhjNBjt*_O(Wn8PkU/@ZK0Fhqf#)D&'Pm!A]2m4DR^4!;5Lh;M7(/(2eD_cTcpSRA)]=:McX8.ir++&pfkU+b9@4(VU;!Tfb_>-
%q2.^06C?>ZT9;CsUYOh_Qd,*@_rqZkJ5]+M+(;;Yf(3^ir,q3$CAH/M/=JF@3`uof#I&4Zr0cQ``mNU$B8-2Kj,Ht0iqihdD46OE
%p@^t241[)NF@>'t7Vg,%LJTRoXXlYGT5\^anWP_SM0R7S]CGUR6<H59mscb"I/,q/PE\:lEr4,@m`*)0c3ZP@NK$Re3R&1j(9=Wt
%`proJf5bZre&QqhIY9uZD7`bQ5(&mpQE:lRZo%A%B>s(3l+(iFaFSZb%i'#9GP3K<eY5.]Z[hfc"5pC\DOn)fG%H2J%Wkoh4l4ll
%PXEC9JHB38rUA\I0.A(]EhNETi$ChQ,2L(;:fi`<%]g<Uns9_!_$#a6kIF]M2tntYg[so&Sig8s.Q,_X$ToioQ4_a?:W8ZGmifoZ
%G`mQinaTKUp&33"Eg;V#S#/E'<I1T1df7gDR4W<)o.,]>(jI1p`"M."ci(>4mDI`IS!P8kYYA7i'df\b%VFs(c[-ApK?\e]48VRR
%!DK9*K<(q?]>`$Qq[r2$fB\h'W5>UshIcYGP;$6FF'^05h&[0GX?REAAi"YXfN<anBA^u!rj,mGj3=,kKX6Gp,2h(,1F>+iICQdk
%3<+)5'ehg8Q6PfY$Nt*>$fisaQ69#W4*BPBZANY>Qi)R1jGs'ZQ?cuJG1eQgWEphoBeNh"07D!_U\Nq(T-)l@Q^W?XT%<l0119o]
%^A%D4i)dBpjBq@mlrf8804,#bqsX":?GAOGM]oY/i96X^f\Cd\p_Wmm4_)*pD/=B>UX$[)EdJ;?r_H<!e&7DPhWT(,h`.Yu8'bk'
%2<3BD<t#':`bAQ-dK\TGkF^q.IblcFhfS<4f&>YU>e'KJ-2uiLq4=_O3*IgaDfku'n\"d5ES1BCFT_`lEifZ1C;4";?G(?>[+ZJb
%-XW;]8$A7#XI_'ceA3&XhalN[?%"$LnU.2.U@[TLOL2'/F/SYpS&RNM0j;/*CjEPrA.g>(1N"Sp.Sk?g2V'RuD%+g$la0LWeicVi
%XF(/KU@c,Q0P$&WJ2Zi]4(-:o2R^lT_TN-@=Z(gnY>>TX^>J8<?G8@6]Tu?"^8_o`Qf54a_1b)rS:>,b$d\:IEE[)4H(*iJ!GC/I
%T"(iKf*@FGeapJpq*oPbKL$-;jGUf14Qib(_<98:Qhqj*rNeR)ht(1j@M<o+9-<A*n(rJ#7_".1kcAmspd74/foZ4480P]$iS/#/
%5l!o3m=V2tkGJ6i?&D6]G#+.7@p)1TF1PJR/fC:%c9h:E<8g]irdgHo^:UZLm*11Ben+eihL58RRsY*Imjtqt\5^IrF+<efT>*'q
%*Sl9T"7tSnEU2ZY,P47pW<qeRon-]:#DWiX*L)WR5'UEs"d\6h_7esiMhT+REd<lb+SXm^rWPh^prD+Q]n>o"ZT;JppUd8u8)C4_
%mr5toa8%A-Dt!@Fn^Q<tb\).4hKBch_Rt5_>tKG;n;adHEH>EE&Y!%JlgB-^4^G0SI(]WrhK#c(I/j,l0]E`4ga/>"m;qURVs@O"
%IH8/CY3c]U=c:!F?;TKqp!q`!]sQSk@"Ohhc.mkSrk*O0Hh7m(I>aB8'j8-&"l$>(cL/q5n(hU7<T3>O!<EdF+.YJ8_57.F%kG?`
%?#pt(:du3[I"]g"d.teFFi_EhIHc#Qb28hp(E;,3Efe7,I^sg'G^Ake<N,q;cNX,fG&tp+>HM=c6u.F\\(dpk_k#8sAo;h#oQ"Fn
%hq$V(J_U%<7V=%6UP@XHq4DH+MPoFba/';Dn%eus_f)*$LYrPfH(SlCmlj(8,t00SU?LtlKg)1&CeGG,Vb]F%R$<7?\^Fp3&,42<
%4>*5>m\5hUXWd1^I^`S'I6K.t2U;#ghg8gMjhf%S\`$8'O1oJD4l!'%f8Dd$*RMuRs4CF:MU",3G3>5jR7!i#=c8>S]g.nWcI:4a
%ra0]1p!(M%jjI(Wo/YNomiU-;a/`d(egtqu`W$iejP,<H\#5"0D=FI[MgdCm?X)2cIJ)tooA&<VU%_'f=V+(^n\4snZg]@eIgPg&
%YlkRVO3aRS?R<</8*@tbh1"niQYs:BHr;T!0Aa>@"sid<p\a.@;tm<=]`&#Wfu42:T[q<j:jUE8nDOj!(JbQ'&.]\WQeGKql@/`D
%H,"aij[SG$QX93he]A;`gCW`8fchII]djmoT@mruanQ''"s;='m!=rc^&(hh/GJ/:\G>cG"F`l)ETX_+p-Ub[GHJN^<BJ%toFktt
%GK"7o$O.7B,o%ZEa$fWrKuLjpX;uku[.u;_CZ]Ji`h-OQX?URZeMj>sNo3q)Z,T>0]DTKlqSjuGgm+50;.Z+^VP.%DlBef!37LLt
%;;Q2VWbrKI?HFf0iRbu;J$;k+Fa1ZfCZS;-7SEp>Ii41`@f`)Lj(rjNaTgLGpu"oI/XqiNYr8@85b,;BHE`qNRlSB4<dkLPp!kHj
%hfml8`q/nJfm(&]Nh4;>[/#0G6-#&7j]Hj"ikl.`6"#F2k8XE?4c2)7JZ+>O'E4ajWfI&.Q.,D$9WObcfQk2Ej;X*Pf7>ngP;LOK
%T9N*0onU,.08B,oK3Y/aiL.\k4R=eCqlT6lEI%;*9fc)er>=pT]qK-]PcB4XT-;Xndj^W8rTAeSaS4lpgD!DdSR+L)!7Ca(:Us"`
%]Rh0Nhk_kU3)4OSUTnuA>2"D7"?cUfEa?;T40Tf6hLhfNfjRgs2"Bp&)s`LSU@+ZbNcm+&"6*Yd??fHW^QO.NHJ8</.Rf2o'<-;`
%n9XUf7PM"efC,lF$XZuD.N^SjH_<(+`eON]XHX)N]0/8I?R[Y@=F"+)hct?VU=BL85kY,N55!CnQfMJ9L430_P,bj\$VoDgRY;mW
%qr)\Z3B2RAA*pWFFTrS#lV[2Weg!@g-HX(Ta*0=%!,)5&>i%FB@6`rtf#EWQ8!,NG!i(DhOJ*m,S<W];gqiOcXNfFnAmu[Ad8ICP
%a)N_6ao6joU,O3*@%WlbhRTT8]XMfC^CC*RL$+0]O0q2+"T)\=rO)U#q"!PC+7Zo5?oR`,b*<4.NO@)N^a&MZ0,`@3pF7Ti%i8W.
%:YWGYL3o.]ad%&hh8OSf'OSSY62L'4gIWp5)^Pt/4Cf6(d%mnYVr&T0-rp_@MrLN.j6@BX's"K>CW-YH;kgd0mt6,bokk!ZZ:>jL
%?];2FGGAB_BteFp""f:Am6+QtOt5'j`ujH(MJ(5t$WsFcL6fpA-G'dQQW?5`%P$no+.OjDHE4DVX&T[3?[Xs!QbS";T2YDMD<iA1
%Y>=)&]t^&O-pIQ0qG9?N0P&6?/A^qCEc1nP8!IR1`^N%?#l8W6"Y!.<.=.Q7!5s=\A)GD?BKuOagXG>TLW9rGbA`n0rN9,qg0TA"
%CT[GO^+:;G,Ui3KaNQSDbeq[9_;Q>4G$f5OS-Hj\8)MMUj_FO9m`,^b'kG$bkb1DGHZ/UmO(%Xo=\a_H?kQM_GJ2;fkKbQpIJE.0
%VNK3@,PET0o<3@qT>+t/"7:_HYi&tXq&_d7bJDX<_[#pBT''JDmWj)Ug[omnY[&3>me5YRoXT48n+A-cX,FdZ:Nsti0CqJIpZ8.p
%/C^YO$pEqd9W3+[Y0C[po5MKqlN;Q\=Xk4`5$4T"38%D\\I2/tZ2Cd"im+Nc8A)\Amq&EpOCHQ,o?CZeX5lkgkSaENqNp<MggRJb
%8;ieLXBf:kq^=II=>&ZORfaPR\g$LaBaL[dDetoNU`Ctf0DCAPjb:T6$iX$%n3(Uq0Gl>/'nVqL@3^tJn;ag#badLg0f=\ch<5[$
%mXDaf6Tm(D^He>jFfS9ogSe_,ErF)N0>H;SA-;GoW/q7\FMALUI^l^tS0"m#4Poo+h*mV,_Wa*5E&0^C=pB(TY5mfoq]PKC9D;04
%rWp8*>aqS<c;FpcH2\b!cZUDs_W'>MHht?*))eV@Mq1I3[uGNRh+WsRZFSsR=)4?pRD!'4eF."a[8'o\/m8">*($^sea"0V9Pt52
%CT1"t+Ai>WN,!O7WYnffZ=n8aAYb_Cm2_-'7C3pP`qOmWT1Z$J5S`REX%\c>X,kdU#`jObfkRR=7E\cTdg+X8.q__WdQEEl&0G`?
%]r8D9)O9I(iq;nd+s=63+bki2EN6srHRaQkXla=JUQo>XHJNhPV2A,+od5s=MQ;,&eq__[>uq\g79U%#B3Ppi[eknB>J6Png2aUp
%j0r:6RnqW*l6YEE4MF(Td]A9DnS>2B\^r`s;m+$OW,VQ)Y;CCm.!TGD_6'p"`7;lF2jqrGDO6r+h#>;Uj)-<5p31[Y]A:U"o?#U#
%&StG,M`bOd\f!a(2qUrV^<I0Y2G60p2gbj?ZY&3*LT<dB#H&Qt.P]s;?;N.uY[FPA8YU?MUdc_YfrA>=H)HsFFj@;E,;'nVkLiR>
%A2Ce#3?E$R_`t=lT3AWAeXtG!"ZNG>]@X>&)YNA)oj#U8)*GODaEI)GQuS*\)GsHQf;RD;[BIFD[+WXR)TgMIg8NajM.s;O:"IQI
%[-I[b)lK/gU"]A/E:.>-d93;Is79Fb]3t9"4h;`r\jd,B9hM7+<KdhJm%.:oM!<5^$uLaF7Ppn.(%nI`ql?:$o#/SQ7ejd>2:t9S
%<kI'(f:mU4#H1(nT?`<&F<%Wb41,R&UYi.ZWuS'<V:fZjYM,r.=M7qPe@!B7S*WF!Etk0q#m9@gQMIn,E4!7OBef4W21d:pT\X=Q
%ef07&:^o5_D^;@':ZEa=p_l1E\6fi9R\[L-13C"WOG8BmT%Ifs4t\`0mBjjBVJWr"r+S":A'qH=*L2s[[2co5^f8f:_7]slE8!t:
%Z5;i'CWn.bm:`B^)C*Caq$GpJ<jF$c5A-LW*,IR`'s:!]qH6aHpi08+>1"#Rr9j?G]!u)$YgP\6pF[uJW>'0lNB2^;dO;F2=r&+M
%*^3>F*P0l[p>dB=W*U9$YSB[+D]HNrjXI.Mo2b$=lA<0Ibp[I#N&JP$!%](SFp^H$1q_*i+9NQ?nVOU<2\K>(g.C"E?IK[UW`SYg
%Q-WY%:oVLDYaNlr+)q+3,E!^Q*C@&Om5is,IUbMLHn+``dck)Mmph+Vp="7<O_CjR7>f*UUg#p`GsY_[,MQR+3Z$TQbYtn"FPQZ2
%3p%l[&*g\;Y$JY\g1js+H-)Jc7%M[FZeF=b7D/^DLjZ42Sk%t$P+hYh=OXTUq?VKr<_'j(ad:rqq8q9/DG5'U&,#nRh%AUg[sQB\
%jCIbD[aiQnfBPZPZIM#YO[@13p3IA5`m6C*:Z;nlDc`CF+5%YI1(U,rES)e-O*=dP<qX,S\r;NK+&0KJl=IXX\S>9b1q2h1hclke
%D4qurS[@Af@-DKiIJLM,atRn>e,.PX>jQ8'BEZ=(+2#==a"4Jm%n1OH7WSl+6m(Z3#B3SG^S(;+`d]T71,sQJgC15hH25s<%RSF(
%8oM?41Q$%cbuQI#X0eS:e]f/B^K02J5)I>3YO?.58,Cs!!\"rP\CYKFj0ZVHBKa!d/=522I")7I4cXWmRajlW(ojR5e:_MFY.m^6
%>SX'.2IO$981TDSmmM,tSJ;aO7f//"nAJtr\f_VCnisTuTN^ZZoiRbl:G=O#jqMSej*_3XSlfjZ2Mm,_KDUoG;Q9!`bl:>,]rg(i
%Ko]FI&D8+QY=7TGMS07[Pr8m('*87P.W)mOU`Nh-ai]b:kX+]u8YX5R!dD)UpUeIQ^2_s3LRn;'%_@Co;:ep!]p'5+0(>boaQ.,Z
%_*S)((Do9\II)2QhGD<--L0k`mqWdiIsDcO>Yg!^S,B0R^i_\W^cpt2N'"3"+mbqU`'m6BGOT%=dV`E]_N!@Y0Q]h4akM.6j6pZX
%'H88\ZqQ&FRr1XNl!Yd&4X*?9PgH1F#7kRM;XOqi*3.c&`XDKBb=XT2oIA*hV,L%'R\Ws3K]1W"j.1Rrh9;*q.bsod??CGK^H?42
%lA][2\YID'+F%DPMP2:I*1he7bQ,KtLe0?G;4)pZN&n86q/IH51Yp3G.!_(i#1_o]oof_%NC]qp`=LL%^V!o(RfUpQJ`1g>q]uIG
%g$35(i5B3B#E;h;',j!s=f(!!e=55HUM95Z$qqWOcib6-oNF4N29OG5A@[k;<4Lg]]Eo"T*>hBAFh@V;3?l,d/5d*V%E:2^q*=$;
%J9C0W+]RoBqTTEG3f*.dW'IB0C8]o`C"P:sRkX!VY:+0:YbrpRZN7"3HbqGjK'L":@7b_6&C&&s*"*KjA">C3*'+mDh<=R<nAiUN
%)SKm\j2;kW*9q[F*`a'3ZgRJj7^Y.\or](J4%%Pf4ue5PEQW0$Ybp..Gd?&S.jr?`C'n-]\PL%KX290qnsjP;.Xq5AA'T/fR0LmN
%F_KG0/aJi='n,9b;D!Y_;djSB*R*o89G&/=P_^RfB+--<!"W"#69:\T2rTTN0_@?(1:)3ZTUc.E@nVuAYmg)OGMGksh)T5ae5C*.
%Qb^iAj2<+?)9-N:,I,p#/t#[<_u*o59ga*G[A<N9\49V%31\RR8LAanp$l`DqVKh/Sa4gWPoY1Ol6oo?b$#_DE5PsmV.9ueObWfo
%f%=&+P>XOmgZFR%D<;9RfM%a70s0h2lZhS.ITDnI\#hBnDX"0OVV<SDp',;?hK03cX.(D0F#,++ehDKkl@n:6f[h(soXi;XR3jis
%2#6g3(cPE-p7S\8H:&3SoGMQ/f*sES*'1Y;NCEkqe7c4<N"pdl419B$Vdj*PY43^:Xo>`EqB5eqHK>af<q@Mf?ON/khNrQ-&(eO-
%DW&^Smc2oWiAo?Tg/jNd#loEOTUGSl2*]<P<fjRk(Z)Y-h*1Z5[fpN+?dZ=<UmM-+Qsj@gn7J^,0`ngJL=T%NE=C+NUIBn#0n-*+
%%Y)1hnb[6Q`$<lo^On3,2stsOP;NHcbCinS1bCM)WPJWtl\9tWEGZ4Se$Ut%RfaYJcA%W&`dm@C^KJ:=[B.0'@I]'LEgR[dkCR"p
%bVUm7DL7dr*7G2"^2LPs[MT&dA"7"9N-7>5(#jsqQ(C#8X7W\O$baZNL?E2M*7"^Ob;8LD+1O:_kL+S@=cNOSH4Df=0thD]fs\bh
%O8s"=",ft:2tDq>KQ.6]Bi$!JZ;Z=6ne^]8KgKZMP'M<+l<Nmmg0VTX`\D?2q.4up$BIKpj"G0FVnSPFb:G2VhAq^u5O+GC[r;&L
%M72YZ"!@=(G])+&:loP7b^-^1AK3qUL48>uC_3`l!00&?Ll\7OQ3<joR<I/'ETmVM1P!"?b\r7;a>WNOL0-a'%7&RMT)ukFYX1F)
%B)"e=Y*/mca;U'PAmck!7ffUp$c7//bS4GOcd,cQ9P!s:eofb%Zct`o0QFH2:iq<u6@@+3/J:$GgGM,7U<n^I2KZ<#)i+onXFm81
%^ndP<3Z?Za!Zc.1W(n0XQjoN@FA:\c'6&$IEC#B_kiZ&N,I@P@Ius9V,i<42q"nu)@)<2Z]jWGfVA%mn3,XiN>mpA4%6Uk&1%;B-
%)r,IASR;`2jWt'"K6;0Mi,9%B*G>-W-im_VD*&)t1F*1YYT/5Wf[.jdg4=$PCsrIAj?n:7c3>oJ?sE+E$pu;a!l@24Hm[T(BjE::
%2b!dQ/KY0)!=?ZeRWaM)#?`]:*<f#B+b:skM]2Yg/Q`cA!3$COXC6m]VCD]K\iG;."++3/$4J'-A;s0\'@>$.Ne;][#kG5SN:X\5
%O5>gn3aumrp+)jW\_PSSI24bD44a`)@[O+<J`C'EAIoIWJIcjJYWTXhH-=G`TU^P(mJ>0<'RaXT":6&(+G^?h)'FCZ^jS[V_1Hh!
%*TE7NJF'hL$Ua_T8-"VC9j9n7=ARC)6B_0^#i#]:2m>;Y&2Vs[Q3D"''I"_)b6(IHNBNnff*-9_&AeJOL*<;QB1!Vl$`"3T'CZeS
%%&HDpE4QUlfj:V-TR;:tfPQq2io]P<%F5l)_HutR@#,1D!nRF<\ma/FE'^[H^7_p!$[^:-8aaNqQT@r<mQ/Dn<(8S[QHT2$ciI+X
%VW$jcTVE>"MBS8dC;I3=CkH#$gP2\p97%%7?1C.6kfY6&C,KGO366$Gi[4(<gIVa,$-_p+=-F_V#Z6^>L7!;.2^sWY,FB!KP??Tn
%Y`iPa^.1AS=U14n=p2rF[89pa?bPEa!hV14U\4qEJOtCM-)r=7[503oA@Q'@('B08nM*<b/=>oY\$A9J'%!u4_$!;:!@&08=<=J"
%TFdP:^bPs8+)&fC/nd3L<Lr5=.hA]p=;k'rAuJ'^4b6W=o8*5m#,8t#5$PfUh[MmEq-]!f'Pp%a%=se[=*VQU@6#TG4ooB>:q=Fi
%nd&^!SO;B.%6k'THmkRM:_>Vf0lUB6'S(H7J_^[-j!fNhG[.D2\fVLQ:mAduJGaYJq&nR?6OdD1"^h_B0XS6\-_J^b+X5QW-&Que
%qU3*bI*c-4X"j-B#KATNP^B>o@kpoFBY6Wod*47\7r*_q#ZOsN;V6:uOA\$RH*h0q@!cX>CtK=@luBFh$DR&E#0%j<[asrqgdn]T
%_;'RNfa6n0+IF3GaWMeiJa-6U8uT=UXi-VgJg4l[=c8!j2@]B6j#).Dbs7g'&5fF'PT3]HI>.4AIr]O!n*V,*2,6r#=1hq*.p.-#
%r72:&ZT`%[nn_/*\Zk?RE*ES$\-@,l5Y(1/iBV?YI?1t?M'T;[Cj+o0+Gr)0J^?iJZ_=&paoSb7"cFb=0b>Y[$4K<3`&.f?&hqc;
%]`e<LlrIISG_$C+%@._S"WV`./OAc35EHmI!C5hi0tCX""@ZgS/A;-.@.?2OOZ\8)&SqFt;!%WW3n#C4+Zt:3&Tb=l#dH+3dg-X!
%m"h6>i9@@o#T'kS)Tb6#jn[")!GI!2U!PQ&P;nl-@BL^kJI73;#aYW`Z7P.&)$C*3"4Ln3JksSgi&.KC@QU7eR/:co/^9OqX=@k8
%5'0+4^bC@jKb#)J31'j.W%aR[P6VpRiQT"N'#Xc7=J>o7j:Tu4f4D$X)BU.FE2Rgad-hjDjBE$<mto]_&M&EPL;uq0U`TYT#l!G>
%i'B0G!UkW/"ZQJ^$l!a!SQH4,jbJj@(H?r<Jq1).(9u!T%#3E58/5nW5QV*NLQo>c"S-*u!l3gr"O+-AS.5Z639k0Z!Q8t@=$mrM
%^*@/LV@UZ"G'o8Y\?Gf5X)pnV;$E2CL[bJm['dlhm9r"eEX`V1i4QMJ5]gD]DMZ8?:hm!:V*TFP->R"o8q7W_=`\gq%0B0'[hD#o
%dL$,=r#lhBdr5k(+$%LH3Za\'FQIAZ$j'Tu!(Pm/6O4rL&E(r*NKk6kE)HLG3s'uA'7.c4jCZb0/hI[^*Vql?L#A]#j,g)5(aaTg
%4a<B\_7MSsOCpPPD)5LQM<bRp"b@O>LqqlT]J/$_%++q"pkD:LKC\'97t+O)q#tq(+<[b^8^/fY+L%2KO86br[*eW3;7D=s2X;D+
%UcY?R#D@O1C#p1@KBsFegl[01aCqWWN6G:!(bd]^C:f-8$ua"s6;b!AMa4ltE*S;*\'Pl^$-$9a!/-I8GJh4E!^lc72W4'd6;7Lm
%2A%l(66*i43)i:&fb.F);HU$l4`ETpUWYq]!dVBZ`1_SrRg'/"aS/@F&FaucbcGL&/8t^5p;)[liIKU^J?eZs:c`?B+0_JYI2!0K
%c9bP3?Dmr_q[p_"PVK-HW&NT!i)P%ZRH"U%:&,"Y#(6'B=Wj5"Mq1te"\>4*BEj/OHJf^(p55?5Yjl%.4\/4Un[8E.P4p<+WJN\Q
%n\T*nD8?3!D$uRlMZK+qkd)hF%\T%QdTlpabs7>&TH#a$8_GU,)H(Q?+Y86l7)l[ri\2!!J:i,$bR)rT$]XPp75[X6"@Pe5Ba'OR
%%$[eEC^\Ao$&n7l5M+pp2KB2fB-;qo#k7$]!($cH#0J/PCuF;7Y*<,5@Ua/tBd1@#%<aCPg=]OcNc*V%LR<4kGZ2HP0J3"69S;=.
%(t<LBid)rTV!Ti94SM[8&:-6="]uf%5nLW6>&l@@7mc/PXN&AN$_E1]5nS]0+r3HIa.d%qVI6i*K+!K;UsRM?#dN#I_YD2ob7a-$
%83(*0d^E,$*epgC'J:n!E1q.*GbK(;OYPB0bh=+Id9u-lR$:?J1plIakTqgL!eTn\Td>8M'agGG63:V2Lq^*+ftfO5@9HmCmYDe^
%I>@uNMSN`@$k\f-m6=S#Tqh!Gl3OI\(IW$CNi):7:m;,MY!=6]/@*BD_5<_?RoS&RC*Xol)DnZ3Y[8liMWTcI)X&ps7kD'gVT<pS
%Ic7jRPO;=l'jV<q$Y;QF)6r,0N#fhjN"haYA?O2+\W/9<U!%%@^<h<93ObmlFpuU)4%[.OXCI^1"$e4?VHA]%^s"M[^g0b2(>,!8
%_@hU30,=uj,X;FdGYBr7ecD+s4FOd6e.H9D'`NK9('PggPB[*VD5T[)#`@G7Fqd3da?$9DXH>cqI1R7lW!FD;<!5<:-Z+rChtG$X
%$Hn2B*(R*(jkpC]+PN\;ehH1;P]Ho5DIsaWehYmW$o*;6.fdu/ma4"]i>.=h4$Kk_i!_VL1L+66i/n)OcG2MmK#a`!,r0Rq&n#,W
%7$[t$NVPe*,nP)jNe!3PT1rqU(eb(",W7cY*)Su:5+&2t]*Y.MHe]]D3"kGZF-6[C]S:CG>u(UBNZYL"E`i![XA\,NjG3t_=W"2Y
%+_TR@ZX?P,&/RBXlod)>#Zqd7))M[q4.)*Mn3d:j)8`p"bs2e"Na*-&\:^Xa(0mIBMFjiP_O\/`QRs%91J!VrZ[63R#U1)t*DK=!
%_7ia-6B;2nL9U"Gia=$Cac6G$ZTm$lRO<DMKb&F&Xo\F=i-c&XK[UqAF:E=m,S2+_VT<F0\YsdYFPLh@.J4Q46*A="jTl8CIKkUB
%,MeC%LZSo!m<XfZ(^#&ce51nh>h+dXNbYd*<epe%'R(td_++o1WYCEo,!(>1V)NH^iBtUP!Q9$\-TNCO*T-HF_uO8%VPt`B6XgsV
%+L=BD-/#,,e@;Lie!MeMf+odFNpITk?cr$h9XlTo3k>W!5[DFMh)1V31?P6'JO(tWG@4/Whn_93L4S#G<@D7Xn>Y'S"!A$=:btD?
%/)<P:;Rmie%qX*m[,J1UZd\`++!tj"$O50W\/&t<M-/=FjDK5I+1.+:%E,FD9KZBbXioR\(Y_nM<),]oitM8\_/']Dcq*L1ZR"OX
%,jFNsj$=78$!=_rgH\!=TH#\1?&!=BK`hU2(53(?#Wie\oC/,NXK$hc4(Kd]%gMbs&dNq214d.&@!c,u%bAH/;MH<#6BKeq-rL@=
%:E/iYen%/L)oDeI4)%2g/Dh".'@F=#>&67MQ9`IF(JZ`f#7?D'pql,J,tc%AJ>o5u$'F;Y(-G!jh[8@^$n5nQ5Ygu\3Jp@(3PN`<
%LV5n[p8f91#[sQ'G>U0Gke>F-^5ujN(3(51^p+m"3H$91LDAFeE't2]&^+toY*DQ]CG$o)oO,q_dkcnD3[(@u!@"%GSC'9l?r;H,
%Gi>sEHZ5/c;28rmaJ0?YD#Oj$Pm[mINt-3sqRfNFP&Q7ZVMQ/RO>pUDJ?Htednhr@S:K%H1h.X@X0Ee&,!1EX2%Z^Dj90FTOps&3
%IK=HYTLE[:LK"=dPc,H<FIA"q3>rU@@4=C?6nqgVKJlnu+jc;`#ba<"lCNdOd)&eYd+*2+;@P"HNJuC6VPuk;4"d-5C!Ao-(c.Zr
%eUiS2;#!2Y*st8qr=TDIKL!I"\3i9!"eg%"-Tf=5cf#0^=%(-B_uOe%0h`sNV\@0=Qg79MF#jWD*C]c.4SC/gKIcGJJ/((S"X8Qi
%:jmU51d[#YRgcQ-6T@6&#`q2CQ;WrZMnMR&&[2Om=GAlT![/?<U^f5d`"!qu5t!UNf*"ri*K`&IKOmDBH!q/-.L^)0R%^BL!<P/n
%i%tU=/2UVF)<`0sAW?#;Dh4`UL)A))?.%%8T46(s^^/?*;^I!oM+S!<8M"iij$NA[pBrFh?st@3b9D`\/)XZl8#^K51YS0NRuc3+
%<\ie*\\\N,)hDQX`ISuO["kfp+k;BF>b3<DSX`X,#GAT^J/+jHUXI[9^/P=l9V,qV88cKuf![-$:aGWd.4EWLGb4B7I+754W)*J:
%&Q5;+nlR55MZJiJ3-'.X5*Q-MZq(2eR*K)B[ReqX'dk#:@s5d$4NV/seoJ_9'<Y(YZ3.mW3shSt?ZZuIgmTBFKBQFW)Q(<d&K1t_
%@k:0@pI,2KQn1c/W=8$m:l1X4nrTrXgdEsNn:AZeG[-LfW6:>2ch>030RPtH`VJ^%RMp-,!CU#V$4);]SD[TuYEg2^%.Pp=+V8kf
%UAF*7MrQ@3npD.!8*jR9s#q`!Gu"ROaJns#W#qZaNN;,E]Ko)MO`[\N&m7e1AEs3u$HL`O3:\$k[hnIXJA;r_-@t97I\?!H@3^&I
%!X)[4K-0jsiPe:$^_M;!(.;%eSlD"EXZRt=dH1RbJe1"40*0MSNddNT&dUN($eCJ+&8R'd.570(Z,-M22@3h#^0;cdMM9Bj_3BSP
%(T@/H@ke'r'0o7G@imOHKu-9E)&DO&:9t%p6eaLVNC\s>BW>#_+p8\X.=uJql4,Zc#$Ks$7EpYZB)=Vu=OL`;Upj(14HuuLO=8Sc
%*X5jR1P--:Phb$Q4A\=Oo=<<K%;q5X+NVU'8q.uQ$F$2>84H>m:s5C688^n.:'3j_Q,K*>!/nQHM7dPQ&h8q-3,]_n+cNNR!e>s?
%@"'fF4mD6%L&ga,OgO8`C#Iq;&\:No9`YHq6;O*Ukc=nRND\[lE2<fA&uP`9Cmh%Ah\dQr1eM@T"5G=LV&X,C".-K[b+&[1gbI*E
%![+iiEQ04ZVh$M\PrNh'TUY,!3lupaPQYVc&Y$bA^cN<J+dXr@0HB#)LkAP)\q+*;g`<)^:4,';)JX!(3,8jd@:<]t'HiDfEb([t
%<=g`tWdn:B*b'tj4VF])9m%Rk9`ZG9DO`LO1-K*>Q88];."@==;rEZqplmd;J@MI(i\Ti",$.K;*0QuC`4BDAY`u]-!6sG0MCu]/
%?C5C1gp9@f=A1_RJ?VJmEi'rm>V-TO9EE!OA"5=a4R'k$3E)"uO_C(a;h4Xoc,BpX2,t2>CT;n'mr<DN`^lbg2,uo02$Jg!MDR5(
%56H],`=c<Pgl\JTT5`?qpMD<RZ:%3uPBXX)2T:GTHi`<8.6tZ]\2ptD=?-;qRTTK(JC_pY'e(nR$@k*0MmK:Zd5[%7Z_d^7+be./
%#'^L";1"fi%Ih4I9.YoQFJD[*123a2>1-@N2=;tPXX1K[kjG6a#?j+6UQYi(U#UJ'e:raW'<G$gNrk37#m'SKfk,S"WX9o8m4a4A
%03HH^ajFXbL+41>XYo;K&3L"([HPNEg-i)s;7>%1$ngsL[PeQ)9Nbqo6D36-/7h4`f*B0hMt9pl7V:XZQ;^roU(Uf?-IZHaOsAHs
%RlR"c(T0oGVC`5<OXfPS&9[KrZm0mkOHU8KG7u4RIu0ZJnt\[PDhQ'>9W>a_o7?CO8Uo4SGW,"#b+NF+.$BosI:]6_1knS[r]H$G
%b$C[G>R1HijsqQP%-iW@.V1:F@S97^kQ"AsB02Uo$*dT&BQDCd!(<&,BW2a-3sXOr!s9*`6n$@/.#=25d=IhZTqP.C08).P`m`@+
%KNQ$D$CkZOjFpj4XX"Oi(e&#:L_HN>J9"i3/=Ft]]GL0=q!^%%7`+(e^>9:!,&AtJ`^[>MAD)P?CN8H1a3j2<&44]"`Ml"R5Tn1U
%a:'35!Yl]r6m4lJa(&G<h+U(Eb#&7ubTr2jg*5'@fh7"NL,`i^3DS-8U@NgiTh'59MK<VX7t]eZ,g/UkdZ/KQN$=,OVl"pumbgH1
%<,Wm0@'L^*2`sqoaVD$^e-s2@:;X7'#U'3b2/rf$##GIe)GnqGdR]C)CJ"c`NktNc=cl<ifcJ0KFIkdsP@l!'_jE\`*Fb_Dml5VD
%0JneuBd4K<ZaT$D-c?'c$BAT.!('Jr.GPY+,>eJ1%4hr7X+dJX(2("&;m948_%L3skqQ%K@]b]p0@%?G<]-.pT@m]4A-jdsiOQD!
%J2dpil"lt@%\e53iE=:n8]8u^ZjKo%g$hGq"HtMX7+H'"J5k)kgiZ%LJ4`$<i]Em%8QLWk(8@s.'TsZY+eLgPU8GbEV,ib:'KYf`
%JrCC1673HR!jo.g1N>GaV8ot@:hta'=+NOD5%nJq"1("NT.s(n5;B.rm:P&2ldXmbf;a@8;fVA+nk"VTlr66lFaS^j:X\=Hi7;:;
%6!HRlSdT)gA]EMiY=la*^^O3]JKS(hM9JdaBq"9b5i!fF]5)lJeM.=,0FKao(<YX$(7'>o)UQ=;4O;Ll'gTX_:F[h%Y]>.t;#r!f
%[366L!bf2J!Tdq6O_dfp<&gLe%4E\o9-uo+]`@>&X;S(3Qp=AC=Up`nk_]]hH/nMCGU.7X/Up#_@9o73l\Z%M$oqr9iuUQE&f"4m
%.NHT%-n7kP]9uJp=;2[.R\E.(\]-%(S:N!9'bu./%O`fS<7^S^7>29K"bEhTO<Lq+.Md+6+'83Em=6T(L;%457,(j*O>ih$L$Q=E
%ZD_Md5Z(s(WTE?$b-Lgt8>R"O8#UH&F\jNaTdqUm+>brEV)Y4aPpK3aj$m-[)=#+I'#Y\b;ud'i8QSkl^e]PsGR))=d]!V-MN)lm
%C5".]-Olg&)6+#[_=[ed.s+3kaU7g]qYAR'LmQfTl;Ao7K*!i&;;(NnG:bQ4:`;/aQH<f*<Mki'D4.8W%1#OY#eMD*oGpO,LjC`=
%.H=?7VD"Y\WmaIoE$XO_^mp"YQRks'4JW:+f8E6Z)$N'!F=7h=8LR`>O$Fk<W_OXeL<QYpSN]9/-IA[c*?i.0-Gt363ej6"EG1n3
%&s)>M*NIldAXjj"Njc=,U/%=_k_:j4iApPCI)pS$<Mtnn5UN>+:1%3:;5^T`<1U`-e-q:>G0Rg-ObEf<j'\HV,VJ/'00#Z2&4<#_
%i`#6<X?*-J?@'oQ(8[OCOGd0Kcs7+WGqT5);>;$<'(3LomWBLP@a*L]#7D40\HR9,lSpXc02HmOLcXcp!:ckO7cNW5SFe!NZpf'b
%c[$0Ldh\3jFOj)eHQnb'QPIWM9TbX'B>)A9K57U.=YDMUiD_iYocepY8'm9BOmbU;Lne9[$)qtpEMl+P;/ZM,8%f0/mB)Cp#m4D%
%C<3/V6IZ`)!Zgs^o"!IA%S3lR#1SSdQ(*)khTY%+@!pC\&96R*:3mp3*b2T.:3mMhcRk!;?3Jo8Ps"<-I_I3GOsdq&K56>O&N]0Q
%gFRqQ4kt_k0+='OWNsb=iM^RF2`#]%-9gW^#bMUk&M`i+E+N`-L9Za`e+r!r2ZXKq]c'QaoHM5\?1";O[ZTqbZQ]m*#n%4F`'H$_
%>:?)2TS$P`aA=k8nt_W'Ji/?Dl(teL_'bfG,/isQNje%@060',KJuUQ]a1=4!ofF#"@SjRC-Zde91-\/*7GT]aMM;0dRuZ!4sWB@
%]d-e*H`?]>&irM1=X)uFVPQ4mUnJJm]iW`dF[43n@qi%N'S0LI-@lG2h&u"pnJW.k(arHRTG8<PWbOp-o[A[_'+e:hR/g,*V)FR:
%[FAef-(,Z\U2j1"?;u,`1o_`r"O]$8hMTX%eOYp_*gi!<Z:l8j/:Ik!*H_gc.+Ed!&b/[PZfHd#94P><c:cBh`C[3UY;$M'HA6T8
%I*%nUGUh\?.%k01<Hl](?5[h"Cgo7T)0goXpL/>f`MmV]gt%$;,-EL.C52k=o&GqILVYes@YBI<<GsF*28\;p*LXF<!&fR/4hqdc
%O?nK,&dkRG7`?:K1CC(O)ISDbIV+,<3Y(Ik4u0qEO?bqB(EXN>NdQdbSf(p1N9+b&0o,0O)`XI64OCB[)j"N]/L$`%JG1QmOQsKo
%_6Q4QE*SnL+@I4CMXplY&t]tR0QCDa,B9#QS/9P*nl\h8?9i1,U6L_a$P7/JYE:!n_D%B#F1<npDrkrNUQ,^E=/A7CirWb;i+j(M
%Zn/r4_t.l!>!;8_5QN_s\frKtE<0AH'_kl1lQlYX:rEI+jopA46,33)^r+4ZI.?it3%dHcM,H!H>_!C/d7t(2_4k\le&9&[X?q;<
%J.Op4Q)=d(7%G)=J94s[6h)sSij=5KA=l+.((aZP9Y'1l!MSrX**gs$!>=URA6sXci5Jh*H!9.bTr&6p*?jW1581&f(8*(cTqaPf
%prYaB>2[@G$^u.t`<?T(SAo"uf?u."&H\Ir((?BXn,p8m\:A?-3ShWo"Zdnm/l4fY>_!Q318*di!Y:1o7#?a_/g/C]Sh8s^!\@P4
%>Z6ua6#dhZ;#:G]$EC-a+.2+"<-E%B<To%M^l\XHm:kI@H#Z^HJe0Q^er!`Q/0L+:5>eZn6@>qJPT/8qZL<?R(BfUH9\^&/@WAPF
%`@_F9>j78gYm\Fe&VqiYEI:PA,I5t@i@6>I&3guC+O'NN@Ma^m16G=g.YNKG;+XpWiqO?EgG8PFZ(m@+F3JDN&&<Ml/QWq+b@27j
%qLNn^SuNSH]K"6fo*Pa04e2o3&W;\El!E$o&=9aQ%>\ZmrkN#qF>o]5+g;0hWW66cpIGH@#]\ph*O=T,JRX7hJes)r7(+Lgd3,II
%70@9O1;N(qXcYkKn<*cL_$`P2`^IoV;&Tq/]HC$5a!F>a&7W61@89^<a@:/mV$68->9O([[Gb?=pU'K,>S5lDlR6Eq6[\a_esci+
%E)H+V&G=DLf\C`7S#JOqL]G.S8_1Kr6mQkR]aK[eWRna)K[4dP]o*(loe%.Z@m(S=3aj]LW9RYFTW!(Nh%g1q=/AjK$LL'X;paf8
%*4j<e4FBco/dQGKEQSl;'R/K6H5G'4TmS2;l<OsqN]EKYBVc\q?qG0S65-i6ASIC-G<pZ=bORPomt*fEi$IYo;"Y.h6I`Ui`2BXe
%["9(s\tZ9t08`YR<7JNn&681n!Hmg'AZ`N7K*m"AD[fG*mAnD[S5<I+W*`VW5Z5quI2*$m=CI'`.WDc1(7>JS?NgL"$<>k_JIk](
%/+0HW6:3Ad\uu0d>\bt\X)P#obgm;%!a2P$Ha82UMA&rFf_:,qh,iQC%2[(GnU2/1/P2:'4Q;2/EA)jPYX3tULF<MN='![=Q?XI>
%N&f2HHLa@:EFf<J,t]u4Pnf+dGl0GMdXb@WRPMnj51V*e=VrN\`17XM4S3$;XmW9`V<)>p`LRaj=k5(nSJ;QpGB/L$.hI,k@T%DN
%&._K4h+r52+@1`.3(S6od&jYh'l/"o+I,8,M+]?1&iu?HP9JbZX$N[o.+:k01T^*]'d>%c,W1V'F,;t/&1._jq9B<MpqA-cV`QD"
%-Md9`^9`E9C:i2r'aX>G&ajTbprWfh&%U2FnYHu-8*"M6<'s!)o$nh0Ba)cIaS`3N["8jR@0^(A5t&d\9=hK^`57Gu0ua,"j:eE!
%\?l;\[O[RDh*s]Sp5J(/'aWluFB(,(QBLg8'tCih-bMW_Ba"gN'BdY-;b2Ue"Iq*H5fj<@gQ*4N*Q"m$QWAViR5LLFl64)%@Dba8
%*b(f1U1-,]i*)n+.P%0<%teR'=.h>XV"Jj!A3(\2dnp]_[<Q\AhBYb`H;Zf[f.q[YA%Nt:&B'4koX$!)&]0!WQA.`!l_mbt^8H$<
%REa.\1?YLO-o2X",'%>M<%>ka@3cJ*)V-*8VeB!H4bU@FrN!D:];q"28+q7(01:TJ%^hfJet^Vk96!^&LVu29*QU6(2,qeuGXe6n
%0k)ldA)u[()-B)R*!j"&2'Er\+j6t>m2#i!!L3Y"h3AdqFj*-C_NPr/r$j+8Qfl;_\L>HPnY3O1DJ@IM2c`In,SA69R9WBi(>Tfc
%jPX=&Sp96:Y=/&nVM$Q/U`]go6\@XUmsfG1Qfo0RB^AT`$lSp#4_FfOAo.qK/Kr[%l+TrBkY*kO)\_Hcm8,p2Ls&+W%acst;IOg2
%,X5aHU7MIbP3t0'UHH1:%!-:m#__$:lmRC+\N%=dS!Qg[d>"MSk^FZTcuh!pV]cNZYaUOm&O=a:H`F;VLFrm!b^K,O\7UTpaa:no
%2EVq<+AhEtU-ONiLO+&n1Yk"1!:!#aPNn.s3CdO4HFniB]FGG/h,$hI(cXm6c"l@u6R!\5"YP3gK7t"FX1MIgD%naYmK4(mOJcra
%I"%'Bne7dq.;jQ!h"fAX!>..%??%3;oScp\=qG0Vb<;J1$XIp_n;^[k':GJA!::B8Ts"4kl+3$/a_`&C'qaDKcGL\!(:CR=^\o%$
%!"#X1=*C>a,t1]SL-Pb3S2CXU#MT)>#t7r&adCPc7Rts]Una-Wp[QkADhH&-;R#0JDSn<r6P/UHaR:`9c=\<u'C9=oC&nNp&!lT+
%9Mi4\.C!40-+jbr?hg1=)%[,)(tL0NR5![%fT"QEi;dBlX#nu7NH,Yo-<pa'=!(Vn3D@lZ[V7OF1lQj%VHOTV?X-Le]X<ZhTD14Z
%AD9"t=!=PP'6<i[b%F"\T/Lm;60p)I^h91Vh16m;c$kY*f45/gd'39enq^TY9Tgib`?T3!:W0#C[@OHpfbMC*LLh*h-0e8p4_ZA;
%N&3ICABsm2Y8I!f==K6rnm%J[2gl_NG[tOKnUh.,5q*9o_:[XRj@9d<n&VBg"am#5q?H.D6qRIOA5t6/1^VVAkiJ+*rOeDDRYJMe
%C\(lL@/f_XjO&VZ7@7%r]1.M:6:g\4G$/:-)Ui,rQ0Wo\)+i<!4?.G'6*0;ql$GrK'9*SM.60KT&U"=H%eLIa7RNQQ;ZM;&CUsE:
%CS;01OD2V$9WAapac-aQ&!CX-l^+:+*?-(qVB9ZtZ.QNl<0DR*7M=R6a(e!+Z>/q#qkU)SgZ&M>Rk$R\X,E5-Na:;dpju&MPS'eo
%h/G>'T;jCJ1E(s*nX3nf.kD/oNg0-F#r-[*HJaEGK"I)R);]`&92lgZZ\Lo5!>@aW5d+X<iL_OBbCFdLG+Q^Ll,V,:/DqF[;AWpV
%\4Dd[:bh5;/E#k1O!SQCJ04-\AbeWBf8l3K;*BPpO[PT21@U/p]?CNfJUL47l"a3,B)/MQW<+b+&r_?mY]dY&QrLoM82`h&e;Bad
%j'8ki#bQ>bSKrTdD?j5dZ.>0KT\#Xi-m9.ua`r/g;656^U*[b70B!IA"qneWZGI0m4P=PSN./9.;poRBliF!7biZ5uEm,BpW2L;t
%W&1`5'=K#%4tmM!@u:;&+?/&T=/%Qg8JA&GZKl2RK4=G$,dh/=$KlM[d3OB&`lLh"Le9%s4#AmpdYh_):31DsUP1+16k&HZgQcYh
%>tG-BB(6fd%+B\!^'ju>p-H?Mm98q\.3FWLP!.6:>*dP]d9'H"0-497(+\cJ/fEc,='JaX_,eK[;@f)p/)Bi;Qds;m+D07dMtrOj
%4sa;?,\AZ5;udaN]uqfQh-!sCnDc!7-m:^Pg9tI)*Ib+KmCZ`Mc]'FO9k^iY_"fe5Aknq8JX*=peW3Eu:W7u:SLg(fccdCY9N7I[
%_hN9bO3Os6k><JNZ[m+/P7KA<S576]\$$?V21)t>0qfhY6]Ko<BMRg41Kr[N'>T!Zme<(f("FtKk#`p30)O`-ZEe%&k%qsMAVl6Z
%']As60(Jh$J=Gl=OGbhb-QOi786P/6O\]tZi5W%h./R+6[f+:?>>/]b,PmWc6q-:#]^8'G3tXHLSr8qP+,8EEi@d-Z;>6b6"7UJ3
%[cE*9/D\,#<:Z!2B)5jn*b!m)=rV?L=qhI#gU=+]mCLQ*4ua[c$3H1FKY']28SKj4=U\&>H)tB`g3P<>kKfJU.5>nC/CjQ*.i0T0
%>ma#2Y8[TIRn+$\eg+3Y''(*6N#RK5?K+fb\aj^j&9>65RQO(=75mGem>0J@NtKZ%K_/Er*fimC,73/8QQ[^.m,1!j((Wk-E[_Qt
%RE=&')i55a:0H/#cYH17+ttgRfiU_6K8>O,9k48,,q-mT1/Xti,9V\P],/GN!=Q!N2Q1oI%1X.R;`8q`^>-0F,(*[C>B2XF"4gN[
%48nR8,5!hUj5V.(3l:>C-'&lW-bmCf*:W-eon!L<%=D)VR?NI6In50tE.q]6;WV5g_p2k(bXZE*S3sHcH".X.-2^n!CGV]V]:;N^
%pW':P&a#\.&>^Vp$C`@KK"-\cCpG_mBN`I0MLfc#JFO7XJAF&+:LL@We3-4T>o?J]=859Pq[&W6,#gJG#^#D].PDqG!k(d+LL,3?
%l*e9j.Prg#j"&'"[WM_cc-n`:U92jfCpp%[Atql4PEUq3["iF3)IfU'TYpsJB$g++]Q/rSS[S7&d6PfMCRh1)4HKen9"#<-oBV7i
%h#/Je6`k[`_Suc`g$;H'<!"pr0%81a0DB;;Ko/16)(XCNO'iT-_eh#Gh/,An[KWqC>E!cp$6\)9o@\>..&RAnYa@\Jd;a-mU1$de
%B]io;SuY@33kT^peQm@^B9frLL$T4ZSj;u"`grKhDmT+rK=_pG\75rSB>og=$l&KS@8gh_d%1s/3O);c4j:)8.)<0"N4;sJZW83k
%,+rciA0XQ/d6ga=Rj+MeR(;Pqd"fOaTL$X)./r&UI`3P)%@QWn]C&'P)a'3rg<(V4Ct9nh76hg/1oWW5ml&-7E?_&@("<3Rmu#pD
%oj.C6LWQUej2:N3e1qbf(ElmkGI_SkoHQ.Y`Y/?kX][$)"[MVM-55ME5^W&=Tgq?e6U!67fjJa+T`"K.IB42;6P-\qIPI<49uY3:
%'7umb*M5qi:e9rgZP_p)pC2[[RCDNsk<)QD'G;$2T)^9ghZsWc!#3UOZD&!4]dk'(TR]4E228=8.$2Wu;ZnW)hmPlSAQ+L>2L'<q
%;rJ<bYQrWGM%NR'&N@[;/HXYb!lY.Q(["AKJ"e0f#>QlMf`>GR3Y`P4r:P?MN0W8=Fi\.p,<H:5@=VVXk918=%5;/_GJN5E);>]m
%fX^sm0R/ps8Df-kp*R5=YJS>Ac>-&In$dLjH)s7pR_':C\H0XN_I1EG"*LE.AsjZp#.:89E]\/("fM'uj1m^cQ)65s%S5KN&<nUE
%!.n8j:HNH=OkhbQ^t;5?k4p.9s4Cq>"7o!c@_%gK=fQ@/B$$%.#XL</^m@Z&?8q!B2D3<caW3Z$jGqIO\;nep>euF&5*tAkd>f/K
%Of;j2@GlE"lQ(A-f#/e\J]%@@grf[p<Lh>#3%dq*:HK&eg(fW+4)V:&HNZD?P*u'nNl,[qfItru&DBpi*B19!\mrbm@'"&@1#tO%
%q(]Zg0]Y\841-.D6]Kg:;*nmGdD@b8W:aZ@OZQPJ_Qi,0Tc;38j0r:0N5LD*9$852%Z"VXkSuAgLuYK$K:-_o^7ArWh*2*"%UY#N
%Te\Ea4IrSY1Ch14b'KLr"<VCed>T#Mm8&`[2nJmY_2JKHjiHl1Yr-&*:U"&:,Z.;5@E&a%^X<H*Q$\j2M7lA3RW0P[BQ_P/EVqdT
%is(U98fes.mal9'1ZN(J"u,?4M/PH<V]NUiTH@e]lg%V\<3PKYn%ta'c]GjK_sJR</12;6(-[Ip?8Lg8?gmuk8jr6ZL6prU!$_($
%NEu=Il3]K9.J-.j>9GGmDK.l4ceZ%aBu'c$IA=tf,hj,#fM-sPG2/^n8AsuR?&nZQO2b/GLm1Lsi0q"9V`FU[-TV*hnA_SB.eg5#
%+pn_0<F\/7T"I(3b^k>H13D3U#b^4"huLkEQD]6;gJ4(@`*YF]+HgkYX#\+/'r0VI'$[Cn1gupQ"XU@b`GZo/:8P^95YJu,"V9_e
%;jj^'kT?:Z3hn4,T@N[iap9CT%&Ak49,V(_GiQ*(G\l`@)6-U>Y?B"h5=#9SOnLhSk7V7i?M766AX3%`@I:iP^W/LH7i3$2b''@d
%kV*c;QHE`!hU!]4;-9IpZ/bauI[ih8e6WHUaS?Cm5/3632meln0T)J6TWggf`q9DodroZ9mSstpOCL7O_Voh0JIQ2eZMet:?u&:l
%]Ee'ImrhSEE-86mq@HI16;q+pa[k]!AmK<\`e/Rb]gb"5A/7?oV_`ecD"EN['!ra>4\*WdFEnRL2I?8.4K?It]t[YNiT;"[eon]Y
%c`1ZnmjJK\S/-8WQO/Hc*qf&lk\iS4EE[M=*S8dWI)d9RpD&<W1Z;+jPBD=-cKQ4tRJJ`3YWU631b4/WIr(Ai[j.c/3Ub";EoCLq
%q<`/hrHdT6V@JQUAMNXlK($oKd,?=5V\oOrHid^?S"l%rPq[#hrH5^WAUVMT?JD;@8,R^%Y7W!sde7at/rL6q>Kt7_G9Il:=_8.1
%X-9:pZU>nc"Z3//Y[P$,,,eMUXD,SidAr,SMAU'ZN1bl&7dhg':d^L1<kJk13U+A=o`?"t&Uq?(`/R#e$t7\P;(QUGLl5h)83kF'
%%c<Y,e"ShqW1h_u'Qoi*BpbPUoNtW$%j.B#?>PoIe*tA)oaDaX*d1676UCt]KHHY*X4O/BnZ^j\$,<8Qg6c\ts&kg;e,kaR@0tPj
%_65Op:qq0G/.';[P(]2FNqP\AQQ+Fa9a]ID`UsX/OQS-pSgKY_B)"2_[NWYX5d!U02:;e=HBHI(A2ngKVSbu<rILm:Dj)`T#StH?
%dmM!H1>O<$.dj0>7S[B(_uRa%cDa(hc2#Z#K;!6(lUa),W=OUZ=SRJHOMr]*4Joq=\;CLE<8G>O2h?>So&."ajs]2_Fs)Kb8lpH.
%NBEBIN@!'qT59I<H9:RX9k$?g]NfX*3U`A*`\u^(liBEl2a8S*Hs#8g/gTA-XGI.h"Hih?DX:(Z'['4FT>9s`#Y2-*3<astM;.=i
%7f*8!C"T,e4uGRg_X`.Y&m#?'+&94srB`E.0p:q$mrf,h`M0VRp$W?--XNGgCKuRY+h(U&AIlVXFb>,AGlog"o6=Rg<!n-ojK[tO
%`F8O,)=g786A;ckCZrSu<V2!]h#Taj_%uWGhD`r9QG+&JUl#gH1CuT@@f@^lm7s2E=jdD2!0%TsZ'r%)-_CaU]Vq819NaR+ofmd@
%[_=*gek@s80^qbU$?0'hQK<0josTUXpR$gQ9(1t,,e/beBmL<cfc+cRrtBusj"<I_3t;>!%)-&R"Z41;OG4()@0n"2-t,(Tg!*t*
%<N+ZE6Ib+\cH@_anhe'C8>N(HHE?pXZE#??)W75Rd27cY(t7DaP+X6)a^W^['[u8T$X>'VJWb(FRWm,U7&q`WoXSe;bmtshb@oA+
%(lfK,H>(c<9.apn!m,'aD=@ZNOYbD6<D*^VmDe]RC37k*.DZ?r0+R1rl.3462bFqL*g!bVa5;QfcLe"GbuG!5.q;+i";O/7,p_,5
%SJ;)Fbr*M(+@8WM]Xg4IR>iYW#G(N7(Ip`)(X.iaQ^iGPSnk@^aaU;s]#!_J0.W&o#/,F>M1s*X-/PGsA:6(G":#Z#PmI0oU_jJL
%WXca6LVC$tm5>@p)!4,:6HPQ+-/HG<57^1%kMGlR1g#5Vn!CkJ1r&3VNcIXqP@9]SglF,lC4]95)G#hPciZ.9Z:eO%TL_eXhE";l
%RYE)7o7.)j238[H8;PbP!$dXoO@a)9*,ellS0=9>9)9<42nX.0"kpY+/*Z,W)G#gP4@Er"p66(/$_%]=8F5m.JXU1^87q%2TZ25O
%*#F8n%4!$Zf1p_iDaACG2-1W-T,_Apa8ZKbTI._oW$+Ubnc2*%Q'XO[LH#`R`ouf0)NNiWFHE(G\S#m!-C?S>]D(Lr,`1Woa+<0#
%m!g'o"t9WqhFJYrY.II2S5liiqh&/_Z=dDb-rHKT^'Ns6Q]NqW>G?H@"V9);Xm]\e+LtpLhd=Ij$Ne:I;<#qgQCr-$b)?>+,j!L>
%]>0(O=I4ut`mL".p"BU&]c]rRV=;B67d0(Z99S:[N;T2?@,btEd5'5SM4rZDB).NJbVBG-ZSYRp#diYG(85%TBLuMc10ZfdP(U6.
%_JnMB+f=i2[,g<7jrlK2@lq`$OHq-qb>4cWfu%&Z&noAj&OMO<b:)kUrfnADP"]#*:0.Y>2eLmJ0$4g4b[sM.ZK)?rP2E`g'E)e'
%lrYlP7IF1#C-*GHBbYL?#*AE;>-,Sg&S)2_\2!X_&nD<*2=q8!9AXp!UB4Rb30GtV"BgnOEU#K>SqP&7$3J9]mjKIQ\VtCt']c-*
%j:l7C=2JM$=G=#5`$hT)@i6O.A,-ZK@nCFBU9^meh)*ZT4FetC#"*J?ABCCNlMB[o/@c_/%P.ifE\X#k-pa/(%FWQ_aHFJr_tL0A
%/4j]GPWpt0V,je!6]>T<>`@c3B[.qGAKHJ4/3/<XKWJZ7q%6XFm)3"HB@4da7X]n>*k_SKc&<3,9VBck$Y&p9NW$Kqi7e.'@jpt%
%IjL[Y7i2\h.s+,ZP+AAAJA/5a6j7*L!&;ipTn';],h"f/66G>a4:HoRp6cU(KoQfo[pT7/WK_<X'`.Afi*<]r[CW&^`kCVR-m7!A
%;q2;1OZY2XL'"r\pAH`\7M<8l0bhF&`ROc>'Wr\u$:bqG+%^@!j^3_X:q/8>'S$4ON^p"@^c'16-6,YZCgND]E(aUV&^ECu!F87P
%O\b:^`p)`:]VBUd.a_)VY?5>-f?Vn]6cA*\.6oK8Q]])N<o]Roq,g:,<W_"NcF9'hDTMW^-(KC5XFr)1<l2&dj(0M:6N@<'`oE22
%,g2\OgMl,D.#bV5\NS[?^Rk9#9cuV:.DH2ScP[sbkE*4`_Q[aOm([JEO>Xa2Ii$,6n,[qR`nQ9$CVC)s>Pl'D#d4/Qo@M3:VM>LC
%.^N9#VEA2;KlHdjI3g^:N4b],%-3&@0OG.[fPKjG$O'a'S3<>X+!k\s6KU$E\48?MrSj>CPRYaX4@4HK1Bn4LC2Zt9OjXEncT4]b
%STLTE=dB%+>;i[H7pq9?C.=Y=^*$66Tg<mad06hdF_[8:CQ5>_5=S!"<*6F?1Zg&2k,52ELO@XB_c)Q+ZH]'QGsNHnUGYjj-4&2X
%?'/RCKI[$1S.hb?@G#=-g#H0+CG3?pb/YFZ5n_V7jPI2dQ%Y7#3qpn$J]'($))7rF+O!InK?Vi-mu?^h4dl&+Gg>b$A83e\W]26U
%q8Jh6$j0E\1(7Lbb4(EMX\&LFmYQ;DYU['M-q'sFOEpc`&22HPR/8mfn3M*P0aKWOk>>m'c7d1?4Tdd0Ig-u1kdc^ci8EHjLi@LQ
%<:]LO$g&rapa=qtfMh6O^@p&[mVH553,*QK@`K)=Up)&0[6q`$.CD:("`QD6ViL$()"=uHdIOuPLc<m>i/PuM"ljV3\<5[n^k+lC
%]+S7#*YQMD#9bh[NSOR:$O32="b?[V%O&q]%L*p5ZsA'"/5(Zm_7B?R?CGnob^s0OF%T'g/;Gq:U^uUjXa#hfmCF/OefaaFGI7n\
%*#D@Gb7XeMFt6Ku`EBln?>YJ*ln\dma'Jj[H,&0FjK']"n7W37bA6D518*0qTW=#!OP<Y#RfgGZ0;/K`a\1hD+B-dP&mP]e&./M7
%L.O:JEst%"/^TH/^`bJ]6O/1+@*soLJ\]/9?P#3m+'F*X+E/k\_$oMR>Kp><4O-F#Y2smbU@E%uDMf"p`ZDH>&e$=Pa<V#ka1nb8
%THh7_UeLk/LO_a*IDd--:):/M.564#h_/VWHQjW).6GWk4t6s$?[dTo>!n3N5<b,$"*%F=nOtsV@uhgnP+urjd+%W7PcO6LMa>8<
%Jb_TN#OdGeIE-<(TIVU:7(b&e+_p@@bBI+e7J,g:K>n*"$9/4pcetSZ]OMZ0<8:">FPU;_Z[)h!-N=MR/C8_aFf&tnBGSo.9\Os3
%+0RAi.HgDLVYkc&T,3n/nkeXT"%gciZg05c*`lP6:rgkFV2>DF_TlM3X,EMR#F9.16K]MjUmQ5e4D<9H;dY(#6[45j#e5Le9jh7.
%AO&'i>sQb])[liIEER@D;:'SZP)]`:c@a9d#dT,R#Q:?)IN1Bj,SrNaKEBKk8O[c0erOKsK4TbRFl!Dn[h=,mcXZ2$>TT^E-Fm/`
%.G5/fh]7h-B\5@M."X8[1!cs/4O8/p/JLK;@OAeJW"`@BmpbH7I$JJRloaGb:CB)mG6!JY#@Zd=n_f-hkOF^)rU%sW&D('776b/L
%ei>E_n[</F:Z=g8]+p\6G+Mp8qNHW(-YK'fI0?-[jBtln/&Ci4P.a%p+???c(__.cFDeL38gKIIIXaLF(QT7/Ges"L7.LU@OF4&O
%F9J2E?XD%s8<2*,&BkHpL<ZL/o@t/%hfZd,&E^'M+MmZ:3-eMYMs#2G`VkDOYpQm')(ms14+ZQ<8aJYX_"6@2Q6d/ghKD<p23<oI
%?F\mLq=upQ?bl9oM4:Muki`WNT*[*^ksCKZIE[1PhtEq?GVPeRmR,Ws+c2^a,dF[8:9daZ+W9QsoFMX-(EOln(4Pf=ZnO,sZnQYP
%X72!JVa77A%%!eh+CpO2_9_-HX8%J=\DU9:&]Yq<pD&<W1N=IYAuhMaqp&m`ALO)E1\.k3mkoJr3<a/H<KO:*hU$KS(*4'[/H[.f
%)?5LX%tL-i1at>F;=HI%X.]$VnrMl'CCp41^5U$pO;OBJ\C;)dK;;O0U`o)ib\j&>@&u*uUKE;i\FpSpkWUt**kf4K5"N#H,%XVL
%Rk.*h-8nIkg!UTF7:3jpL.F*G`m@_EM?#H!'EKAfh]h+9'Rs6-epX;)X.,&JNckJ:=2>eKl<[\bKnE=<<J^]^3oCYoaTSsuP.O]*
%EN*#!*fE]N,j(o]:g*>G`Mh+)gC\I5n3II)j%TnO!*nN\TTsoEBgl@d!e`YXEGgGkJBP'B;m7L_MSh%dc:jUA><up[V6Fc,0T5)M
%oHh:@$LZRldB54:gqBeFM\2!okm=d#>M.]E^MCnd-[C:Q+&dnKRB#/sa@Clj>l!1K;78A=jCe=!lY;u\'DlKdRl>q!Z,arYJ?@RF
%:>ptP3F%BPM<3,7hT<fQK&6%BOu@?`/(&HAD:-$*%,9cH']3H4CVd4A-h:_UaOBk1,Z]P)dE56VXp.f46C(X+<TKgiJ?a+iBOaYf
%.ronL2]:iK)XLd]@JMf=;B$*O>Bqc4M+i+8FS*_l'A0V.?E?^_Cb\EQ=fQs],[*:e&*Kl*$B4?lRr`RjcMsG2]#!0iP\$-jUh7XP
%5%u5Y]om9*UM`1\bJ7SbkH_%7N-c1QZ7!"T2%5WYe5Ro6gu9!mDpfRW3^E[8HtiY*4[RFL#ScbVnkC.t!"#]"oMs?MjY2eU/[X])
%ku2b(poWbP#6=ol;I!KJDHt0t6)/4Y>ZF]bIhCs^OK^XG7[$u73"WGHm^3*N,g@,aB=7X[jrnBtGiW'^0s!p><tSdACHaTdP]-]?
%MNhnd/>5J5fO\)fQDXTk:R^8J`iti@XYmkq@AmsX'(^FPA?o(=mZS&-5PS$!;U;dnN%UtV"os#[_s)*+(c@u_pe?6-?:Z$'rSUb<
%W$B^6jLImq$jK;S\o!S#E8"$g<\\P[OWc-*O3O&.d(-KMK'B;C4!t@kK0NdQcaNWCb>nqRGRg45:e=>ds4OuN8)qJ/VW5e4H0`l[
%##07EVcBGb9jk3ZVM"O"/45MdC>dLB-m.,KcVBj\N:=J)rZqSX>3smR"4i6\e[)h__N.umP$QZ*'-(`uaram^-*a5)7S44?GE>rt
%91*@oLZ8h6g/9#0pm,clRP7sJ0W)V-L,.o7AB38`pf85/aK5I;UHM4/)/[]3W@;\<g%C8emH\1j+ooHa&#&+khP%J*:Q'Q#fdY.`
%\ST[eqUe8+S&tl_B^Bl2aU[!([3Lo*78e]FCm]([XMu^VR?SBca!o3OcSkX-gO?ld!#+IYk=`37q`*R^%RPRF&mFn!o:]tHh!__j
%W69X=Em4@(*PTaYA>^;0EZe,D50NP[Q_HP.HWbL*?`=Dio\QsBJl2U`\$U9X&!6=YDI#>0ajjg$k*h;@i`G<s&7Ae^;]eUFUV_e4
%F_ak?Kr]\r2Wi&8R`7GiA/6drLcT5ID3\)HK43L^(s\2]$Cu.SBF3!VoFof`TF1k'SNgOe*9"Zip.EhO"eCKbH0Vhi6b>H=jVIa3
%h70b^TDKRIV=OBi@)o>i5F!IM+4LmocOLsXf8O)!Z5.N-%sSstAGFHZH!<QN+J`$6;e9?^B(&$l?jT]sF0uOpe$D6''V`KYmM[].
%^sC5tmh"I&@m8Ee)+/TXg(S$CH2!t>Mb817HFPe]^8l&4/%mG28qQ2d69?=b.(O:Hk`qY-3,4>n)XiN9_3_^MWE&/DmcWP`W@4g$
%1Q]HFg;@7n[H5+O\?_We*5-4#nOAW<Z0WuoA.Sse0F0[W_%F3%!$4LC^!uKOp+HfZ=Lp9SnRW;n(*lK=c[l^i(LD8+<L&TT56tn6
%SR9mVWi@oDfDuc22H%5_,eO^><Ed%o8+VV!RXRTA?^ukQ^>o'+"JQOtfT.;l@M!9$r(1P,cL6H94ek%OImtIpkIH>Ud(%L(p@7W%
%9*[gH]Nk4cbl.5[r:er%?U`u@SiKN],g`!CP'2\@*sGctG`$T\H^e?oC6k+#hI:@-HYcD@,SVU#Yofo+8WWJ%#Nm%R7_1J.7ge?\
%h6%pu+)_k*4O4='beW^[(8@EIk\o$EDut8oFZ8Mh<^&Ib[3@B[g.`k4]\I",fZg:'9)"olXdFS%1C?t8/PUS&b1X,3eL7:Te<Vk:
%9IjD+B@>;P02V*oeAg&OMueIiQgFTZ1B<-DG._S4Z%.2HNdFE%-Dld@Ti.3p/fYXBBM]OrTIGY&^"jFM8US@E%[HE8O&j+^&p>.K
%l=,upT6&Udj8*5%3,He!iiA9frBg.;SOoi(GI[q`?G!sgi2R.#E)jA"K%t7pGcr'"(D6ma811@rXJ57r&u(O+BdAWO)fdIW\4"rk
%%W^6_TJW/*DY@LiU^d".H[\%"7hPa!,Q'b>b(%5D7Q+]G!go$I(j4gk9B'f!8`H.mm3s*rll=USQq;$]C@G7@MJ3ft2T%s+/sFi'
%e;C&IbUcK_me]V`:>:2">uo4"[ogs7(>(IfP\5&VD/4<gYpM##)l(U+;89q`&`#6%5MmgS)okatiY%;%Z8p6&<0:6qS]E'4c9+ci
%_C*^1bq&2Y$=2-mCQV%lEt]W:p7)20S_B._r=m"H<*H*jr)B0;X59n3'li8",j]5](27Xeq9jNF1gA5aCY8t<a/UKN"O]<0UkS!/
%DHta;Lp<^@HH='g48K-Ub8!_2\^bOD$c`Rr"i.tS(ZD_ti)9opdqrpFjP)j7h5*5Z#3P]U_r@Qc@6,i0nS'K>BaHIef9!trG%S<?
%TspW\Bhi,-"BBf;[K&o*/7p>fQ4_(PiMpWfN!1W1D$ZF9;ft.c39Y-t+E4,m"&74uVACEc1tkG/[C#JS0?0X(Gp,,ODb@?*T9@OP
%lQ!0"(2$r8s)GXMqA`h>H\]dDK,7.GYp<EECs(^2m22aejQ"LPG?hbdKb^%:r3A?_huRU\TpNE=P_9_@$AWpNZ?`k^:mg#?>F>5_
%T+u*HS8R"D3hG%nPS;*oFu\1R"WmpK$4GXZct1+p*U]]6E^Pmpm&'g/Ydu=9n%c+P]\aI0l/U]5"B8JI%A+eY.AkT,e%`O-S?H^C
%hI.j@kbEn8s7[/G6O&$N/ehXolAYbLf/K(O$R%6$$\!JbK6):5$RM)__s?-IIaI0o2G$'2/!K@Y/",P=lTPW1U!^JEbikhmHU1Lo
%X7B-N3j2mAp'VrW-W^O'K9CrNUS?c+G`5:m;kM&<`,hNP`r!(@DO,K7N7=cf89c@GY;-u;ff!sPI2$E_7]F^@"=mc=j'igKSp`eG
%cq%2K-dO;P@i)\S2A>kk`h%C[XrpF&'s@F&&g_K4#G4Mho=9NAhKrAhO35U\`ng.@1uJ5TRD^/m"PcNAOY@7g0BMFHr::JSdrtkE
%nqsOP@BrdtkNuW0%h7_iqC6mJ53TcJ^Brq^cKue;rTi:sA9uM<^;1)ChS&=Hp`fph`Ak`KMiJsh*!!6HeL6BNGRh!'_?sGgMNLW:
%RY`aS=n/A_V67Cs(@6BM+^idBnX?;g5Bor@h?CMtQVZ#?Muj"0afiVEI+ENR_TtLujjIQ@'?AoCa@M[6FLZ30a@M33)95s<QN?D6
%'GFpS'5sFa*1%h4#!JrPk633X/[2rh)%ME>N[7md0lo?6<caFj\US6P(_YZ/RBH`],"g'c@GGO"oZ-e)CF?c=$LgM6q#:;]E*5*=
%!s/kps-5su?mV+8LVNsn$[F.kn,qC8VccB?,"bTQisIs+E?F9s&c]BQ2n<GhnB)c\LLBQ9Kh0JD.Y*MF)+ems<6BO^q8KlQ7WF4&
%7dMQ6rCXpG7\NPpI?[OYrP^jpG?d?!GO3%#^K+19)VgfgIL(J[j.uc%HYt.ApUQJoc[0LS5hE,r,9!X/ld5t$H>E@4@!DN'@@;/u
%XGh.EV*-o2692+oSp-N?_27oI=+*3).S"J$,7=fl7i:Sn"rtGY<^U[*[$/*M!cC#[-lGM&o8p4.?kJUnNuC"gqmA3'X<NO%5M%Hh
%^!sY1j6g3%,8hdC+@OB/m\)Ob9>&@<HWUQ.l)RD`)G4oW2`=L^,&80XPkQjbh\7(HUGe%4>Hd*9BhNH0.s.$B)E'o#)l/_6(lJ%(
%EDoms?cPD8=90s]><Q)qX'+!?_skX&=[;.T<imS]K4mY[/K"#(PdbC_Y]r9moE_6!Sb=>h%n9jGY#St5Z2jV.L!a!2n]-;F2eZBY
%YQqQhF$!>PgL;rQn?C2=ZORK(11UME@7Hir\j`243=ANJ#C3C1)20B5R;$@Eb+ds=Ko3`=+rf#]PYi1E5nJ!t6,@r!FquLVA8*kQ
%2n.RWb1"RLh[8\?\\$!F]9f3bF2"u/)Y-7mWZAn83eZg,)f\S/gPsX@B,#Zk-]cr5]07OSqe,&nHh_l,0oD,K2#il]O;*p%MV5c1
%3nuJo[[6i\d;MEY9RUJ/;>n>+oj6097[(c7^U2\?9A==R6Ug#KB`C5JnBXH=FRCd$*;*;I/Acc*(Z@_kqgcBf+1EmgDu0C$0V/^9
%p0`4GHLo`K5^<55R@aFPpfX87C)IXtKTg8R)-/`r)"!hF*0U)S93pL!NKSA>?D/IapJHB]TAL"]r#M'W!I*UB/)1pL-3]Wq2:"FP
%<Ri8L7hNc11+B_<-(5OpK6HmXYocPb`?<Z(S4B.'3klNooSi*0r#'i`SECg5UgQ5/H4X97^0]*MA<5"!2a<7Y?Vc'74T[L3?YG9@
%N!XThY8VNEX7.=L+OiZ@VJg8nXe?W;"<b(Hf`C7BJ+1Ns8%T?Ld"no>iA^qqlY$;m^aTML_2Qb_[YqSTeZ]C2#T?Mi5T5_./ip<J
%q#G9'PJTIN7pO0T:gBD5/bl,Q6!&Xm[eI[rO:@.`08!.W?*g*/_DNWHcZ\,EW18RuHb:mkX@[(=9PDaMbmmA)]FP6Q,2gML@C`5m
%/S>53%P.mh@f!c<!a#NaSteHb&u=Z$B=F)_k4D%](kSYSkg>SDa0ZVO9M;<g52`'&F,*n2n[=OJ-[0Qk)18NRfbg=BO-0SL\3e4E
%n53,05N3%FMo&"*pq^8[Hpo]M1%o3f9LCSn%I5MD49,nZLR.Rhi$d_mX^mbQ\]$#b4f#];/(D,iA_EI"%pFVC<ndP2U5fCt^*m(+
%p_=RT.[`_M#R&%sc5/nNiS"Whl7t)A*^E>Z>hhp_$Js2:bZ4q+&/ai]24mDW%_i62%GpSR+E/:uhJHWZ=.kheU6gXM>O!LT2XqA?
%OSC9B>G@2cP"D&30Y\Hf2QOgo81jID2\$R$0TlIQc=WIs!89`8r3>!nO#X'S_E!=g0lC!Qp9(,1Z&B9>.;eAC?9*MBb?X"pO(+J+
%U7gg?0&G^)G"?[O6`=iY2n<iWXWpbubll!@FPZX?n#I3RVr'iCgM4s(QkXH9+??Ce,C@Wq\8PIKMid3>HhSs/L<+mu7:e=;aZ'F3
%WhlnQr3#nPPna=30gW,IFupS-;`:t9%NQYAK43%6(0)q@O*M`rK%Ols<ld\u`an1LiOo#W:!)AQHk`$`%nZ[(\_H2gfs!`!mU\4;
%YTOg3.[R=!/qhb=cYg7IZgBbUfWRSm9QSs;j7DS])$YWgmCiLUW"?7Zmf%lnOPDeZBLQBp'YqUPAXcYg+9IqY;1aKe=LS-6luOq/
%%]*ip$6]`Ge2crq&27rN9.X-O&uqKalQqr8pfs>+ggsn'Q[aiYKn'9<b:+/S"Q[kp$Z\KUUjHuOD@dNq,W@.dKYiG)3SLPNiBm$\
%f(1QQ6<ZPf%b\<5l?Yr#M;eubMF\=S9bAu.]r\5lW$=[>3aKO>7tttk%Efo*#[(CW0SG%_!X=<&SJE?*^^pkMYTned!f=@uJ0B/+
%dj#YFd`@<ZPQJcH#K^42TFCYM]f^:i=T:3n4?Ep4`sINc82#s4;X'n'IC@94L9VXC1uO8I*^jBApZ,@99#)"^.95F0L6)Ud.[s#9
%p@m_`Ed$E&(Dt#-`'/)?6ho06oKIgLp<-ZKDZN3Z`19"O:.k4X<5\(<&4gh>;TOD4R$,j`-deEnDV'&"imN3mO4amXdR\bfpjl]T
%a=B:K":T#*6(Y)jWNM7MO)ogp[P:`-a(S:Z+_r+u6t"+)$2Xc4!Qh;eG2ml:_WWG"r)@q8YJT5?e7kV8lcN2g%B_2`m#XI!\2"%)
%/_.S&.oZ>a:Rh%YSghuu!3ZEFo0Bg:H[GK$MHWR<>tVhD")e<`EVBO3/@Om[U#&(US=(L`1Lj4$X9/c^M\qA)1W*X`*E15l7m<\;
%iX:p=.dEttbkUq<TuMT&RDG,jr@D^"bUXOtc:gYB/+r5Pp_l>dR4A]kbcf8(SJg@\$ud)SRG(%FJ#q#^osjG7?jaJ<gm`kVWV>Gu
%@-Yb_(JB74r9?j]P.MIud8'QuBIAu)4^aSn^YP5:,'bs;O<"[3m'k!@TVW7AeWn@um`2R)lgeR/)(oo)#*V;5Ja:EcU>49WD2e9A
%!p(H!9b(o6`)j'e2.b^;9H@2K+&@VJ`VN$pA:PUlaV;&V.+fF'jiQ"`dI->BT[.h^WqJ$u;3D&XjpKq.!P6_&-d@i`X(e91N[I3=
%TX9Wf1&u2q"n^J9n%JG>Q"eotVa\k]52T_<cap2#4HMMMd>mLCcY\oFX4l/o`*4H98l.E9]TLlh#e<FC)jj?Z^Z'XPA2`hYE(*]&
%>e"SW=lG`,;Ya).]a44!iaAB!=p:#[jPc!%NCnHHBjZa-hB:T@[4oP3IB6]Fd15@l81s0Z#fB46io,+$/dO,s/I2N,,9QK@A/[]'
%g8k/c@;c_B-kPa)goj`A2+DDN+mK3jBRrpFh0^7:G3O)hcpk>$i`SD*P:j!,^!*I2*VW$X@YY6N_Z=&fcoANo84kgoOGJ2@3U1SW
%*Del-,M:c(Qj<=#,R=#YA9$aKo>e)tY7KXS]_#,rG-_FU=.@8J=:`:<(%j2nhXA<#edo6>&O,'gL\+UA]KMf:lu-#Hd()0,CVSa(
%2)D#]#P`9(7_<Z!j493%4beu$2q.rn\ogBI\du7[:qrEn?O*N:<@6,k\rVLdqSTK=]P7'Sr47G?i#Q'=db:#`/2.0cD>"q9117rB
%5]XWBUW6no3d-%B-2GjKfE%"5ndLQ7Pm#.q$Jhrh#B$S(3-IQh/SX5)f_$Npcf<Z?a>d3%)u"=.:R)7ufo22KR)7)f`,Y.R5$h^V
%NZFFoee&n6d9M76B*V"d:)o%Hs6lWki/`Q!#KI<.]V[,7a0%)A,6uPtPF9Pg5+i]Xf/uqb$2E@Wqs>4,"Po?`AN2=Wi%iVraGgLt
%h.LbkH(aTYYs#5e3:lL@.q`,ucOQ/mCCZrlW*[%'T&$S'.!g(2O28.AVnCSD4$9plIPB*.^V$.uh&mS6%uq[e_Vl<nfO88@TqdZY
%#M*Rt!mInO61e7[b0T=DNfJ;'%S4DJrOT`2IIuhhK"Ba)Fh\E^h,`h-INA-9J^E5V"0C#SDo&XS2-o,;]'4Y%U\07G]/dQVLKA^.
%H6MXX\%@HI'AJ9^5@RZu6:Q/$^b.\kh(+m;Zb7G(n7?FN*PYU)g.!XT#>=<TM4psQYhaKJ%!SWs3n=He!=2ZTl(6Rn>lX36grn`1
%L<">@&__8H4<2B*Te:O>1%9uQ+iSGM,-*^1LA*Z/[B%NreX]<`5!7gRMQlD+@qE6'5iu>K!lf9;+:O)sh\<>cp\.F>:)tI*qg8Hc
%lG/ZI=/[OVYmZ_.2ENUno5LdEkK`'5bjGLZ,W(4YQZ+7eRCGTX3UhK@I(<T>Mk@&dI@8%^rnPV`eZ!fK&]3HrH=_P]:b82R,%!-d
%JB0adNL\bH6R1s'cZn,^Oq`-6jtIpn_^AuAh[u#ZA3;K>"SWO.alSpcj#2%[(@tPh1<f[hB<NR?]hrI70cuY_-%u5i.B^:NkPpKJ
%b5H:<]XEoJj9sQ8Ep5:h*bR1Q+*5E\n%4_=qsBk_\$DDkL\?P*_[6noiLbnpH?R(:YmoLYm(g-s9$:I$!<$"B'4&52:pa?mg4Ad;
%a/T54X?0A1D'3N:;73M<1<&nPeeHUlH?S4Vc2,`0ZWg)ijtVSF>RS9;>bH1PIV7'+pY">i(XW=?'GO,nO!OLC<uA#U&-U<bs!A/'
%h%dM.#79+O\mG]bg#8R<gq!Y::><nG3j@-q$JjLK28j8Kh7=n"oX]1'7-Zr1CPQC\\og8A2-!<61'cST[uTB;eX[ek%WK)CGQk[$
%!./uCJbaEgnTD$Ld2Nj$AM.IP3kNhS7PpLGP3^\)=e,87]n5:rrV@RAmL-,K2I:>;(Hrm9.-Oue'8@>W@!@o0oOE^R](L#A6!=*6
%cA>"B-.n%pI&*7d0bHiRA9g0d8Fkj\:YK+$:T9,eG\:dmni3qkr&[fLl2V!iCj/,BYN4CC=6>eOT-T.?)B8Ibm?h<b,eNtmh)\):
%>-0S!5d6I.Q9%WIHUFEPfa.4#[&'GA=Vr/RY3kUaNb(ZuWtsVC^4MCOmhH%&pt&Q'`W5/I^UU%_i>OfaB?8>4^6n53Y((aq4-6:^
%38Bq"`^`@Rn"))o#X?lRZ,0)),p652=[i#FG*5;93Uj2ucUC#i]GGa7iYQ6R*O-I69Jmg.)#TWUAVW/;@!PXlE%:!l;NPJfZdcJ9
%4MYje-.%>?DK%g5QOQT+?@rBQ=&Z[(Z!3l_LR^=[Dmh0%[t%"J4'uu6q@X,dl*=mmY1MgIP$j_aTj)J_\]sD?*k&$#42Dc0G%`ti
%N:79>1SLrChJloH!H=DE!]XTca`]/sas$cBq'7<I5l=1`](CXMloU>9:OkZ?lpVhq6Lmr##SI&t0GPQNrgf.F("1TnO:_FWr#ZP;
%r#[[^%Nmb1,;K1ZclnGeIgH#N-,dQ^WcKTk#dXXH+seGOTCZM!;@n?%*b"(6i_MbkPoQa92:1da]n6%6>&:OSl.nNK%e1&r62VlD
%:=Ve2Q=F%fL]$MY:lW[a#ldZ6_&A[ln;;@lkMa5lEs.CR.pi&tKKga(/<Pk[n'o$3S>ZN4.;%'8innIA3I3)J^X(:I%e.LLj<;AE
%g)F;%juIZ/pGr'`]+MiN9Xch/AFd-taJQIFOJl.QC'.4tNE#t.dearq?3("\_u]iJ+T_RiPW9V7pQIFX=63$.=e/L^_6kU7Df[3+
%Hp@@9DjDqpHp>)]Ej/9H:[F\UmI*.MMtuuTm3aR^./TV=mI,`(-*P5BodOlort-;c58W#=idpHO^fn5QAA<Q<-[N(7&+*E7R8*YM
%LeRZPo^TGmX2U2gqgU-$Vl$Ni3sm.S<4+5:",HPp/X'HJ%HX,<D(H?$UZVaO%KRgL>E#M&ZX4k8AN(]>9tDe^YYDjSO5k#P/6lN6
%>A0Wc<?FWSj_C-iV0Y.3g6uc'87ktY+'l`&Zh9CeQ_F*g8o9H<g6?'P0hm("<-`RafMnbPLsW0-kOd^)OfWV_#N<+td27It?W\fB
%V9]9\GsU7]*f"ad5'\u(EFRW/XTJgDaQ_?W@9s9/6So3EEA-We)e:IdZ*cPF8liB,lT_h4!s]%M7>rK;/E5aC/QXZcBEYN[Zfag]
%e>/+Ei?&@R&DNSD/\mO3^qrtC,H@Ga87;[=4oE05Y_22Lk.''[Umsg=@iFV#Qr#jWBM/n5FYET='t2eS]b9P]BohYn9qSHfF+?o#
%A_-@[X8S?Y$-fE`0hC"`g:-,eL=#._$0n#R<@"`uqr8"1kO:tRl2G<^[P,DtA@!-bb/TpG/p-E'm#XVfTISq]Y>)fQ(8J87.*@+M
%`K%6]5EYV+1Add*[QG$,O1L.]&e$O[0X3PA[MZP$?(rY!.1.Z7@1T[/3GK6JV!M;2=s/l[F7;a%<;'UOK[YsBO(Q4e%)_PeqSkDq
%YU3&[Ntl.u8Kp-"1Bla0."k1n(ACV;h1blXHfhBGa'4KbIZmKcC4#sB&]W]j\&[D(p!!/KP!.^p!mN4o-Aiu*U:]nj'XF;gc^/TR
%p@%Wj/Q74Mp1CZbQ_BK_]?R'lN1$_^!Nfj\(F3!gLO(CEnhfi*7+A\o:u1tBXEu_$ai6hhOG;./]Q%.P.U3/e]!<A'i_I[EiYT4]
%$KB*#FYn!f&<];"nCI4F6+:PMoq?X8VQTH.5U.fPj7ug9M\>>0HR5+Z^QHAmqo.%*?\KnS7UY1(SEaHZfV(`H/>s99nqV<7;dD`^
%]>N24L2=+Y5UB''QCP&Tdoaji4N<177;T43Tt5%@AJNN[XpGT9G^KPqLpgOHZ>&.*_NT_(_;PXP3]6(S0!l1eS%u;00/YP3GXEo.
%oHImR%J*s:,(0-K-\78fNb"RRq"*ktH$r)7q7UC/&'7/CpDH4'3X[rZ0$[G1R&UTK=KlA6XYtasOK`BKO`6=FY=pb3?Ii+lM]]?]
%Pb:@[VZ<Qp(+0[E>cod]JROp*XrIVe]P?8GKEg'XLhlV>FG*4-]4$7AI5\ZRpkH3Z%g+K(:AnVY&+&LR!W,mrBO6G>3\m(i4]X3\
%`6WUY83f)>'q"%]YrNkXQJ5@NDdamFU9BRt8rmLblpNcRTg9EOqRi1V./'UHQKaO%dM]"6b!=(CHR:"s=l!@ge5ZCOfs+e@gt^(6
%GZsGaZ/04)WE&qejD)?0=eusgm*Pi*DAoI)X%F+oFt+Bu2jS#%-KBo3C_.[?D4cZP7oA>UhgA(-W#XC<lU\D[BKV!l5&]7flh"eJ
%R$EU5:nH@N:YD:n@plt\3APfDTp,(8E6@U0Cg,dMSjGXNCWbQYpc(S0"\De!EX8(X.82e-3LGDXgb\<KKAG1&?8:$-V>1O3f^>N(
%:t3Y#0Vp6o=K=0o2U9Tp$R^1dE%bKtWiTO7QOOQOb&sJ4=Zr!H9[SSYH8`s"ldF%&6<TP&bGe)E9rEGX_.9J75cN_[LbE'?E\A(:
%%%];>ENq]-fZSPU=aMt"DQR"V/\5i\fio]2DG@g;O6ZuY=4RR>Y$9'nUNY7k,pSVg^0=6"Z1[VB>-`P-p"cVd"PsZk/g6eGpK0Rm
%F"``tIsa11.-<Z7^)JI6[s`,ah&nH3G5'gEjSEa[.,U#F8pOe$NPq.\XJ5/qpt-=/\&pm9,:k8"O_bYMh*7*5ptKjmbDOOakDdY`
%f@,!IleO20GAHRD>Cu=pW`9g&h[RIFP@"(Xh'hpAf/b]h6st%Sh*(mMR#%nL"d3Wmi48rST4boF)2M#=*Y6l)DR0Z;79_%da*Y_$
%aYQ/p[tZQEjl!h[,hgc.]n(:/qQ]#9)s0!?lb#+-;5FK[mJZQChsL=n\8El;?e';T=r&+L\8M4Eq)ZQ=,:T;"@WU@/@Uln5\[<\H
%o\d:1*BsI?oWW/1FBpZg0D'F9G]#BP&R@<n7X*[gL\RY1L)g_Tki95ljY)$,F5?WYc+T^OgO$6?H#BF6UnukKZQ*Tl/<j+u')m.^
%K2(0fE%^%%fn+e$gV4&iB6K%%<VX);WB\mV@3!_+?,D*+^&,uLm==DurUff0(FsBNr"Wfod\%/lGgkkI0LRZ^h.oRPN\abaTj80Z
%A)5hH'/qRp@g'@_`RL7)Va'fT=0n!-RBuZS!j`HZ[C%hMl?>V$8C@Jh+mDOX8%**$VKBM%-lq',.PhLEd:,K@&/MIT;i&,LNI!7a
%7NMGUpSI5OZ8TUILtSs^oMK:h%eL68;W@]7%Hg5`C5i6c7u-7(b/!'*3!m5p3P05JaIfgP/5(S*Ah>pqhXF"f]=))qboL3MQ9o!7
%G79bLqU4[n.U%5(2#deoM0##Die(J;6E;XMi[YFAIrs<&?\Q)i+^@SEg<l1na-fMb?bC$6/cjA\O54GG<%:42#n0)m\naX%0[AIk
%>N3<\r8"Tt+>M.H)J1r`7h$MD'04V4ghFE[,Glq9k\kG%2$C=%K94PpqJk9H+b'bL7Ul:HFD^r)d\/2sf!@6_O)'W,dbkZB-57%^
%8hr!TX;`IEPFnoupg8]scom*[J'Q8AM?;/UK+ss8T&pon@I8g>Tj"$+mn'"CX1'm_K/\6)`q#-9.H2NSb+%#j/kHg3l;Ro?jr3I5
%2Wo-Q8;9/IQVHSl\0Uj>4(?X[IZ_Y*O/Y-TfthRZe!/S,LWql`?p[*nlD7]_'0MATnjoA,)T5u73qX+OZE2:8-S!k1qaX`.E8E5O
%r_i6,WaAe+n4+<;:InjGIhT+(DfsK#6NGJ>mma0F,mjs2DdYph3$<&#UbL%mMf;.,aP/nZZ51LE#*oi-p4mKKEQgYMJrQP'Zd&"C
%VCC>G%la3j?GdPF"'ahg@X*Tr8D`nf=dJgDNCUL\imJl*[GKhEi"(.LHY(kp1L2SN't"l=o.rli'<Kko=d9:9d,V-<;9>lP0r%Yo
%f[8Q[=,TgTe)"3*1_k*c33pgJ@eVp_lkK_?iR_ZJ8/Vi@JDlDnNsDFmZ(T,L6=TQppjIT/'.9W8al,)15j5e`U*9SY2e_%=6pV6"
%-FXUcfF$k(*nK_(CgfO>5=3^Q8-Bm]DE,Lo[qV>Ql7iTqhFkW9/670J5iIXc)_e9I%":.Y`\:?;GI0k_j7`8Qae;-gYC\n-S1_@d
%F@@m_H/.2=p;5U[Ko82hm=Au[!lq_kH88c=m02gYJPhQI%??@dNVWeG%CR%kl`"=o65jU/"nLP\DsXPB53_.&KH?V$+VSaYq3_mA
%,tP%^#(pNOFelMU,?N(<WO6dK17>Q,G8n5>gWp\Z*kj!pd%YQ5MosV&d<[smR&d_`cW/nNWlpQ?QE-YfOXprgZ5*?o2d:i=]Hjau
%"kCIO>=%<<Of^mYV/>HpVBLc:/G2V[@l<j@>h5uik@Q5FZgIjTC]tX`a!4dhr+Oh'4L5b&pnhJ.n<9sS)eHIFRjBR-+O&sn/$:-C
%.us*RrFke#hJ;,fR&mea:KFP?lB[X8!+fQApA(7i"o'p@4q^Lh?mJAeRjA6R%G@$55Igki)ZqB6`;l\jl^#k:__i=8AH,P#fPm79
%ZbiJnb8@Ei9\-g1$k+/*QY0JK"h@T:'$jTDiH9Rp(61HQs(!X_,\/ESI3pTd@4enGH[J<;*M']Nqg(KN_N8Xf\aNk+$iuO;?gVpC
%*]s8j`KY0D,>"+RY+;ZrP\1tD09Aj/C!J`K@1A!EOnTTkC3j,Bon%P,8-^D4:*<]!FIT\'k/gT'F$\BaA5"30NZYWLh2Of(.Wm3^
%>B4?gKZ)&k)52:;WSa@1PW(fM@a%Q4c#5bW0n5t1FU[<p,KX0#Q-trefg(RE^^VpX=U\Ko/IJ@P%K43kMe:dJnRtPog'5=f-EEQ\
%_tmh%-R$eq(R"eQEFsrjRuelC//L]!'K+_&kfjL7G>Ss&ilfKP#'`2B,^%@Qit4&i(`q4D_S\#b,LcLoTk[ulYN67##hJL*m<1nN
%XION?`hr)c5,og,2."$'HlY"PB4+`EkWAP^\aLAgRYp^81L9/[j/ei'Kuqs)_ZE!Qn`Ojd/dnKY2*_eVqGIDc)#)Oj4mo:Vc[<&o
%H9^JP-j?T>6'F[1Zro,>>W!j#!Ga_6&nXC+A!fkZST7>g`Q0-fQ/R9P-;"=-c1C&nn*(u1c]eKSCp=Ua9!9@J8u'`gV0GmrWDXj=
%m5tfV;D0c8WD\=SPp!;1.EY%]0,el-S=5W;5:9UV)<<k0=UMth^K!gj@e-W\g68AA**\7W,YNdN-;,FI#*0lu/B@Hp.>Q8\`HnhS
%,@ui$,YM:ddipPTb7T)k[90_7U'CrHAQ^0Z]&uNQSS[O3EkbAXF>HM[cV9],kNbZiP:X\$CV5h,!-2,r.i(eQln[Fb"l2f>4HcPV
%N0E;l?FE"RX(3Z08sXq?a\jl[VIB`mZ_`b2p77TT9U@pgShCO>9:59A,g/4T;h29&HR2>dAae)#Z\0dSg.GRP^(eB4XMk%YQXVPj
%*V"M+(5%TF:;1hFmu5+OpFmT<'C4dRYrk+eHteh8I-DAl^(`(eiZ-:2@L.htH+F^IiU@ES[,n$%)_?iBL4g(i"'no=aJE<3fal*O
%V8!bucV)Z:$=uH^0VI9lcd3,G""gm@mgUTkKiRo!a-@-pIbfJ"0s6of1fSJAbeFDTS+_o9ka::^d#`Mr_b7_LXBZc%]]>M+Kr$Q;
%,YqW2&p]4ujCIL%Gfa*$:bF&=)quVK%9s3G;Np&c:4a;3A=>;'#I';<rYr3ODELU'pTj%DKG(rYjcb2Vq-D&M6gsj,O3t/&7\8KH
%P+1><6KND70iAk7n)E;Bh\,Omj8u-dkP8DBSY:hN"$sUiFVcqcq%%>;pgp;#!n[%U>ausqfCQV6Lli_k]O:QY_X3/D;<9tr^WZF^
%4^#kp)S+f`h83h+?H<,_T&:p,S+NcEGKG#ARU>kr8D$Mb6QpjCd2qfj/AD85\qj=.3fFn>-82$eG<N]Ve:7V,0u$@r5Sb_oIb3fS
%L?8+l^Ip=S6QTB^QY_4(lgP&Gn#tp;anho"hA!/5?7oF_Sec_=;##quRQo"'L61EV&@4W.9_%+"%%?TE?LE`QBU_moQmM^(j`hqV
%/\js7nhWnd&YA#/3THDsVotBN\3.f)2SZmeLS=RJ4KY="amn)n.#'WLNgC0DbiOKtn*fN;`XPebrs\aNOg5FX,U0`"eFa0DL@i*Q
%Jp]fQXWO+D3I!n&1-ou7+Or8W@lMIP1#A($[mOhGj4q;&`44:P"aESn;g8T4:kV?\km5%KI?Q?=\M.I]Ec])Z?>g+dB'AT#R;gd:
%;2LO?nJ;52l`5_j!Fs'fWb:fuEo&MXD(=tKI(J`!L0;1lo?"b"pBCE$NqT;9c757&JR),Yo0VGCiF>CRm>ijlIcbEAeI#ue]r3.j
%^nPJXNgml"Z8`9Ze!I*MKGQgkn,=Mhmr4$Q<VX*$oAPm4l+8VZkhLXY%_pou4YOT+#s_F.5)[cD/\u6OKL@N;@6gMZqT5gpNZ#W^
%L19>BfR:cCNcU!Q2bL)B&Ka=d\aG[:@(F#g%$it+2d#Lph%I8:(^u^V&?+PCA)4k[=r)%*ro19d]eH[9A"affOPEnG6I!Goe=!H1
%MfDM<^s:H%_4Th7YN!_nmYMN8C]]dZOfAl0m'#Uf$/![1<n.b#/jm6<fUU(V+WOf:(2e'I:AjY+A?j95U49q:1)?(+SB]P][1i'p
%)h^W\iN`P5a@E"OXNW3mpY5)m%Qa<qN/&=LBj!CGGgO"fnO@tKe4RKIq"jj>hQl8+8I)W=)GuUuPJEW`UMPKc+O=ZLa^F1=Z`9e3
%LQg@3oc>FB'So(;/FK;25e4WHcCI$N5G%<$r<U%((f!,6eRYHBHeE%cOofrU<:U0*r'`SMEEGJ?`%sF[me^:XAjK3Qo5oF2:?NKl
%R!"BLXNY_dFi4=9PiHJTKseMIW3q[?DPhK%ge>JSq:\LUi2Yrn8i5YriR'Gc_>[ep(Q6WeI]k9[Z:McpN)B&D]!5g;#:oq0ftB\H
%SJb*"W,(,gOA('lU)LgD/8De`!TQ3B(]caFMkhg=Mu[!1EpU3%W_M4K,6Z*l,6X^U#kk2?UaNq`r'<Ps*K7dRD8f!O7_mZSfgG0K
%iYCY"M8VOK(_kq6%=uqW?[40G'sIt6psJIa@M-+0/O0p9&dBaN&-e?V[83N_*@gZA5Qh?%>2hl]XKhF[&-7sZ&dKUgQE1M4JI%@E
%dY/bnr"?W,F[mPUkIfNSd#WcD?D)6C6#prN%j>oup*>RI&Ve*YX$q;[_%8T-W^9S&!]Y;@-&=nG$W^CYN^DYd<)p%3Kj\u0/g-T=
%C:-pjX2Zcj,DV1bZj_FZZ!Cc(D?5I<Ll7B=JF<jI')!@`![RE$,7K-fD+gjP_@RheXBRB3LW!U,5q!QOT$LO-JK\uJY&90a0E_lX
%Ke3d%^cPb+^thEI^%MVa!#Dunqcg+DCP2W5UIQ//#XKjU![U2;08(K6U(YHR6YLA#*>h-':6:,u)QEWc'&k#:&t'1D0bB"'ZEkE7
%#`V2sJIirG_c^&,05PJ3)u92d`Pirb8;>QF6"n>TY,%2tI>,U[\cIE`TbYU.#_<U4#p"[1,Su,QKlQ\Re[&lPX"]&8Jl!SC`^kub
%5r/8JZ:CH<#Q[8EmlC`J&X9jXUr6M&,YUo;6ia-eM^<nh!R15C7)bI&]jdFDY<4$6TeT(e`.9!&3A*gJs'iIIq&L9gY[/&q6`\U[
%G[_4,Za'\R+Pb61(ka$B(kgf(aNH1Y7oA^#Ds.J%fmu84WT.p6?lOX_C+cE;+K86ocf<^`CKnIC@2gce#Rb?l.Hs<_Z""?uV-0D5
%nM.8LdJU]Ej!HT9=/Bm:X"`]ucb-Gq:Uk6AqE>jLgBL^lCkF6[gON)J;.[2PE[58(%@4?U*8:H\-PH$@qKTpS2@c&9J*pn&g/MAD
%!-@EPjKT2FE[ZNNR<>`tGlNhME)n]^#?MbdK4!@Z)@1*rh"bA$J;pd&L`,&o/cU5;#\`[":82DE&4SKg0G)SIG)8,n$j;_?f(Lp3
%!%cj@YFC4G+!K>CrpO58>`m\DI)p3A3,jJhLN.hf\V`9)!5mXpFd[Bfk/FAaXTRL`8<n.q"/fuu#QJ7Rr)$D3mpWC30%rXo+7%i0
%dG>;_JK\6$0FtUDgXeR'^/,I5=9i65lXE49lN#[K$TDqR6'NATi!S:$!%Nb+j^T<=CUQ*lec@Z`9Dsln!.<#,)qYXHDmXH6!>l%<
%GQe_hQ`%m1kR)6b%10sDWp_5lOL1^.M;0ot^%JJ3+a5(gJ8/oAO[aBRoB?l+&\iVJLC@k>nZmS"@A%+$'rf]_Qe6gB.bV.-@adnb
%WC*&0VG:O>Y^D%hfKcqt#AYVD+=]uMi8^['n#Z!($Z*n%A9]jEfT=t2/[]'S:&poc37\IR5\=PEQl"Bl]ho5!1N4:u'PH>oZr:ek
%E%aS0c)Ok8OZSNIBMa)K"o<&k>-Hq<UeOhoTtgj6eL]MX)[LXchO=kbVs0ed.Vu75<7h?44WlI9,7FB$]G3>+kS6#:EU'Pg@HsF;
%>,C]#`.iAHba!I1%4'(t=c!Rjaaq3Yfl1D%o%<IDm?_oVTljo$g?"1,K<WVr]'M]>WVacQ[H)7PJIO'OR$RCH)seS4a*<.EWQpsJ
%kUNe[3EI#@$k$mm\j^(-0<bbG>@8+tEUK%hpg8]`^a9>h^kRFbJ5J8bZ=F[EZ+pR9WKh1BJINk`0o-blC%egh!h2Zl8dtq^cj>mF
%dX82hOm$r*^*Fug*9D1n%&lN451!;!q@j9Q+CoNh'\JKcOrW[l?t2lf?-!RWfKa"#2Ws]>S#\rj_BqfkKhW+J/(.F?N+i1<h_/*m
%kB!sp'&74Aec/'Hmm_@,r(s+2T)U-:?O7'$+;LNrTm3l#A1J=3g;T:d*)*TKqQQnBO=DB&A4n;7*_ksWh%Gs$QQ\uDV1t&Q-+jba
%c1hA.AP!#/Gl1r"";"kU%d<N&+%bdZ`YX?J<T9tG2MC0$@pLjs9m*4aIR<'l@,3>HDEq;=nOQcX!Brjc<@-hc5o;.u=!E#6W6?c.
%W_l_+jq?NPmC3[n25Pmh'"S7Bk@0#Q-%.l@#J1Ti+5p`\BIj[q1IqpQGubNZ)Kldte.HG.r;1?C`#>-+NA!d2HO5A1qoVH3<cDMo
%:C?Z&Z/cDN,DJ"F+anpFSII2>?>IeS#9MQWR4jh:X$?sKO)_5FMA#t_6S:P\UZbrJ[3iP<1t1Q#K+(1qCE(sXXLK9^]2"og#f5rP
%#_"X+/)eG_@c8M#:6u$q,.qP7cPn]>)<,rcoAItc159Z5Nu?V!U%-,/-.('d^(]];grl_6cg4M7?$!e2b[9`6li^6Q*#I@3FhqiI
%p*O*(/#MeK7,;MkUA-(h2X\1^i(.@dLiYWjb\:(n8//)I9=INu+\D`PcNOgp"iY5p_;US6O%jl?qMlmbBuOr]hJ?Q#<t]Q`NLX,c
%dXb+M:d^;1ilkb.fZpY>NMQ(7AL)@'&k`o35eWAnpbSSs#fk1qBIB\Wn;W'>WGsqQ2;7&Ld"'A_gB(%\Oq]`W7?_)AlU>*GMa%#b
%=]V#=kdn_F3.eFD0#C39f'Wf1EOTl*gU_cb/&<]Y(#*#&<b3$f<NG?lR$s<=JqncUX)G8;,pUd43WbtHltm-QngH5#")2".?'jM=
%iY/tkFlUffUZhAkF]]B1?S(28^reE#Nc>LB_uclk^?ch$l@?0a6q7:HhEFb6k.Bu@A489AB1P)*19bW,c$Ldq+1oHBEHu,H/MZo%
%eR>'RZfLKK?LcGh"H8sqXs/V6QSn;p6%W!&lkklmTZjm&gE\`RFne8:E`ZqX:[8D3%7q?(O/*RHe6kmOW7@dlF%J_g_[11XH8Y9*
%kNDFM[/KeF541P'Bs//$`Z-:L=NRM^j"4K1*W+f,?[NIY3/?]:Lh@Q3,B$dZU+a&/Ls(HPE1.G^cn<42'<CalZYUBqTnXS#2!95L
%)G9WBF`MT[bHgM@T%E=4OL$c!7TJlZB#,XF%jhj*$rU#Lk:]@ip\$C#5@:;R96Qh)@[5PmNc`[ZKC.m_Ygk9%'8>(cA\Wr%MF]V4
%9rEqJZDaXt=`I,kr7I"K9&5uZ=ZI,iK"W'E1*h^aOD#"L=oo6pFbK(,&WK+Sa:T%gW*o5&fV;)a,LjZanZi4nk!FpT7'j!K,"91K
%JH0W\g-m,2plth3a_XnZG&Th>0pYO#5U<7W.ur8OFUWerDeam$C1iVXP&[Ps5in<M:#s/U-CdaVFL;])bMgC]L+,NU*lh(=aPMkN
%?8'S*(CgmXjWg.Nb.E+gMBl<f/r.rA96af2R/V).;d50_/solPG`-ga<%^laqtjc'ZqcKg;L3E01oD_hi^!LJX_?tqhCSbO2^aZS
%fqW(]#MG`ZLT,*i<S)afY0JWZHO`o$D)6%=JP!r'TP,D_C!_2Gfht&!CJF";G=+&mQ<JBe-@3m>j(0"!iUFrp!'3Y4PF9A:@Lk4K
%ie62o`FSABBJctH%Rce/R8T:,K!sgJRFT5dH=\>c@Kr!<Ai^R7&ZlPXnH]FqkG-BEJ]`WTDb04t9JnTmUk(9;7?b87)^llO6_-C0
%HF6A9/N;dA;U7qW"I*cYJGf,e@>jq$Du\ikqn9)QR`;,2-lag$$K(":2&Zf.mK\oBgjipOK#Si`m]98:jmhq:(Ih1&TRB9<U8L;Q
%D%7m:d,Q_Hi+\E,0&WF((Xac!?%5!HBURA=4H43aCZI9*>Xa':eNc$Z+Tcsg4\;f2I3V%p8>pD_+ilp786DuZ%^#shKN'@91/?TZ
%eOKg0R(:rs%Wi$n=9P2]QY;^^Y<ZmTo8XVQQ+;auN;V,`o_:.BmO4/eE!8V7'd'IR`NZhTgt"d3R%CLO$[H,YRIk*\qOB4("kpaS
%IIsf%B]RrfTomU*h356'm)9#X_/fZ.3;"/Sk'IpQ4mX/o%eFm#]XQ*DJ"a/X7XcDo7i2=MeN!oM$UZ`Rc(EZ8k<q[.(Y3bcL/^r^
%`FoN\.[r)gBLikSl^Ih>Z<fkFK_OFUMSbFR%N;!`UER#hngVoRP[E";@S;c:HlQ@tdiLFdE[;kI&ql-sn567epLjh^d@BV9%B7V]
%kL#Ap`)q03%,8%R&GY13kSph&,D!sG!q8TFC=g,=BF)-Ro*WkV/.X`g:Gh.6@Z6%HTm"GjhmQ2-;/!!oU-@RCWbr":^-r!H;OJLN
%KuW7$[q@Z'rQlG65"_h!M,8@$LS3Thq%5tRK_%r(]n\rtR<0!&*qGD;5i`88,%?UrK4#9'r$(0k0d=Jcad';j#R8VHW#cPe/)$++
%+sNB\`AK1hK#qK+osdDW;hDWUkCh)f(>uaIK*itKJe-(1]FYXRTL%if"@VO:]6FB$k^B&BHj3!=Rc<1S#`/WAe=;'1Oi2c@'O!bt
%:A$,!&Wt4:f_$*oTn6r>6ps;Kq:J4+mIj8h_3?9K#LCEYP;'1rpB3,&<'6t/O)*!J@.Y]Q"=st1F)>,#Sg2'BdJTMZeU&162M^'G
%njg"`d<9DKK+2(8KE^@'+Ob=OU.o#^Bf'-&\8T=*GD'6&%S/bfO*U#Lal;8[6&J\7.a3sXF_t(2+\cO!G<`G`[^<P]cl9[_N4%Jq
%p?jNDmL?!30h-rq\sj)j1/'J#RGo2UXmB=$pu!n`cD&/,b?]dUoLK_V@>h!h<2'_PQLl2BHs-0N&EKK]QoU"UMc#nf(1]"e(Kad\
%]u%%+(@^HYSBHY65sl+M>PG<IE3Zc&(/IU\lF=V0BeTrR<9=V#"=ot2kWa]]WZ2Z;FT@<9Y"`rR"9jV_h\$&rA+Ln[aUKp=)E79_
%/9Wk2dD(.,&^9:De2l]]1g&KN%;+J,c+:TTFi4:H+KLcDE!aW-].ZsXP0Ae)o)Q^"HWHCb%HacUOVOiTiL>j>8_^$(r';D$p<K(2
%P4+J1W=_Zkac:(!Agdc.hmF*SQY3lVb'6[3AZqQHV"50q)A[F(*Oq@h0H(tLg0XtK#VI/A7`-q(@!/et0Zhe!Qe#WL=2eIu5[0!G
%iD(A=IFp^G%HBWA]F-*:\87PuFIiVfCXi%T5m0kNMW;"X_$jg<P5'o9R/JQ84K9k6B'i2FQG#/P<KoK\(V/*VoAod).^-J+hFe[f
%FDQ7TQ`qYer1=;EW`MY&_'8c3J/nRTnpTOL!:[`T,]>Q-*&7%$m)`Q,;j'?,YKrZc*8A70S6TM*]0Ltuk2#_r4Tp\\3Y^:F]Uaqf
%jIi)!p/Z$?E94I@X"'+GEZidZRU.*9j1>')fY;^\<]!X>$n#+<%fsKrTkX&+E&+QD_iPH)S2H(1&-&<_gTe)sKJj.l$4IpO6lejh
%cR@;pQsGhgAa#,Nq-6/:HHCf;[`nV)^g?#$G]/sf-3T--RhCk(72fp"q1qmS@BiL`KX8`/TNVAmWY**7iLt!,P"Ah;o*R>)9;X%b
%!l/eH4r.(XWbSR=33$T[jQ.+$(Vk-RTh"&A,:+D)](j^(-0L9@Y[A"t^(6'_fOOE=4Gp)A2Ht#L*F%a,?*erDKPEb]jJMR!@G5$Z
%1:3'Z1h$#*VfT1m(N.F$4G6(D.?lZ#DN#nZE:\(n9l\CMKV9ij?1#Y-L&kDfhDAkN]#]5-6<KDkhI3(NZD&_9TEZ>AP.XhWBJ#2Z
%ra%M%;MCOX1.,NQ_/LGT"m9iR22p$K)__g3HQb_a8H@Q%)*RVK6elB4-'hi6h3jKX3YHfF9?t`rL?Uq[J.)DUp0kVE9]<%MrVUVj
%jF%:-M8![^OM"M5]"bsc(D?G)kHDKVUL&uj1C^Y^)"FdA]d^:.peH4T7i3<Y)!(QAO"A49^]HE0$*fT2:1t4WZF677+VqB1-nZ]2
%(.&]s*qkLMoIF.WSGhGRel?m;@Nhf*/rlV:;!(I_LbTT1QFFRp.-*p..-(^u'XFN.D^Y`QR-+hoJoPq4:kh;=cT":,P]'[I9>.SV
%H&@n8d&fb,>76-m8ic8n'EWq<WT$Z$A:(ETKL1%q@jL-V66P@@:5OO`cNoM=0*Xbo0UD%b^Np(ANJ!mgE9.le"ScD[78Fm+R,d;u
%EQ19[bDU3H:)jDDLc`I?+A#<$W5V&sjMX?EnAIWfW7jQX"M\W\oahAe^_ElX3!d@HaUoB5?I@1(+V'*lTNcgG+U$s%L^`74#*2\E
%_0F5m<QbmepJc\F*ka`Xg9jpWHE<J;15/Rl*!CWK*<u>\)EDM-(^,1q4`DQ7'#PhhBOMI<2A@#`p=X9"@6DCLe.#-W"GT4n&gur"
%8FPs>c&)Q#*#kSAfGfY*7L?pr;>ALTIX>%l^Rk7%VZW=BnbPs"Hp,5ndtNk?o\1J&q0qIqTao+$c^/?O4N(&D_b!0c=;F)^ZU;\p
%:s4O,j1/GT7j(*%[MQ<JgAmM%k8=L\qn5K+42gF(,@jOm4DG]q2#Q>eGPB-IC?+RpEX>,%QE1U8fFRTW6F.EE<B6t#T0s$k\t?`-
%W[r2jpokkYVJe<`LW&*>+ll%E7qo9G0?-"8"$9HM@h4Lh>XR8m7\!PP"pM!m=Q^MXnJ-fWFDh]el1[!kqe6D]6Bc=*`s8'idM7O4
%:53V9:l\.*1eAq[:^9bmf`%*PZbB'l,>E#imUaWEFne\LO!*B=W!8ncG[E>nZ@bGp`.68!;uiln6W-l,'4h<uo1?%kV1pjDD!ihk
%;(ns<6h=Rf`.hYDm@`g>f3#=IKUj<Q6cKP3VIUPS1`8<+jBj^@$mS4%@2]'C%>t?U=S&blLceX=%`W%AG]%ol+Na@9aT2<2G+SaV
%K4#B'^gOS1R->URB[Sm6Fee/9"fi$7Cg:PflJdC-],`O\L.0a5W(P)UZQb3nI5M1`OF]eh/A[n1fKifW]<OX&(!h[r`h%?62gVnH
%Zh;@Le&2'^2qpm!Ga"K?_5D^oIQj^2#h^lqL:=BP5dsJ"%7,&r:eoO^$6:@t!K"3I7(fL?i(!hab;7+-`j0GPN3&G7/(?n^iAe&Q
%Po:Pg5?d2Y;,QrtYQ2d'%*H0./NPCfHW_5K-I<O)gWbF+3tjVfWo>ML5.7`/@0dTBAB6NI+ZL\o-QXP3@[VP]+J]Ud8!/F^E<^iX
%<b77uCs$BHY_bGA&KbprRE*ap4'Puj0Sh_F\`@uQ8.VRkCY7:Se_&>?pjA8T*f[0W=*:L%WYIK]G5V]\)G%jd=c;=*"=hsplZW0!
%W0tK%7q>'<beJo)B(RR)fZ,/%C:nK2JK/)RVt_F2jjoE)O+A4V-Q1`BiN./`p1b?N/&3>soE&$]8;gKeG6ItC+uNR<OVQ:a=e%R(
%O-#WW.Yo?P?(Fj^klE^CagC^"#Xhq5(oileQOO$qfqVq]!79<&-W[%.!/Bh9,&-L4ZE#`2A6o9oQf<J;O:&X?+e.Lq(A'kRF@A&;
%H%h9s-e3,l@@[>aVU&<e\5#IYFbF$Q0e'qD\"c.!/8KIU\Q2F8&I+),O2Zhj`fpsCec[Y/E541(!R4E&c'e?!K4Rh[M/t[dU.FT`
%q;ls+$d]0+Os58!T;u^&Hq.19H0_%]8N+]2JG2.LLWK*]9`mX%GOK%97d<:VUd/dGj7<q0'6Rm(c34%BUWZXQ((BO[N*i^E*C&9P
%'Al%,%/KksAq=/?fQ>af="$jLoOp]Vk5ICeF"=IaT,nDCg/uu"2khj)Xj1g,1mTT8b&_,YF_aVc+M=&7DdVfhCsgU[d?-@/gh>o\
%Qk]s?$j;__8:\`PK&hYbY0`prp8A]k.f@8^YP9dZ@9a$-=."bQ+#AS%pkk)l4o6,@?]SK"]oZKm-Vin=kfO!,R/,ieK99JJFfH,q
%@pO9j4XB_7<u)WV]]u-!0jOMB\(q[t`XaM&#dP<#=VTTBf=VSM[u@(fgs:^/'E.1`3/:(#9R#/3')1arciX90n.bU6!M3Ss.]bas
%!+F4&d;I,[1SCp\&fA2[G"90F3l?eE34OFJL"&2^B"'.$`5qBKAd$jU8mY@281nLB_&;U?&s+[>\'abmO9^s9'kA?n_B-+Z>Rq]<
%;XNOH=QrFEo][Np;/dW=JLp];>orMg%a9gH'Gf`Uc0\?kN,M7uWt8_"7-*<7\n\7\kZdI5HLJ9q0c%"A=Tb_'h3shB;7g+BYXjf$
%/J8?_L_`QlGMoAb!cU_8d3*/`T(6KT!0L`j+;c@5FOhZT,foq^&Ijo3*%)U4P."AiI4t2p'uqEtp>[>[UhY\k.+'1%=bOK/+R.R-
%Y[EOm2)%rc8-nm%d3(H4BTQJ-R/ILAlh+=f0M%5n(aL1pSMO@n"=pE)_(ChA4eL[K$.21)=sP4;bkYh4oVACs+T[s!/-dIa@;8T6
%$A8O#L!->0\t(2XEI,[_j-Emo$k%TO;dDbS"PAm&?7#sa(ip3'ak?R3,.V&JYXj4k+tj%LY^gF2,?F,g<Dmrh')m.^j!('WgK,OR
%Yj]3=aJ+f<#4tn4mr"T:YHg-XF7[X(r-n)nW?Y8#0@b)rEGU9Ti;,CkbtX=7C^-7Zq8h\(-i3=Qm<J+FmDh2YRg3=l)`_(51l^c6
%V$m.?<Em*c)ir]-=@e/0jV<>$1&LZ#o;?r.nX)j;&hU(5FG#L4;X("qAba6-SetanX7q&p4N>uRn@JFI[6?=V&.11B0'i)`NnHF/
%c5t!inD8W7L.+e$[)^544UW)>;aD7Dd]]54i8SNQnFA9%J?iXVN-!_3FBkr%'9V*hb7gV.M,J`:cW<LB=$2()p;ficWG,4p&e9"1
%nG<WLIZti,i!>AMiPsP.1Uu/b`"[tq55A]p@-AS^Rl/+:8##C'Qh=k59I.oKqr0H-0VqoqpG'*G'BRBM%*A)3.+iBMHTU@'C=sGY
%*s(q"!m;;j]%e<4Uj27J@>,0BlD+ZN!^QKPUAZ!aB',iJn*D?f_F#KpLW,4Cbg>]2XO3-=7GI^kDYn$&c)gYt)LiOq.>SoB$A15?
%;-A</O&pRKn\+gX/F(A6TWc4WG>`(SYHg-XF*%+OJ%bSLj0L[J;MgYg\Nq@HA:8\G2e;jK]T*p4j,`joDELQ>>NcD^RNM>7/=p\$
%MORBZ2ehoq!`WLG:!u-:gNaYql2)Nh"&]DfP;=6[BPoY>4=@oS<KuXBOpCg=2!aTGEg%*]Mu-Yu9n(&*i!QQN,7$!A/'C\)l*cSO
%\B20M]b%3RafajMQZupIge(+u@OFTHJ*DIRk`c(n_Lrh]QWJ1]g8LI\X15^?FVsCoa;iQ_$(tg/h!O_n]N*aWX"<:1<SWi/q-M%"
%f24!2<H1A[bfIFsgiu7T>'Lc@,fe:h'dc,6LSFC#GP<SK%Ll4VDqd\H3t[C\+nSc@`m,t_9-rBKMc31P`rL0E]*coAl#,S"F8._Y
%DSNoTT1Cj&J%R)_r&@k8f:Q[q+'M[-a:`Ci0F<(n#rdY']8)t*?_cnNUp4dDPL;Ku_VNkQe._Q$PK@:a;k)%RSi[X/F-X2)L#K=[
%De-]pb<#l8.;)"LgT2m_[QS%I3S&,Xl&D6OrV!G*qGP(&dP>k674#q8?bJS0'JfS]`aENgIFidb/1]6"7oC=5J(,1Rd[#br9ML(7
%c1qN::[RQt@aJ&c)s@4N;eRt#!>S[$kcIonn_L=EPi8Y/AO*Dq^i).8@l\92k`@@*Y,NkC^J$AnSiW%5W3.g]Q9F!dY,T3g[pP#-
%B-Z]RM@)^H,8?@#"j<B=#;]j2h7X5VE)a2ZMMb^07Xlm;XDAOTKdeLu!]<gU:f3eWI6g_IqchQK&Fo9\:MnI$.H`rZ[7*^\cr1mU
%VCM:5:[Mm<c.,((B2@n970Qkn;'2-IETXj,_M2KQ5u^h<qr>8fg8CIr<>G5f;RshF<SR=0O/bN:2<+jZ<V>\DM5ok=0rV*(,O]:q
%4L53o$3%#+hZcN'!U_!#e->Gs0P.,ZYU-_Z34PPHlcp9re9:8hUOOuLY2>8.69EEU&6QQ'7K56D.J.K5X#q(2g<!+c';h_<.7t)=
%$3ZKg@]uYT:Xp7U"d6H*V:la+d7M+7Koa)jOJo=]Sr;paDaIM*%7j6W_/UHj1u(82G1l&4;HD@+Mf>ilU%:N7%L@um_j3"e*__K2
%*"RmF*"Np,*2HnG6>b)Y+ICoM+lPBjZ8$Zr)0$X@+6C(fj+,'u%fs_eWTba>[aCKAL4M8HR?<Gj.ii";rGnMJN5J[`?J7)J`$!1r
%2TZ*^+P!.88/R;<"'EE93/iJ(OVUFuN!"")F"DkcX5H&S_Y#C`I"k:(75og<OT/5HSte7f1Dmj$3(U7;V.g'P*,`+`io#5R'mTk#
%5dlG?WX7\CEY5?j#Rr"HFH9A]P9<Uo3F8F:WB_GjPER,4Dj(h\E$j?dr-NZtM%G[i3=q4+N5ISL:0"e8_?#KN%grpY#`T0m&<9M'
%]7Aht54!=Z*PoQTS5_ku2)>_?-'*o@+B>C@T3VR)M&.30:BUoZ(R]o""@nPY"NNl#45\+V*PQ;&R[!IU#S-`pMn>q*QmnqcjE]<S
%GO-C+"J;,(:N#Ue,1nV)*5>M+e"$\m>9OM^@oH(P\e[2?L$dkd8-\[NM!]h**YMs`C$QD9&/\IsUQ8GI=p\gG=TUL)O-1d.ef^LF
%e_DNHRFV'+-M>KANDlU@C(,S^Y$06BJs-%fd;ZS8AW%>nIF./Z(l!i2#G<bM`#[?*$WJ3lOPJH7#WW:O;4=KRK6KN*W6V32EJK6n
%Y+MgLn)PqT\cq?+Xre)pKR]^-`VW2as,"4snDA01I'[AC/;#8X^BmXr.n1%."_"`(4pfnZ[]lJ@,Vm:rFo+K$UINp<-uaJY^`uF]
%jRoUMDX>8iP,5X\f]0Gg,eO_GY0u<@98%h?4;9_6gl*;O)6+&<j^aXUV,cj[8T$%>FUaZ!Qr0"UrN."b9WFTDUL;HuXeJ>`+GmG?
%RNVAUa+\ROX2+gWlm.NXANY!lHprd*>b\csXS0/jF_-!$^l=j^c6#s)>ID:0UV!Z.1`"2J=[ZfD-^ci?%I7kd)MH?b<r^*diPL)Z
%D3bDsk)_J"R<Bc,s0J&k/.Hcr%=OY?_&D=C$P(]f:TJ"3$`R/j_T_,X;)`@*Ld&<M<JU*&QR,XU6/Q8W6!CSZrQ5c]Tm7o5[rYhU
%!U5E1i+:0-SXc_9C`a2Q*@0Xn=ffhVot(-80>jYSQ%G(k?kfE58'-fdegbaZbK/LQMoADE4DCGa2:]#ZO83inW4bsI(isV39DDsT
%-<@4@04#;h%^mdXNbpnj0c_1bZmBmr$%cu5ADJW,>u<VX<ifiWIV[\NFZ8e&-O[XG@oZd"m=aWCgmAAn:]!P\Qb[#6>Y&@lZW'TQ
%4RYH,-.$K#Q8#),PIa\&K&fWN,tsn0Lkm&3/PRsZW01`bquJSNJ;/"4*4V!HaCiUMkBiWLjQoCG3%js0CP_WANQAG&6q@O]rUH7l
%Y)(&B84M,W)MJUin3I13iqkuER_MA&=q`!`DB'CW(pk9C.Lr!r3khA`GFf+Q*mb[,'q:jJ9Z_sh&nAC^^2c,.P#3EDB%/Noa6&d"
%(5,B&F#b):XP6W-%nTi<QloYB+7i;^G'jk*W&XtnBgBM:FU)YRDTZ/!)YP'aBPn0s7QlYEA+fE+9Z<TW/1>1D%qmHWcg^Gke7L+@
%9r>tQ>"%LNAiLf[7^>^nrG_9%gdblb0IAf:S^j4nip><fk\>4Qcj[.dad0Kl\e=DGc[(W7AKO-@o7a;TI$qrRLf9CY:p8XFq3aQY
%=B*.o`dCD6[sJB.CZs,8]4qEb=__#fm$:Bo8WJCFndX]'8T^;gHV7*(\1*92_WLFK/M%.-&=R#:\JfS0Yu+*8#cc'^lH)lfRV1n"
%mWl)ZjJ"DWHn<!@8(,_D35T:M4F9G0I-,!U6Y%u;fE]@0C!s`c<$[/J#VKiu<XP;4f3mEJ@e/["S?!4XP]]>KQf#C@WUMB@4>R$P
%br>,V[dpf^NXSVu%J4[PaVq)rEFcMSapBA,Gq3.<-EBiSX;Cr`*2M+Ug/iE!O`H,^De*J!hGXdl#X96C/h9[Lq/LqRR4+IKH:;&S
%-+jgYkW<*N`Pln_"'Num')-RZ-*9G(/P\l0fi7T;j/nfh+q9P9duE20:e%e5$-;S;+mm[P5VoG;,RdUYa?6$n-Hn:nT!Dm0#Y7#"
%>G3KEh'0?Jp>,>9qQV!an6bn.E#ai65p9++J2T#S;d*uD`quc"*uL;7>%=:NC+C]$G$7];WB3[*fqKogI`WM#PScl<r#ReeDR3c&
%-B`2+DE;8t1\6It4&!H5qHInW9!PG(murr:*_Eg,j3P3\j5p4>'[InFr-Zj#RT,]9ofBs%bhj&AS`Tg3<uAW^B=8&Nb,LsZhaBlo
%b<SNp'_joF[3-*GJ`b)Te7*juVp;53N/\i2!sQZjUPqmM$L*WA=#gLn*$]YmZc56A9RAa4>E+SZRVB'u=p)4JD9+'hn;j@g"$mY^
%P>V'sVQ-(u0QlD.Xig>\K3NQSZ&-#Kn6d1H-]%Kt+k,gifZ/e!AS+B%(S8L?53?Fu.D(ouoSUi.`Iqrtj\WN5M@J*_$/TE.5-BT`
%`p'pQ]h=D*nVL/+^eCO%`LVfM,O@&`VLp/K3N!fj(gM:_W);)m(&I;n@BnZGOF62oE$Q_)jboST=06&9hUFmMYV`'C.X_Sn/YnS\
%`#<;XP8.#3'A:SP`<r\/m7+OR+o<3G>qXN6Y*C&p%D9;i!qHs+6HrJNCY)smq!8jfW7I,b'Sqa<\(YGHjC?Ki.ioc,b/S[H:R:D!
%c_8lKK9OU.Q&s_rCi^7RAfl-5H2g=c'P2b$Mku+U!V7u3%<<@g7&mlcNNTC6p?LdD<.funP)5(3<^W]G5&]JF`ffE+-YVp4Q398^
%&d-J9\OPM`\(?csb+7R(aZ)h-8\1$4)Q+.t6tPaSD<s5[ed?mPK?^=`6HCBK)3U0m9="N7he7"nD/M7W[#ZEUE.N(p,hnDF;;]CX
%5O(9t\:3c5Q];:r\eGP,H*ifXB^@V76:`Z$k(,U(_^cMq4OI&g!"oHY_PO%3<1)2UO=3-JdOXs/l$\d_PMm<R!&KR,@EpQMkLR8K
%GiPV3ZDZ0b$K#?rnOZ965(Dt[FKmh"NbKnIHcLO[nb%K1ZZ$t.AkG9(Vt5irbdn6F/Bi26bQR(WG&,F1)h[L`4Z:1m`k?J3O*g-C
%1LGJ8.;RX#nMcL_5+_\iY6\tV.f;cp&@_UpdWI88a>:4h*n+*Z9M`=)Zao$%@DVA;5`](!&QX.'^2.h^B=od&?eBsq5crM#M_WJJ
%e0F.05+B$O45nR;#uT2&oO'0j7?d-BA:"r&.thao0&%Eggr7pt#Z5$E,28>MHN;93FiA=jB=<[-H8>efk[SKZQii`OSmq2XQt_7j
%/AQZLdGs.LEFjQ.r;1??`,I08o3I-DE%.1R]*p<MG]e$Jg503'1%6Fa+aRU1h$[dhM!ZEqCun.F\l["l?lc9]G5LIBoX_Q7)=kE>
%#XQ9W<9Ol(@1)<g(\q9N4bJh9dYP/#$p,ul@I[%(*HU9rm-.4]4>r(2)@CUhoTZ\MqD64H@uS>Yl[n_Q\@-TubRi5lDAT([Ol-0T
%G&8gt**)VoOT4g`%-W>t?2)pJL_5:@I1XV,(a_TYQp`9RP(2q'CL=-g(PE?ep%>;eY04!%\$a$kaKf/j*QGDCKdRh%);ir^*hn]5
%Xb#6%"%cPZ!6qssHkNskM=hf<PL2&:85?F_k"r=Z5<el]H@sZMFC/[aR7on+`tYdZ-";k`G=Ft(UZ:$lj_ei4>Z:YeGf3A1C/#m\
%.dEleUs0JC(#DmTL-/H^+GcS,,Xs:`:&'QHEum[1`F'f,q$W<.1t6tG,rlN9BiLj$J-U]E!D)]Af'&Jf?RUbj=JL!ugZR77n$nV:
%o<Bs'fuplD,]]buCBd1QB%S59B@A%d^@X*-CR0C&@dHLnp;a%r!MLC+$]CZO6ai<WKL&?#Em,!Qm"WS&auq]HPS8Yj6(G[\>cO+A
%@_HHN+fQs1_"]8M(-<Ycqmp[:.`TPrI#a<^=H=C<AZGspbMcL(@L:]YMgQ(W1!":UW4+*Y9F3t@7O?FmYf-!@+Xig0\G]0*/:GJu
%31?pD@K&#C4Wm)3lr+=(G[9,hXphY2J]Fn@5@:^V3M=Q]gX.eg?++KsXG7;/qW/Q6TsR)F<]4`T0O#Qo6EiI-R1(+:LFe1*WV;A$
%cFOi<:5!6_^M'<gUmr>i3VKhtDhc1:(<q-:fcYBb*k0m'JB=#mT\0sUL"Nme&KI!'NEL-lS7(JsB<igY9dpBQi[i4uQ>MHl/eRcr
%M(N^J/aVIt_V(a#k%77s_=*ddNi85eW`<q1S5r-;)&#jb\]nYXHiU8a',=f7^94p!&lJFpj]UB)aOolQA.rg:!@1lYJ9gWe`Sq]M
%YU'Kc[RA%A+51#*,pE?'p:f8ok>W\9)\^U2]uc/ZD@X)<BA4J^9I,d(!5SY<CDIGNO)#OU'/=U2k,6#==^#\LAVo`tR)gSOf3dn]
%U>4%)9*G&>[I.j)I&us3&m7.?`nE@]@N`d[pp<J-aoUeuefbB\hrq.$Z@d'OR$@dRGudJ-g:Y2,.O@PbDHE)[hpA'Y<DZk"DSaiD
%SD^K.Ja@=!XPBtUQ)IujbD9q`!Lf/g9pm1CD[^bEqIM-jo\J$Jpr&u`/iYq2:DGX0jH^9SPPonu.1)_Mi*`*#pY:o/JI0hGn>:T7
%r.TDe]jEtoeodUTq])Vf]5Zk72j$dgc#OK>%W:USI_Mq^H^f4+5K)6S\(c>oj@m5)r8t`b"[h?blIlrh66T!CV`6(5Madr^msHG=
%^HOPi%1LiKL^n\dbBCr1q/DaGNqB29=e4AoSe61<B2G,]BPL5S<RQ+"!`B6uA`rjkPf,"pSqE2jnXo53?]9oH0:VQ\?,DQhc?"s&
%<-]\5F0\OVnL(m=S@"K8$6gD13?Qjt$0QS'r&P[f3mTGeA+V!_>o$5!SEK,";Id'dCGQ=03*sc0@?T,H;r.BAf[Ss/I-70r1nj<N
%o/3>l=8:(-Pr3dC3N,<E:aFroJk9Loh8+O&CM;N.pRPg6j=i<l3-m65:i`.kF*E+)kR-*f^94tO\Eb,NU8FE;l^Ss0LH)0LFe01h
%SS(c(k@eV%E]^#]quN$b9ncXHNpO2ASeBZN>%Unqf/]-B&+T!Ia(-_a^7Yb5@EoGUS?F+4r8p!E5AP&?$cI)rWnp,1m,C%OLjRDL
%<6mSe\Q"gtoUMZaE_0!.o;/K8>j#3kV.BH5KF"O^o-G>#;`?KDf!h,ikW=9WA[a2Y<@%BR4$,)$nXd_kKfT\i$#jE<O@1hHq$V)5
%2UcXGdT#?3plU[N5?S&p""9VD6Rpq08""SEcF`;NSVclfl/]Jg5sB1I8R]>HW[J6dINPk;Eh?*boCRJnP!:UN3XXT&O-@=0&#]0D
%8)=(0'6Bd14Z>$skaPutfgB5m8EZk&q:tV7kB$6oc25%s=nl(2'9o9/WfVZD@+C(?*CQmM.9rjP28H1[m`r_WFAsG)b$B6oCf&T\
%To?OZjO-:H+H<3X%='TI((TbWC`uMKRM&O,ZG6reWh)lZ?leU>0Ad,h(/<^m!pY>1#0"AV8%Tu)TUG7VLiu.1jPhmb7[g(%<_!?t
%o)7&Z2Fn69RJ3_I!0/LY@i9a9KFE_!IfJ+q]lhV'a[o1SJ-<8(f+]K)Y8C,Z@<1eW.%SpBH"hU@#@mjIVQXii%C,kp5i#J?.G]=7
%NP7PS^N:-e^?\6aT,@,AG]?(l>cJp%49/ma]ZGfL67Z:b>ecQ.CDR6\A9e`RM?@e;"bOK@$O#ot)L(RnR[\^4GC`Q(c7:EkS7:U>
%h"I[T@GqJc%34FJ4_>%e,+%_klG"2raQUeKLh>RYN.BK@58lN&eiMD(/4G0H6Oec,E!ZJVZ>Y9mPLkD&hZ*cBBn9+W)"(QX"\Z75
%Bc:++2h3b4^RB]Ua<[7i)*!/J3B$a=0\2J-qaN[FE#/=?!lD[6^bkTfXtRgKJo9I:R+aLGhSnCVZYoi++qi#3!O-9_)9j,e8"V52
%WZ>,P+IO0&Lt]LF--04oNb#\^q<7'DXReEtr(r`K2lRs3J)+Fdj`]`\)4@U02k#E@DoN5!d$C(DV:))>j$lAP\FI3jDCcNYlQsSe
%;@M;o<4tjX"=V5m9JLAHis71$%#kdR<,tcl+^&L#AepG-A]csV&;UlL,g?mncj6+Q#imC[8Yp%/+f6,p+>lME`Ioqo%/InH2oQ>q
%OMdGpaM&1E!MNtY:E1&Q8MS09E"5Prj9RY$VG].e5jQZT'Z29&d%M7r3d=>c?FV/U(FDuN63-Cd22MD,TVsTkoKr88'5Mn;kHJ_I
%[&dbj-.hIkfJ-m2k2hWe=:LRn?3n,LTb:.I+i$]f#1Et7Bq.Pf(BVu/ht9>8N`k+.0*E\W6VK.$-_q6*WI2r8Ng!cTn8WU9qdXE0
%k7O.+L.81g,gDG2[FAMVc*/o\>/Nt3)/b9%SnF.R+V<U7;9b4"WV0%@A1-Y9MBS<*"(FtZjH@/TkW8)BA!KD9jCH>K8/4K7;OTEk
%L&a(B:_c>?;VoG._[YkE*ZPm5O=cSN_A#@\JaV*b(ig]R0%:S&Xt4U>RDt"XQI>(j0uV-=nU<UOKlGBR_e3+q]-i-ig(c^uUEl?n
%jA^-gm09HJWYfO;l_$_pm6?(09M.lukuBG;r1$B(ofAJ$<W@?_/3JFZm2Q,V1]tU3HoX)X9*>!_='X&#V8f#4+RXD_:d&EkC+4D1
%)+4Z20cqJj8HG>*3q[.J/hHjoIT\p^-0t"cWWu,r--egc)lU]"bT]H,h<lKq/-!13dnhZe2*U$)Y0$Cb<)`0@^X07d]N<&Z-<\@k
%87*0@&Jm-*U3dcqKY%?D=#;I^d<b_!f5s=h3d;XkoeZ')Vs/Q#Qmh`"4\&Z/rd4He@14k%aO)h0OP0,JYo8h+n8,?g9hO8h4CDZt
%]c<0T)"DOSlBcRiC]4V8-ci-5FHq<ObE(_Y;M?i(5@"!_/3]g`E5#PN*/AhGP6p>/=A![MKs(L9*=b;m_9$GDIK]GEjHBY`j6Ono
%8m/%.HW-8a:$cf21u?YBL4\EOk*&F#+,CK^Ueep\Sf10E"+cok7?,8A=Fm7[%FBjC>/A.EQqIgGD"Dkm9dWU+Z;>IH$MP;,rY=iD
%l6.)+B7;Qj<&4e&3OT"5;U0c`lnQh'hS^+[b1"J*r4JTm<5'6C\Xp,Q+k>d85Be:$1g2>]<4g)p*`=JL[#kI?mEW#c[3^Y020c+&
%gZ/Q3p$1@?U^OcjF.e58?PZSb$B`7o,ubXsW(=n!m<)M^)IK503`I-mIQNY+c9W+B%+_pl&lX&4WA-RhVU2HJMP#\R#-F/<B]%r*
%9.B"#kdkjb`ALiid_n:UCtZ7ES#+j#<K:?>Z]Jp0VANH0"d6;oJ@>?DQ3WEjg5=HV9Dc46A_-D-NXHO]W*LU?lU18h>]:f0]ULp3
%nc]9rV9-LsK7%@<W+t-%C@ir<'VZa^.bW]<KiU!P$aD'`cPK/Z[a/.nVWNN8<%!]WE[6^DK0JWpM-FG(VT%f\#ojj&)"S0)fmI0j
%XdI_9'Op=PZ=aV*Q8@+Q(0>I%P="#ti$&<s(b%rlLlh7A"h,GeIm!F,%H\cJ"W-]iQA=K-mK4_uF""O@UHW_Tn:nH)RmBnjdF=<O
%>J-&.Am)t;8g"iU0)FEsdVjJtr0'ji`R(]N29Z(`F4N#V9q4fOD==2SKS#-H-lSp*$>r=<_$s3Ugtn=2eeMG3iD=OZ$8*O!X4hGZ
%_.BEa9Bn&>Raa8FM]$:jCR?>=q@V=u_$]&bSi&&%jZ.)na>%_dE+<;CSi&'PihPo[DC6#`eo3o_5$G\0FNB_Og+^<k?"8AC4MRTK
%G!sL/dY9bi,GttQ&Jep/E&6JlD?`PI79H_R4fF*n<HI"Rgoe:NU#C0q^>g+af&Rf^f5SR\0!le%icY\kEtoL2aShD^9KN#]2BAg-
%TWE'5ar9+J=)e=A'c.k`UY/dlab%l5X/+`q;`gBO<*[H)DoWt%Sb)ec8*6>2ZA"rY;rg?aI1g-N%2WH@(4YNa,ZI0D0cb0L0tT=#
%O2q=8Y5Ng&J4EWqnbWnHK9'fDqb\L#"qdNb1XM;U-up'=$dG&U(RAL[./d>%Sr]<6Y('j9]B#ksfjNPf/WJ^`FkomiL#g//e4W2U
%PMjT0*^KS9!:>MoQ<4gQDb,,FWpkI'!c+))4kg,H4YJVK?(Y^_?]k+RZa&0L*d65E@hI3ph0<sbEqW/d-1_-F<rHSL+$>=@f3lEM
%E`NF.Nq<>=jC^?.R4\`CG<ri=\jCp<lr$OF)6!J;7b4!Sor/8VIUa88Xm-]AdKJ-C+7bQ91(gU6k#]s.8jnhW9<\f]<&qmET.B5p
%_e97fl\GWjhei5*@C?4Z"q\q@ld/-OO>NU2g:2c'ltg=')f1P6M2"3Jke2]6b=o7b\E.<<?VkH^]QQf6-&697!tBgkmH-E"+D>k#
%0sD1J&trGHr8!eDcm<iF8FIHIc14Nk^Xj*:_XpOAB9IQ9IR$RVl.<5>"P[e>WPZLIN0[;2'Sok9WH+prFZT=78Mu/IR2K4fZ"D[I
%BbedhGV(<2Q-2;447R4`5h+<bU;cH@#Yld2IN6S3n$Ml#=$]g!WT&G(?kI!A+JS-Yj`Mki<2GOf8u[Z9l>gC86;pWc@7r'nm1ai"
%/\;f*)YuO(S*!tmqro*T=@)REK?ft3-pr)/V8cIsf'F5e@^H.[eL[Ed1o'B>@a`02L6)I%:EG^9EHe#)nu[d;roh\R9<YX!a<fF"
%.9GD[4@D`>`IHOiit6o^4!5IeT!lV/iVh8(WHm6KQ$pn]E(GN$o,OF6Sf\56O)R77akFBlmWr2.NM,EZ7YIcK/9*e);I0K,E]bQL
%\#MAj*7"oQD>HV>.Bd-LE5scpp0./c,G(u3Mr_ceI)1tc=F,n2U5ug8MW5T%Qt#"f[kknt%e]D&h\f:d1`Em])9>Vn)?%h],enDN
%H/P$0<5/oth`3C^4!Of+I-Kd;?:&J@\Xa>0B-&Jk4#?/EAf!+piQTO+NaRg51iMgAeLg.8Xt`SU't;rC13V`'biE\!<E6fihH5Ga
%20B<8>`W+Z4YP.C=<#l(aDQ2ca3$@(F!/U#r3Sb-)sB=^Tun-=7$aBj@(g&qbPI:kQ@3N<rl/[oNVpe6mc+.:"1NL.caS,TgYC]>
%&b$rEfFS\sVWQ!\Hi=WnWPtYKSJhJo_eOD07S><K``rrd\("kbQ]aqs;N"+b8m5G':#mE\Ngp'8Q,#2$+aCkX;r(?0JXhLmSTqR3
%98d;)C,)^1f`t/%:.V/r-W!a"g!hKl;D>MGDm[,p1Tp9pr3;hsbeEhIIIR^2Z/;eeY4LlQYnF+(/i/Ne0Ud<&0r]6=,K@tXUsu9;
%+gotc0P)")(/DI(Q')c<8POPHI]tD0OP#SV0_,upbe4]%Isequ?m;]ii'Fq_9.S#d8ND#g.g@3,o9<8a;!ui!<m8,TU84+QO%:cr
%TVN;q,:/Hfb.BM*h9q1W92!Th;`U5+V%Ha-(&<!D<iKfP*!;*"-peh'IUUF>Pd*>KU9Uj$o.B6+#[V2,rCJ(#ThuSo+\JKiPoW(S
%8=8Gk!a!=er-HO9mOZB7'8%Tt6sL#OQ''-;:7u26"7b+pdu&hr>02-@oF`.tQ;pU&lD@/:\pWq(lkOZ:,I4=Oq@t:5pB'VK=$[t/
%X!>3W&g3AMJ/AKhI"t/O0DXE]FE2'Ph%9ELoS3dbaRc:+&8nC)Jq`gc+1_o4(73Np(P;XC+Tske3O:^ILle2t;p[3f\\6DYm*RQB
%8(%-tZrR.G"R8gbnFYp`q&Aq(HH0jg^$fZ]p0!?RIf/s&led-\n^F,EHiN?B++JP0n`Q7r"8`3"LLkG;I.bbIT8f1ErVGWVJ,K<g
%>k[+15<aTNrmJR\nqV/?^AI`Da5?gW!PJ6_]5Kq3rStNYrq571kF[2"e%>X-G^9&$%mPMhpZ]T1++JV4p>^q#55k9H_okjUr:.Ne
%n0@tLRl=^Rp!97[p-0M(Y5A~>
%AI9_PrivateDataEnd
